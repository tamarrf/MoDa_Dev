{"version":3,"sources":["webpack:///./src/data/blockLibraries/wildfires.js"],"names":["wildfires","getNLCodeFromUnpackBlocks","blockType","unpackBlocks","workspace","tempBlock","newBlock","appendStatementInput","traverseBlocks","getInput","connection","code","netlogoGenerator","blockToCode","targetBlock","dispose","blockData","parentBlockConnection","reverse","blockGroup","block","field","fields","getField","setFieldValue","blockPreviousConnection","previousConnection","connect","condition","conditionBlock","input","outputConnection","value","name","children","inputList","Blockly","Blocks","init","this","jsonInit","dataObj","SPEED","getFieldValue","data","JSON","stringify","onchange","parse","count","getChildren","child","getSurroundParent","contentXml","Xml","domToText","blockToDom","contextData","DIRECTION","MAGNITUDE","defineBlocksWithJsonArray","statement_members","statementToCode","INDENT","ifContents","JavaScript","prefixLines","elseContents","usedTouching","branchCode","conditionCode","n","length","valueToCode","ORDER_NONE","includes","STATEMENT_SUFFIX","injectId","parameters","root","getRootBlock","type","num","size","prefix","toLowerCase","suffix","CHANGED","xmlblock","domToBlock","textToDom","getDescendants","descendant","speed","selectedOption_","mass","MASS","color","value_","position","POSITION","heading","HEADING","block_direction","block_magnitude","direction","magnitude","particleName","parameter","particleType","replace","particleCondition"],"mappings":"iQAEWA,EAAY,GAooCvB,SAASC,EAA0BC,EAAWC,EAAcC,GAC1D,IAAMC,EAAYD,EAAUE,SAASJ,GACrCG,EAAUE,qBAAqB,sBAC/BC,EAAeL,EAAcE,EAAUI,SAAS,sBAAsBC,WAAYN,GAClF,IAAMO,EAAOC,OAAiBC,YAAYR,EAAUI,SAAS,sBAAsBC,WAAWI,eAE9F,OADAT,EAAUU,UACHJ,EAGT,SAASH,EAAeQ,EAAWC,EAAuBb,GAAW,uBACxCY,EAAUE,WAD8B,IAC/D,2BAA4C,KAAnCC,EAAmC,QAEpCC,EAAQhB,EAAUE,SAASa,EAAWjB,WAC5C,IAAK,IAAImB,KAASF,EAAWG,OACrBF,EAAMG,SAASF,IACfD,EAAMI,cAAcL,EAAWG,OAAOD,GAAQA,GAItD,IAAMI,EAA0BL,EAAMM,mBAKtC,GAJIT,GACFA,EAAsBU,QAAQF,GAG5BN,EAAWS,UAAW,CACtB,IAAMC,EAAiBzB,EAAUE,SAASa,EAAWS,UAAU1B,WAC/DkB,EAAMX,SAASU,EAAWS,UAAUE,OAAOpB,WAAWiB,QAAQE,EAAeE,kBACzEZ,EAAWS,UAAUP,OACrBQ,EAAeL,cAAcL,EAAWS,UAAUP,MAAMW,MAAOb,EAAWS,UAAUP,MAAMY,MAK9Fd,EAAWe,UACb1B,EAAeW,EAAWe,SAAUd,EAAMe,UAAU,GAAGzB,WAAYN,IAzBR,+BA3oCrEJ,EAAY,CACV,WAAc,CACZ,CACE,KAAQ,WACR,KAAQ,YACR,UAAY,EACZ,SAAY,CACV,CACE,KAAQ,WACR,KAAQ,aACR,cAAiB,uBACjB,cAAiB,4BACjB,SAAY,CACV,CACE,KAAQ,QACR,KAAQ,oBAEV,CACE,KAAQ,QACR,KAAQ,aAEV,CACE,KAAQ,QACR,KAAQ,YAEV,CACE,KAAQ,QACR,KAAQ,YAEV,CACE,KAAQ,QACR,KAAQ,aAEV,CACE,KAAQ,QACR,KAAQ,gBAEV,CACE,KAAQ,QACR,KAAQ,iBAId,CACE,KAAQ,WACR,KAAQ,SACR,cAAiB,wBACjB,UAAY,EACZ,SAAY,CACV,CACE,KAAQ,QACR,KAAQ,gBAMV,CACE,KAAQ,QACR,KAAQ,YAEV,CACE,KAAQ,QACR,KAAQ,QAEV,CACE,KAAQ,QACR,KAAQ,cAEV,CACE,KAAQ,QACR,KAAQ,UAEV,CACI,KAAQ,QACR,KAAQ,WAIhB,CACE,KAAQ,WACR,KAAQ,UACR,cAAiB,yBACjB,UAAY,EACZ,SAAY,CACV,CACI,KAAQ,QACR,KAAQ,qBAEZ,CACI,KAAQ,QACR,KAAQ,2BASxBoC,IAAQC,OAAO,oBAAsB,CACjCC,KAAM,WACFC,KAAKC,SAAS,CACV,SAAY,6BACZ,MAAS,CACL,CACI,KAAQ,eACR,KAAQ,eACR,MAAS,IACT,IAAO,EACP,IAAO,KAEX,CACI,KAAQ,iBACR,KAAQ,OACR,QAAW,CACP,CACI,MACA,OAEJ,CACI,QACA,WAIZ,CACI,KAAQ,cACR,KAAQ,UAGhB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,wBACT,QAAW,oBAEf,IAAIC,EAAU,CACV,aAAe,CACX,CACEvC,UAAW,YACXoB,OAAQ,CACNoB,MAAO,aAGX,CACExC,UAAW,eACXoB,OAAQ,CACN,SAA2C,UAA/BiB,KAAKI,cAAc,QAAsB,SAAW,WAGpE,CACEzC,UAAW,cACXoB,OAAQ,CACN,QAAW,WAGf,CACEpB,UAAW,WACXoB,OAAQ,CACN,KAAQ,WAGZ,CACEpB,UAAW,YACXoB,OAAQ,CACN,MAAwC,UAA/BiB,KAAKI,cAAc,QAAsB,OAAS,UAInE,YAAc,CACV,SAAW,GAEf,WAAa,IAGjBJ,KAAKK,KAAOC,KAAKC,UAAUL,IAG/BM,SAAU,WACN,IAAMN,EAAUI,KAAKG,MAAMT,KAAKK,MAChC,GAAGL,KAAK9B,SAAS,sBAAsB,CAEnC,IAFmC,EAE/BwC,EAAQ,EAFuB,iBAGjBV,KAAKW,eAHY,IAGnC,2BAAsC,KAA7BC,EAA6B,QAChCA,EAAMC,sBAAwBb,OAChB,IAAVU,EACAR,EAAQY,WAAajB,IAAQkB,IAAIC,UAAUnB,IAAQkB,IAAIE,WAAWL,IAGlEV,EAAQY,YAAcjB,IAAQkB,IAAIC,UAAUnB,IAAQkB,IAAIE,WAAWL,MAErEF,IAX2B,+BAgBlCR,EAAQgB,YAAY,aACrBhB,EAAQtC,aAAe,CACnB,CACED,UAAW,YACXoB,OAAQ,CACNoB,MAAO,aAGX,CACExC,UAAW,eACXoB,OAAQ,CACN,SAA2C,UAA/BiB,KAAKI,cAAc,QAAsB,SAAW,WAGpE,CACEzC,UAAW,cACXoB,OAAQ,CACN,QAAW,WAGf,CACEpB,UAAW,WACXoB,OAAQ,CACN,KAAQ,WAGZ,CACEpB,UAAW,YACXoB,OAAQ,CACN,MAAwC,UAA/BiB,KAAKI,cAAc,QAAsB,OAAS,WAKvEJ,KAAKK,KAAOC,KAAKC,UAAUL,KAKnCL,IAAQC,OAAO,YAAc,CACzBC,KAAM,WACFC,KAAKC,SAAS,CACV,SAAY,cACZ,MAAS,CACL,CACI,KAAQ,cACR,KAAQ,UAGhB,cAAgB,EAChB,kBAAqB,KACrB,cAAiB,KACjB,QAAW,kBACX,MAAS,wBAEb,IAAIC,EAAU,CACV,aAAgB,CACZ,CACIvC,UAAW,cACXoB,OAAQ,GACRM,UAAW,CACPE,MAAO,MACP5B,UAAW,oBACXmB,MAAO,CACHY,KAAM,OACND,MAAO,gBAGfE,SAAU,CACR,CACEhC,UAAW,aACXoB,OAAQ,OAKpB,YAAe,CACX,SAAW,GAEf,WAAc,IAGlBiB,KAAKK,KAAOC,KAAKC,UAAUL,IAE/BM,SAAU,WACN,GAAIR,KAAK9B,SAAS,sBAAuB,CACrC,IADqC,EAC/BgC,EAAUI,KAAKG,MAAMT,KAAKK,MAC5BK,EAAQ,EAFyB,iBAGnBV,KAAKW,eAHc,IAGrC,2BAAsC,KAA7BC,EAA6B,QAChCA,EAAMC,sBAAwBb,OAChB,IAAVU,EACAR,EAAQY,WAAajB,IAAQkB,IAAIC,UAAUnB,IAAQkB,IAAIE,WAAWL,IAGlEV,EAAQY,YAAcjB,IAAQkB,IAAIC,UAAUnB,IAAQkB,IAAIE,WAAWL,MAErEF,IAX6B,8BAcrCV,KAAKK,KAAOC,KAAKC,UAAUL,MAMvCL,IAAQC,OAAO,gBAAkB,CAC7BC,KAAM,WACFC,KAAKC,SAAS,CACV,SAAY,UACZ,MAAS,CACL,CACI,KAAQ,cACR,KAAQ,UAGhB,cAAgB,EAChB,kBAAqB,KACrB,cAAiB,KACjB,QAAW,kBACX,MAAS,wBAEb,IAAIC,EAAU,CACV,aAAe,CACX,CACEvC,UAAW,OACXoB,OAAQ,CACNoC,UAAW,SACXC,UAAW,UAInB,YAAc,CACV,SAAW,GAEf,WAAa,IAGjBpB,KAAKK,KAAOC,KAAKC,UAAUL,IAG/BM,SAAU,WACN,IAAMN,EAAUI,KAAKG,MAAMT,KAAKK,MAEhC,GAAGL,KAAK9B,SAAS,sBAAsB,CACnC,IADmC,EAC/BwC,EAAQ,EADuB,iBAEjBV,KAAKW,eAFY,IAEnC,2BAAsC,KAA7BC,EAA6B,QAChCA,EAAMC,sBAAwBb,OAChB,IAAVU,EACAR,EAAQY,WAAajB,IAAQkB,IAAIC,UAAUnB,IAAQkB,IAAIE,WAAWL,IAGlEV,EAAQY,YAAcjB,IAAQkB,IAAIC,UAAUnB,IAAQkB,IAAIE,WAAWL,MAErEF,IAV2B,+BAcvCV,KAAKK,KAAOC,KAAKC,UAAUL,KAKnCL,IAAQC,OAAO,QAAU,CACrBC,KAAM,WACFC,KAAKC,SAAS,CACV,SAAY,UACZ,MAAS,CACL,CACI,KAAQ,cACR,KAAQ,UAGhB,cAAgB,EAChB,kBAAqB,KACrB,cAAiB,KACjB,QAAW,kBACX,MAAS,wBAEb,IAAIC,EAAU,CACV,aAAe,CACX,CACEvC,UAAW,OACXoB,OAAQ,CACNoC,UAAW,OACXC,UAAW,UAInB,YAAc,CACV,SAAW,GAEf,WAAa,IAGjBpB,KAAKK,KAAOC,KAAKC,UAAUL,IAG/BM,SAAU,WACN,IAAMN,EAAUI,KAAKG,MAAMT,KAAKK,MAEhC,GAAGL,KAAK9B,SAAS,sBAAsB,CACnC,IADmC,EAC/BwC,EAAQ,EADuB,iBAEjBV,KAAKW,eAFY,IAEnC,2BAAsC,KAA7BC,EAA6B,QAChCA,EAAMC,sBAAwBb,OAChB,IAAVU,EACAR,EAAQY,WAAajB,IAAQkB,IAAIC,UAAUnB,IAAQkB,IAAIE,WAAWL,IAGlEV,EAAQY,YAAcjB,IAAQkB,IAAIC,UAAUnB,IAAQkB,IAAIE,WAAWL,MAErEF,IAV2B,+BAcvCV,KAAKK,KAAOC,KAAKC,UAAUL,KAInCL,IAAQwB,0BAA0B,CAClC,CACI,KAAQ,YACR,SAAY,eACZ,MAAS,CACL,CACI,KAAQ,iBACR,KAAQ,QACR,QAAW,CACP,CACI,OACA,QAEJ,CACI,WACA,YAEJ,CACI,MACA,OAEJ,CACI,SACA,UAEJ,CACI,OACA,WAKhB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,kCAEb,CACI,KAAQ,WACR,SAAY,cACZ,MAAS,CACL,CACI,KAAQ,iBACR,KAAQ,OACR,QAAW,CACP,CACI,MACA,OAEJ,CACI,QACA,YAKhB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,kCAEb,CACI,KAAO,WACP,SAAY,cACZ,MAAS,CACL,CACI,KAAQ,iBACR,KAAQ,OACR,QAAW,CACP,CACI,QACA,SAEJ,CACI,SACA,UAEJ,CACI,QACA,YAKhB,cAAgB,EAChB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,iCACT,QAAW,gCAEX,CACI,KAAQ,YACR,SAAY,eACZ,MAAS,CACL,CACI,KAAQ,iBACR,KAAQ,QACR,QAAW,CACP,CACI,MACA,OAEJ,CACI,QACA,SAEJ,CACI,OACA,QAEJ,CACI,OACA,QAEJ,CACE,OACA,QAEF,CACE,QACA,YAKd,kBAAqB,KACrB,cAAiB,KACjB,QAAW,GACX,QAAW,GACX,MAAS,kCAEb,CACI,KAAQ,WACR,SAAY,cACZ,MAAS,CACL,CACI,KAAQ,eACR,KAAQ,OACR,MAAS,EACT,IAAO,EACP,IAAO,KAGf,kBAAqB,KACrB,cAAiB,KACjB,QAAW,GACX,QAAW,GACX,MAAS,kCAEjB,CACI,KAAQ,eACR,SAAY,kBACZ,MAAS,CACL,CACI,KAAQ,iBACR,KAAQ,WACR,QAAW,CACP,CACI,SACA,UAEJ,CACI,SACA,UAEJ,CACI,gBACA,YAEJ,CACI,kBACA,iBAKhB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,kCAET,CACI,KAAQ,cACR,SAAY,iBACZ,MAAS,CACP,CACI,KAAQ,iBACR,KAAQ,UACR,QAAW,CACP,CACI,SACA,UAEJ,CACI,KACA,MAEJ,CACI,QACA,SAEJ,CACI,OACA,QAEJ,CACI,OACA,WAKd,kBAAqB,KACrB,cAAiB,KACjB,QAAW,GACX,QAAW,GACX,MAAS,kCAIjB,CACI,KAAQ,OACR,SAAY,aACZ,MAAS,CACP,CACI,KAAQ,iBACR,KAAQ,YACR,QAAW,CACP,CACI,UACA,WAkBJ,CACI,oBACA,UAIZ,CACI,KAAQ,iBACR,KAAQ,YACR,QAAW,CACP,CACI,WACA,QAcJ,CACI,gBACA,WAKd,cAAgB,EAChB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,uBAEb,CACI,KAAQ,aACR,SAAY,aACZ,cAAgB,EAChB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,uBAEb,CACI,KAAQ,QACR,SAAY,kBACZ,cAAgB,EAChB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,uBAEb,CACI,KAAQ,SACR,SAAY,mBACZ,cAAgB,EAChB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,uBAGb,CACI,KAAQ,oBACR,SAAY,eACZ,MAAS,CACL,CACI,KAAQ,iBACR,KAAQ,OACR,QAAW,CACP,CACI,gBACA,OAEJ,CACI,kBACA,SAEJ,CACI,gBACA,SAIZ,CACI,KAAQ,eAEZ,CACI,KAAQ,kBACR,KAAQ,aAGhB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,wBAEb,CACI,KAAQ,oBACR,SAAY,cACZ,MAAS,CACL,CACI,KAAQ,iBACR,KAAQ,OACR,QAAW,CACP,CACI,eACA,eAEJ,CACI,eACA,eAEJ,CACI,iBACA,iBAEJ,CACI,OACA,WAKhB,OAAU,UACV,MAAS,uBACT,QAAW,GACX,QAAW,IAEX,CACI,KAAQ,eACR,SAAY,uCACZ,MAAS,CACL,CACI,KAAQ,iBACR,KAAQ,OACR,QAAW,CACP,CACI,KACA,MAEJ,CACI,OACA,UAIZ,CACI,KAAQ,eAEZ,CACI,KAAQ,iBACR,KAAQ,WACR,QAAW,CACP,CACI,KACA,MAEJ,CACI,OACA,QAEJ,CACI,WACA,WAKhB,kBAAqB,KACrB,cAAiB,KACjB,MAAS,+BACT,QAAW,GACX,QAAW,MAMnBhD,OAAiB,OAAS,SAAUQ,GAChC,IAAMyC,EAAoBjD,OAAiBkD,gBAAgB1C,EAAO,OAC5DT,EAAO,kBACTC,OAAiBmD,OAAS,UAC1BF,EACAjD,OAAiBmD,OAHR,qBAKb,OAAOpD,GAEXC,OAAiB,MAAQ,SAAUQ,GAC/B,IAAMyC,EAAoBjD,OAAiBkD,gBAAgB1C,EAAO,MAC5DT,EAAO,iBAETC,OAAiBmD,OAAS,OAC1BF,EACAjD,OAAiBmD,OAAS,4BAC1BnD,OAAiBmD,OALR,iBAOb,OAAOpD,GAGXC,OAAiB,eAAiB,SAAUQ,GACxC,IAAIyC,EAAoBjD,OAAiBmD,OAAS,wBAA0BnD,OAAiBkD,gBAAgB1C,EAAO,SAEhH4C,EAAa,uBACbH,EAAoB,IACxBG,EAAa5B,IAAQ6B,WAAWC,YAAYF,EAAYpD,OAAiBmD,QAEzE,IAAII,EAAe,MAAQvD,OAAiBmD,OAAS,uBAAyBnD,OAAiBmD,OAAS,MAAQnD,OAAiBmD,OAASnD,OAAiBmD,OAAS,uBAAyBnD,OAAiBmD,OAA3L,SACnBI,EAAe/B,IAAQ6B,WAAWC,YAAYC,EAAcvD,OAAiBmD,QAC7E,IAAIpD,EAAO,iCAAwCqD,EAAa,QAMhE,OAJArD,EAAOyB,IAAQ6B,WAAWC,YACtBvD,EAAMC,OAAiBmD,QAAUI,EAG9B,mBAAqBxD,EAAO,SAIvCC,OAAiB,eAAiB,SAAUQ,GACxC,IACIgD,EACWC,EAAYC,EAFvBC,EAAI,EAEJ5D,EAAO,GAEoB,IAA3BS,EAAMe,UAAUqC,OAChB7D,GAAQ,MAGRA,GAAQ,WAGZ,GACI2D,EAAgB1D,OAAiB6D,YAAYrD,EAAO,KAAOmD,EACvD3D,OAAiB8D,aAAe,QACpCN,EAAeE,EAAcK,SAAS,2HACtCN,EAAaD,EAAgBxD,OAAiBmD,OAAS,yBAA2BnD,OAAiBkD,gBAAgB1C,EAAO,KAAOmD,GAAO3D,OAAiBmD,OAAS,yBAA4BnD,OAAiBkD,gBAAgB1C,EAAO,KAAOmD,GACzOnC,IAAQ6B,WAAWW,mBACnBP,EAAajC,IAAQ6B,WAAWC,YAC5B9B,IAAQ6B,WAAWY,SAASzC,IAAQ6B,WAAWW,iBAC3CxD,GAAQR,OAAiBmD,QAAUM,GAE/C1D,IAAS4D,EAAI,EAAI,KAAO,IAAMD,EAAgB,QAAUD,EAAa,IACrEE,UACKnD,EAAMX,SAAS,KAAO8D,IAe/B,OAbInD,EAAMX,SAAS,SAAW2B,IAAQ6B,WAAWW,oBAC7CP,EAAazD,OAAiBkD,gBAAgB1C,EAAO,QACjDgB,IAAQ6B,WAAWW,mBACnBP,EAAajC,IAAQ6B,WAAWC,YAC5B9B,IAAQ6B,WAAWY,SAASzC,IAAQ6B,WAAWW,iBAC3CxD,GAAQR,OAAiBmD,QAAUM,GAE/C1D,GAAQ,QAAU0D,EAAa,KAGP,IAA3BjD,EAAMe,UAAUqC,OAAgB7D,GAAQ,KAAOA,GAAQ,MACzCA,GAAfyD,EAAuB,yBAAkC,GAElDzD,GAMXC,OAAiB,oBAAsB,SAAUQ,GAC7C,IAKI0D,EALEC,EAAO3D,EAAM4D,eAAeC,KAC5BxC,EAAUI,KAAKG,MAAM5B,EAAMwB,MAC3BsC,EAAM9D,EAAMuB,cAAc,gBAC1BsC,EAAO7D,EAAMuB,cAAc,QAC3BwC,EAAiB,UAATF,EAAmB,EAAI,EAEjCG,EACJ,sBAAwBH,EAAKI,cAA7B,mEAGcF,EAHd,+dAeIG,EAAS,GACb,GAAK7C,EAAQgB,YAAY8B,QAGrB,CACA,IADA,EACIC,EAAWpD,IAAQkB,IAAImC,WAAWrD,IAAQkB,IAAIoC,UAAU7C,KAAKG,MAAM5B,EAAMwB,MAAMS,YAAad,KAAKnC,WADrG,iBAEsBoF,EAASG,kBAF/B,IAEA,2BAAgD,KAAxCC,EAAwC,QAChC,gBAATb,GAA8C,iBAApBa,EAAWX,MACpCW,EAAW7E,SAAQ,IAJ3B,8BAOA+D,EAAalE,OAAiBC,YAAY2E,GAC1CA,EAASzE,eAVT+D,EAAa7E,EAA0BmB,EAAM6D,KAAMxC,EAAQtC,aAAcoC,KAAKnC,WAYlF,IAAIO,EAAO,oBAAsBuE,EAAM,QAAU9C,IAAQ6B,WAAWC,YAAYkB,EAAQxE,OAAiBmD,QAAU3B,IAAQ6B,WAAWC,YAAYY,EAAYlE,OAAiBmD,QAAU3B,IAAQ6B,WAAWC,YAAYoB,EAAQ1E,OAAiBmD,QAAU,QAC3P,OAAOpD,GAIXC,OAAiB,aAAe,SAAUQ,GACtC,IAAIyE,EAAQjF,OAAiB8B,MAAMtB,EAAMG,SAAS,SAASuE,gBAAgB,IACvEnF,EAAO,kCAAoCkF,EAAQ,KACvD,OAAOlF,GAIXC,OAAiB,YAAc,SAAUQ,GACrC,IAAI6D,EAAO7D,EAAMG,SAAS,QAAQuE,gBAAgB,GAC9CnF,EAAO,sBAAwBsE,EAAO,MAC1C,OAAOtE,GAIXC,OAAiB,YAAc,SAAUQ,GACrC,IAAI2E,EAAOnF,OAAiBoF,KAAK5E,EAAMG,SAAS,QAAQuE,gBAAgB,IACpEnF,EAAO,YAAcoF,EAAd,6CAEX,OAAOpF,GAIXC,OAAiB,aAAe,SAAUQ,GACtC,IAAI6E,EAAQ7E,EAAMG,SAAS,SAASuE,gBAAgB,GAChDnF,EAAO,aAAesF,EAAQ,KAClC,OAAOtF,GAIXC,OAAiB,YAAc,SAAUQ,GACrC,IAAI+D,EAAO/D,EAAMG,SAAS,QAAQ2E,OAC9BvF,EAAO,YAAcwE,EAAO,KAChC,OAAOxE,GAIXC,OAAiB,gBAAkB,SAAUQ,GACzC,IAAM+E,EAAWvF,OAAiBwF,SAAShF,EAAMG,SAAS,YAAYuE,gBAAgB,IAChFzE,EAAQD,EAAMG,SAAS,YAAYuE,gBAAgB,GACrDnF,EAAkB,UAAVU,EAAsB,SAAW8E,EAAW,KAASA,EAAW,KAC5E,OAAOxF,GAIXC,OAAiB,eAAiB,SAAUQ,GACxC,IAAIiF,EAAUzF,OAAiB0F,QAAQlF,EAAMG,SAAS,WAAWuE,gBAAgB,IAC7EnF,EAAO,qCAAuC0F,EAAU,KAC5D,OAAO1F,GAMXC,OAAiB,QAAU,SAAUQ,GACjC,IAAImF,EAAkBnF,EAAMG,SAAS,aAAauE,gBAAgB,GAC9DU,EAAkBpF,EAAMG,SAAS,aAAauE,gBAAgB,GAC9DW,EAAY7F,OAAiB8C,UAAU6C,GACvCG,EAAY9F,OAAiB+C,UAAU6C,GACvC7F,EAAO,6BACG8F,EAAY,IAAMC,EAAY,KAO5C,MANwB,SAApBF,IACF7F,GAAQ,oDAEc,YAApB4F,IACF5F,GAAc,sBAETA,GAIXC,OAAiB,QAAU,SAAUQ,GACjC,IAAIT,EACE8B,EAAUI,KAAKG,MAAM5B,EAAMwB,MACjC,GAAKH,EAAQgB,YAAY8B,QAGrB,CACA,IAAIC,EAAWpD,IAAQkB,IAAImC,WAAWrD,IAAQkB,IAAIoC,UAAU7C,KAAKG,MAAM5B,EAAMwB,MAAMS,YAAad,KAAKnC,WACrGO,EAAOC,OAAiBC,YAAY2E,GACpCA,EAASzE,eALTJ,EAAOV,EAA0BmB,EAAM6D,KAAMxC,EAAQtC,aAAcoC,KAAKnC,WAO5E,OAAOO,GAGXC,OAAiB,gBAAkB,SAAUQ,GACzC,IAAIT,EACE8B,EAAUI,KAAKG,MAAM5B,EAAMwB,MACjC,GAAKH,EAAQgB,YAAY8B,QAGrB,CACA,IAAIC,EAAWpD,IAAQkB,IAAImC,WAAWrD,IAAQkB,IAAIoC,UAAU7C,KAAKG,MAAM5B,EAAMwB,MAAMS,YAAad,KAAKnC,WACrGO,EAAOC,OAAiBC,YAAY2E,GACpCA,EAASzE,eALTJ,EAAOV,EAA0BmB,EAAM6D,KAAMxC,EAAQtC,aAAcoC,KAAKnC,WAO5E,OAAOO,GAIXC,OAAiB,YAAc,SAAUQ,GACrC,IAAIT,EACE8B,EAAUI,KAAKG,MAAM5B,EAAMwB,MACjC,GAAKH,EAAQgB,YAAY8B,QAGrB,CACA,IAAIC,EAAWpD,IAAQkB,IAAImC,WAAWrD,IAAQkB,IAAIoC,UAAU7C,KAAKG,MAAM5B,EAAMwB,MAAMS,YAAad,KAAKnC,WACrGO,EAAOC,OAAiBC,YAAY2E,GACpCA,EAASzE,eALTJ,EAAOV,EAA0BmB,EAAM6D,KAAMxC,EAAQtC,aAAcoC,KAAKnC,WAO5E,OAAOO,GAIXC,OAAiB,cAAgB,WAC7B,IAAID,EACJ,iCACAC,OAAiBmD,OAAS,qCAC1BnD,OAAiBmD,OAAQ,2CACzBnD,OAAiBmD,OAAS,gEAC1BnD,OAAiBmD,OAAS,oDAC1BnD,OAAiBmD,OAAS,gCAC1BnD,OAAiBmD,OAAS,qDAC1BnD,OAAiBmD,OAAS,sCAC1B,OAAOpD,GAIXC,OAAiB,SAAW,WACxB,IAAMD,EACF,iCACAC,OAAiBmD,OAAS,2CAC1BnD,OAAiBmD,OAAS,0DAC1BnD,OAAiBmD,OAHjB,0CAMAnD,OAAiBmD,OANjB,WAQJ,OAAOpD,GAIXC,OAAiB,UAAY,WACzB,IAAMD,EACF,kCACAC,OAAiBmD,OAAS,2CAC1BnD,OAAiBmD,OAAS,kCAC1BnD,OAAiBmD,OAAS,4BAC1BnD,OAAiBmD,OAAS,MAC1BnD,OAAiBmD,OAASnD,OAAiBmD,OAAS,8BACpDnD,OAAiBmD,OAASnD,OAAiBmD,OAAS,kCACpDnD,OAAiBmD,OAPjB,YASAnD,OAAiBmD,OATjB,mBAWJ,OAAOpD,GAKXC,OAAiB,qBAAuB,SAAUQ,GAC9C,IAAMuF,EAAevF,EAAMG,SAAS,QAAQ2E,QAAU,MAChDU,EAA6B,QAAjBD,EAAyB,GAAK,2BAA6BA,EAAatB,cAAgB,KACpGxB,EAAoBjD,OAAiBkD,gBAAgB1C,EAAO,YAC9DT,EAAO,gBAAkBiG,EAAlB,QAA6C/C,EAAoB,MAC5E,OAAOlD,GAIXC,OAAiB,qBAAuB,SAAUQ,GAC9C,IACIT,EACAkG,EAFE5B,EAAO7D,EAAMuB,cAAc,QAGjC,GAAGsC,EAAKN,SAAS,YAAY,CAErBkC,EADD5B,EAAKN,SAAS,OACE,MAGAvD,EAAMG,SAAS,QAAQuE,gBAAgB,GAAGgB,QAAQ,YAAa,IAElF,IAAMC,EAAoC,OAAhBF,EAAwB,mDAAqDA,EAAe,KAAO,GAC7HlG,EAAO,0HAA4HoG,OAGnIpG,EAAO,iGAEX,MAAO,CAACA,EAAMC,OAAiB8D","file":"wildfires.bundle.js","sourcesContent":["import Blockly from 'blockly'\nimport { netlogoGenerator } from '@/blocklyHelpers/netlogoGenerator';\nexport let wildfires = {};\n\nwildfires = {\n  \"categories\": [\n    {\n      \"kind\": \"category\",\n      \"name\": \"Wildfires\",\n      \"expanded\": true,\n      \"contents\": [\n        {\n          \"kind\": \"category\",\n          \"name\": \"Properties\",\n          \"toolboxitemid\": \"propertiesUnpackable\",\n          \"categorystyle\": \"smoke_properties_category\",\n          \"contents\": [\n            {\n              \"kind\": \"block\",\n              \"type\": \"create_particles\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_speed\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_type\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_mass\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_color\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_position\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_heading\"\n            },\n          ]\n        },\n        {\n          \"kind\": \"category\",\n          \"name\": \"Action\",\n          \"categorystyle\": \"smoke_action_category\",\n          \"expanded\": true,\n          \"contents\": [\n            {\n              \"kind\": \"block\",\n              \"type\": \"move forward\"\n            },\n            // {\n            //   \"kind\": \"block\",\n            //   \"type\": \"blow\"\n            // },\n            {\n              \"kind\": \"block\",\n              \"type\": \"interact\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"move\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"bounce_off\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"attach\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"erase\"\n              }\n          ]\n        },\n        {\n          \"kind\": \"category\",\n          \"name\": \"Control\",\n          \"categorystyle\": \"smoke_control_category\",\n          \"expanded\": true,\n          \"contents\": [\n            {\n                \"kind\": \"block\",\n                \"type\": \"ask_each_particle\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"touching_dropdown\"\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\nBlockly.Blocks['create_particles'] = {\n    init: function () {\n        this.jsonInit({\n            \"message0\": \"create  %1 %2 particles %3\",\n            \"args0\": [\n                {\n                    \"type\": \"field_slider\",\n                    \"name\": \"PARTICLE_NUM\",\n                    \"value\": 1000,\n                    \"min\": 0,\n                    \"max\": 2000\n                },\n                {\n                    \"type\": \"field_dropdown\",\n                    \"name\": \"TYPE\",\n                    \"options\": [\n                        [\n                            \"air\",\n                            \"AIR\"\n                        ],\n                        [\n                            \"smoke\",\n                            \"SMOKE\"\n                        ]\n                    ]\n                },\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"style\": \"smoke_behavior_blocks\",\n            \"mutator\": \"general_mutator\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                {\n                  blockType: 'set_speed',\n                  fields: {\n                    SPEED: 'VERY_LOW',\n                  }\n                },\n                {\n                  blockType: 'set_position',\n                  fields: {\n                    'POSITION': this.getFieldValue('TYPE') === 'SMOKE' ? 'CENTER' : 'RANDOM',\n                  }\n                },\n                {\n                  blockType: 'set_heading',\n                  fields: {\n                    'HEADING': 'RANDOM',\n                  }\n                },\n                {\n                  blockType: 'set_mass',\n                  fields: {\n                    'MASS': 'MEDIUM',\n                  }\n                },\n                {\n                  blockType: 'set_color',\n                  fields: {\n                    'COLOR': this.getFieldValue('TYPE') === 'SMOKE' ? 'GRAY' : 'CYAN',\n                  }\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        if(this.getInput('EXPANDED_STATEMENT')){\n            // add blocks to XML\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n        }\n        // update fields to match type if type is the thing that changed\n        if (!dataObj.contextData['CHANGED']) {\n            dataObj.unpackBlocks = [\n                {\n                  blockType: 'set_speed',\n                  fields: {\n                    SPEED: 'VERY_LOW',\n                  }\n                },\n                {\n                  blockType: 'set_position',\n                  fields: {\n                    'POSITION': this.getFieldValue('TYPE') === 'SMOKE' ? 'CENTER' : 'RANDOM',\n                  }\n                },\n                {\n                  blockType: 'set_heading',\n                  fields: {\n                    'HEADING': 'RANDOM',\n                  }\n                },\n                {\n                  blockType: 'set_mass',\n                  fields: {\n                    'MASS': 'MEDIUM',\n                  }\n                },\n                {\n                  blockType: 'set_color',\n                  fields: {\n                    'COLOR': this.getFieldValue('TYPE') === 'SMOKE' ? 'GRAY' : 'CYAN',\n                  }\n                },\n            ]\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\n// Collision with mutation\nBlockly.Blocks['interact'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"interact %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"smoke_action_blocks\"\n        });\n        let dataObj = {\n            'unpackBlocks': [\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'ANYPARTICLE'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'bounce_off',\n                        fields: {}\n                      }\n                    ]\n                },\n            ],\n            'contextData': {\n                'CHANGED': false\n            },\n            'contentXml': ''\n        };\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    onchange: function(){\n        if (this.getInput('EXPANDED_STATEMENT')) {\n            const dataObj = JSON.parse(this.data);\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n            this.data = JSON.stringify(dataObj);\n        }\n    }\n};\n\n// move block\nBlockly.Blocks['move forward'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"move %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"smoke_action_blocks\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                {\n                  blockType: 'move',\n                  fields: {\n                    DIRECTION: 'upward',\n                    MAGNITUDE: 'SAME'\n                  }\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        // update connected blocks if visible\n        if(this.getInput('EXPANDED_STATEMENT')){\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\n// wind block\nBlockly.Blocks['blow'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"blow %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"smoke_action_blocks\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                {\n                  blockType: 'move',\n                  fields: {\n                    DIRECTION: 'WIND',\n                    MAGNITUDE: 'WIND'\n                  }\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        // update connected blocks if visible\n        if(this.getInput('EXPANDED_STATEMENT')){\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\nBlockly.defineBlocksWithJsonArray([\n{\n    \"type\": \"set_speed\",\n    \"message0\": \"set speed %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"SPEED\",\n            \"options\": [\n                [\n                    \"zero\",\n                    \"ZERO\"\n                ],\n                [\n                    \"very low\",\n                    \"VERY_LOW\"\n                ],\n                [\n                    \"low\",\n                    \"LOW\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"high\",\n                    \"HIGH\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_behavior_unpacked_blocks\"\n},\n{\n    \"type\": \"set_type\",\n    \"message0\": \"set type %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"air\",\n                    \"AIR\"\n                ],\n                [\n                    \"smoke\",\n                    \"SMOKE\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_behavior_unpacked_blocks\"\n},\n{\n    \"type\":\"set_mass\",\n    \"message0\": \"set mass %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"MASS\",\n            \"options\": [\n                [\n                    \"light\",\n                    \"LIGHT\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"heavy\",\n                    \"HEAVY\"\n                ]\n            ]\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_behavior_unpacked_blocks\",\n    \"tooltip\": \"pick a value between 0 and 5\",\n},\n    {\n        \"type\": \"set_color\",\n        \"message0\": \"set color %1\",\n        \"args0\": [\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"COLOR\",\n                \"options\": [\n                    [\n                        \"red\",\n                        \"RED\"\n                    ],\n                    [\n                        \"green\",\n                        \"GREEN\"\n                    ],\n                    [\n                        \"blue\",\n                        \"BLUE\"\n                    ],\n                    [\n                        \"gray\",\n                        \"GRAY\"\n                    ],\n                    [\n                      \"cyan\",\n                      \"CYAN\"\n                    ],\n                    [\n                      \"white\",\n                      \"WHITE\"\n                    ]\n                ]\n            }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\",\n        \"style\": \"smoke_behavior_unpacked_blocks\"\n    },\n    {\n        \"type\": \"set_size\",\n        \"message0\": \"set size %1\",\n        \"args0\": [\n            {\n                \"type\": \"field_slider\",\n                \"name\": \"SIZE\",\n                \"value\": 2,\n                \"min\": 1,\n                \"max\": 10,\n            },\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\",\n        \"style\": \"smoke_behavior_unpacked_blocks\"\n    },\n{\n    \"type\": \"set_position\",\n    \"message0\": \"set position %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"POSITION\",\n            \"options\": [\n                [\n                    \"random\",\n                    \"RANDOM\"\n                ],\n                [\n                    \"center\",\n                    \"CENTER\"\n                ],\n                [\n                    \"vertical line\",\n                    \"VERTICAL\"\n                ],\n                [\n                    \"horizontal line\",\n                    \"HORIZONTAL\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_behavior_unpacked_blocks\"\n},\n    {\n        \"type\": \"set_heading\",\n        \"message0\": \"set heading %1\",\n        \"args0\": [\n          {\n              \"type\": \"field_dropdown\",\n              \"name\": \"HEADING\",\n              \"options\": [\n                  [\n                      \"random\",\n                      \"RANDOM\"\n                  ],\n                  [\n                      \"up\",\n                      \"UP\"\n                  ],\n                  [\n                      \"right\",\n                      \"RIGHT\"\n                  ],\n                  [\n                      \"down\",\n                      \"DOWN\"\n                  ],\n                  [\n                      \"left\",\n                      \"LEFT\"\n                  ]\n              ]\n          }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\",\n        \"style\": \"smoke_behavior_unpacked_blocks\"\n    },\n\n// Action blocks\n{\n    \"type\": \"move\",\n    \"message0\": \"move %1 %2\",\n    \"args0\": [\n      {\n          \"type\": \"field_dropdown\",\n          \"name\": \"DIRECTION\",\n          \"options\": [\n              [\n                  \"forward\",\n                  \"FORWARD\"\n              ],\n            //   [\n            //       \"upward\",\n            //       \"UPWARD\"\n            //   ],\n            //   [\n            //       \"rightward\",\n            //       \"RIGHTWARD\"\n            //   ],\n            //   [\n            //       \"downward\",\n            //       \"DOWNWARD\"\n            //   ],\n            //   [\n            //       \"leftward\",\n            //       \"LEFTWARD\"\n            //   ],\n              [\n                  \"in wind direction\",\n                  \"WIND\"\n              ]\n          ]\n      },\n      {\n          \"type\": \"field_dropdown\",\n          \"name\": \"MAGNITUDE\",\n          \"options\": [\n              [\n                  \"the same\",\n                  \"SAME\"\n              ],\n            //   [\n            //       \"much more\",\n            //       \"MUCH_MORE\"\n            //   ],\n            //   [\n            //       \"more\",\n            //       \"MORE\"\n            //   ],\n            //   [\n            //       \"a little more\",\n            //       \"LITTLE_MORE\"\n            //   ],\n              [\n                  \"at wind speed\",\n                  \"WIND\"\n              ]\n          ]\n      }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"bounce_off\",\n    \"message0\": \"bounce off\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"erase\",\n    \"message0\": \"erase particles\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"attach\",\n    \"message0\": \"attach particles\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n// Control Blocks\n{\n    \"type\": \"ask_each_particle\",\n    \"message0\": \"ask %1 %2 %3\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"air particles\",\n                    \"AIR\"\n                ],\n                [\n                    \"smoke particles\",\n                    \"SMOKE\"\n                ],\n                [\n                    \"all particles\",\n                    \"ALL\"\n                ]\n            ]\n        },\n        {\n            \"type\": \"input_dummy\"\n        },\n        {\n            \"type\": \"input_statement\",\n            \"name\": \"ASK_EACH\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_control_blocks\"\n},\n{\n    \"type\": \"touching_dropdown\",\n    \"message0\": \"touching %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"any particle\",\n                    \"ANYPARTICLE\"\n                ],\n                [\n                    \"air particle\",\n                    \"AIRPARTICLE\"\n                ],\n                [\n                    \"smoke particle\",\n                    \"SMOKEPARTICLE\"\n                ],\n                [\n                    \"wall\",\n                    \"WALL\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"smoke_control_blocks\",\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n},\n    {\n        \"type\": \"relationship\",\n        \"message0\": \"as size goes %1 %2 step size goes %3\",\n        \"args0\": [\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"SIZE\",\n                \"options\": [\n                    [\n                        \"up\",\n                        \"UP\"\n                    ],\n                    [\n                        \"down\",\n                        \"DOWN\"\n                    ]\n                ]\n            },\n            {\n                \"type\": \"input_dummy\"\n            },\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"STEPSIZE\",\n                \"options\": [\n                    [\n                        \"up\",\n                        \"UP\"\n                    ],\n                    [\n                        \"down\",\n                        \"DOWN\"\n                    ],\n                    [\n                        \"the same\",\n                        \"SAME\"\n                    ]\n                ]\n            }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"style\": \"smoke_action_unpacked_blocks\",\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    },\n]);\n\n// GEN BLOCKS\n// Setup blocks\nnetlogoGenerator['set'] = function (block) {\n    const statement_members = netlogoGenerator.statementToCode(block, 'SET');\n    const code = 'to blocks-set\\n' +\n        netlogoGenerator.INDENT + 'setup\\n' +\n        statement_members +\n        netlogoGenerator.INDENT + 'reset-ticks\\n' +\n        'end\\n';\n    return code;\n};\nnetlogoGenerator['go'] = function (block) {\n    const statement_members = netlogoGenerator.statementToCode(block, 'GO');\n    const code = 'to blocks-go\\n' +\n        // netlogoGenerator.INDENT + 'mouse_click\\n' +\n        netlogoGenerator.INDENT + 'go\\n' +\n        statement_members +\n        netlogoGenerator.INDENT + 'tick-advance tick-delta\\n' +\n        netlogoGenerator.INDENT + 'display\\n' +\n        'end\\n';\n    return code;\n};\n\nnetlogoGenerator['mouse_click'] = function (block) {\n    let statement_members = netlogoGenerator.INDENT + 'set mouse-up? false\\n' + netlogoGenerator.statementToCode(block, 'MOUSE');\n\n    let ifContents = 'if mouse-down? \\n[\\n' +\n        statement_members + ']';\n    ifContents = Blockly.JavaScript.prefixLines(ifContents, netlogoGenerator.INDENT);\n\n    let elseContents = '[\\n' + netlogoGenerator.INDENT + 'if not mouse-down?\\n' + netlogoGenerator.INDENT + '[\\n' + netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set mouse-up? true\\n' + netlogoGenerator.INDENT + ']\\n' + ']\\n'\n    elseContents = Blockly.JavaScript.prefixLines(elseContents, netlogoGenerator.INDENT);\n    let code = 'ifelse mouse-up? != false' + '\\n[\\n' + ifContents + '\\n]\\n';\n\n    code = Blockly.JavaScript.prefixLines(\n        code, netlogoGenerator.INDENT) + elseContents;\n\n    // return 'to mouse_click\\n' + code + 'end\\n';\n    return 'to mouse_click\\n' + code + 'end\\n';\n};\n\n// If/elseif/else condition\nnetlogoGenerator['controls_if'] = function (block) {\n    let n = 0;\n    let usedTouching;\n    let code = '', branchCode, conditionCode;\n\n    if (block.inputList.length === 2) {\n        code += 'if ';\n    }\n    else {\n        code += '(ifelse ';\n    }\n\n    do {\n        conditionCode = netlogoGenerator.valueToCode(block, 'IF' + n,\n            netlogoGenerator.ORDER_NONE) || 'false';\n        usedTouching = conditionCode.includes('(count collision-enemies > 0) and (collision-candidate != nobody) and (speed > 0 or [speed] of collision-candidate > 0)');\n        branchCode = usedTouching ? (netlogoGenerator.INDENT + 'set collision-flag 1\\n' + netlogoGenerator.statementToCode(block, 'DO' + n)) : (netlogoGenerator.INDENT + 'set collision-flag 0\\n') + netlogoGenerator.statementToCode(block, 'DO' + n);\n        if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n            branchCode = Blockly.JavaScript.prefixLines(\n                Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n                    block), netlogoGenerator.INDENT) + branchCode;\n        }\n        code += (n > 0 ? '\\n' : '') + conditionCode + '\\n[\\n' + branchCode + ']';\n        n++;\n    } while (block.getInput('IF' + n));\n\n    if (block.getInput('ELSE') || Blockly.JavaScript.STATEMENT_SUFFIX) {\n        branchCode = netlogoGenerator.statementToCode(block, 'ELSE');\n        if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n            branchCode = Blockly.JavaScript.prefixLines(\n                Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n                    block), netlogoGenerator.INDENT) + branchCode;\n        }\n        code += '\\n[\\n' + branchCode + ']';\n    }\n\n    (block.inputList.length === 2) ? code += '\\n' : code += ')\\n';\n    usedTouching ? code += 'set collision-flag 0\\n' : code +='';\n\n    return code;\n};\n\n// SMOKE PROPAGATION BLOCK DEFINITIONS\n// Properties\n// Create Particles w/ mutation\nnetlogoGenerator['create_particles'] = function (block) {\n    const root = block.getRootBlock().type;\n    const dataObj = JSON.parse(block.data);\n    const num = block.getFieldValue('PARTICLE_NUM');\n    const type = block.getFieldValue('TYPE')\n    const size = (type === \"SMOKE\" ? 2 : 1)\n    let parameters;\n    let prefix = \n    'set particle-type \"' + type.toLowerCase() + '\"\\n' +\n    'set energy (.5 * mass * speed * speed)\\n' + \n    'set mass 3\\n' + //setting mass be default, can change by adding block in params\n    'set size ' + size + '\\n' +\n    'set first-time 1\\n' +\n    'set last-collision nobody\\n' +\n    'set collision-flag 0\\n' +\n    'set collision-hatching 0\\n' +\n    ';; setting collision candidates in case particles created before interact in go\\n' +\n    'set collision-where patches in-radius (size / 2)\\n' +\n    'set collision-enemies other particles-on collision-where\\n' +\n    'if count collision-enemies > 0 ;; modified to be realistic, was = 1\\n' +\n    '[\\n' +\n    '  set collision-candidate one-of collision-enemies with [myself != last-collision]; and who < [who] of myself and ]\\n' +\n    ']\\n'\n    let suffix = ''\n    if (!dataObj.contextData.CHANGED){\n        parameters = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        for(let descendant of xmlblock.getDescendants()){\n            if(root === 'mouse_click' && descendant.type === 'set_position'){\n                descendant.dispose(true);\n            }\n        }\n        parameters = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    let code = 'create-particles ' + num + '\\n[\\n' + Blockly.JavaScript.prefixLines(prefix, netlogoGenerator.INDENT) + Blockly.JavaScript.prefixLines(parameters, netlogoGenerator.INDENT) + Blockly.JavaScript.prefixLines(suffix, netlogoGenerator.INDENT) + '\\n]\\n';\n    return code;\n};\n\n// Set Particle Speed\nnetlogoGenerator['set_speed'] = function (block) {\n    let speed = netlogoGenerator.SPEED[block.getField('SPEED').selectedOption_[1]];\n    let code = 'set random-wiggle 5\\nset speed ' + speed + '\\n';\n    return code;\n};\n\n// Set Particle Type\nnetlogoGenerator['set_type'] = function (block) {\n    let type = block.getField('TYPE').selectedOption_[0];\n    let code = 'set particle-type \"' + type + '\"\\n';\n    return code;\n};\n\n// Set Particle Mass\nnetlogoGenerator['set_mass'] = function (block) {\n    let mass = netlogoGenerator.MASS[block.getField('MASS').selectedOption_[1]];\n    let code = 'set mass ' + mass + '\\n' +\n        'set energy (.5 * mass * speed * speed)\\n';\n    return code;\n};\n\n// Set Particle Color\nnetlogoGenerator['set_color'] = function (block) {\n    let color = block.getField('COLOR').selectedOption_[0]\n    let code = 'set color ' + color + '\\n';\n    return code;\n};\n\n// Set Particle Size\nnetlogoGenerator['set_size'] = function (block) {\n    let size = block.getField('SIZE').value_;\n    let code = 'set size ' + size + '\\n';\n    return code;\n};\n\n// Set Particle Postion\nnetlogoGenerator['set_position'] = function (block) {\n    const position = netlogoGenerator.POSITION[block.getField('POSITION').selectedOption_[1]];\n    const field = block.getField('POSITION').selectedOption_[1];\n    let code = (field !== 'MOUSE') ? ('setxy ' + position + '\\n') : (position + '\\n');\n    return code;\n};\n\n// Set Particle Heading\nnetlogoGenerator['set_heading'] = function (block) {\n    let heading = netlogoGenerator.HEADING[block.getField('HEADING').selectedOption_[1]];\n    let code = 'set random-wiggle 40\\nset heading ' + heading + '\\n';\n    return code;\n};\n\n\n// Action\n// Move\nnetlogoGenerator['move'] = function (block) {\n    let block_direction = block.getField('DIRECTION').selectedOption_[1]\n    let block_magnitude = block.getField('MAGNITUDE').selectedOption_[1]\n    let direction = netlogoGenerator.DIRECTION[block_direction];\n    let magnitude = netlogoGenerator.MAGNITUDE[block_magnitude];\n    let code = 'set random-wiggle 2\\n'\n      + 'move ' + direction + ' ' + magnitude + '\\n';\n    if (block_magnitude === \"WIND\") {\n      code += 'if (speed > wind-speed) [set speed wind-speed]\\n'\n    }\n    if (block_direction === \"FORWARD\") {\n      code = code + 'particle-forward\\n'\n    }\n    return code;\n};\n\n// Apply wind\nnetlogoGenerator['blow'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\nnetlogoGenerator['move forward'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\n// Interact\nnetlogoGenerator['interact'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\n// Bounce Off\nnetlogoGenerator['bounce_off'] = function () {\n    let code = \n    'ifelse collision-flag = 1\\n[\\n' + \n    netlogoGenerator.INDENT + 'collide-with collision-candidate\\n'+\n    netlogoGenerator.INDENT +'set last-collision collision-candidate\\n'+\n    netlogoGenerator.INDENT + 'ask collision-candidate [ set last-collision myself ]\\n]\\n[\\n' +\n    netlogoGenerator.INDENT + 'if abs[pxcor] of patch-ahead 1 >= max-pxcor - 4\\n' +\n    netlogoGenerator.INDENT + '[ set heading (- heading) ]\\n' + \n    netlogoGenerator.INDENT + 'if abs [pycor] of patch-ahead 1 >= max-pycor - 4\\n' + \n    netlogoGenerator.INDENT + '[ set heading(180 - heading) ]\\n]\\n';\n    return code;\n};\n\n// Erase Particles\nnetlogoGenerator['erase'] = function () {\n    const code =\n        'ifelse collision-flag = 1\\n[\\n' +\n        netlogoGenerator.INDENT + 'set last-collision collision-candidate\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate [ set last-collision myself ]\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate [ die ]\\n' +\n        ']\\n' +\n        '[\\n' +\n        netlogoGenerator.INDENT + 'die' +\n        '\\n]\\n';\n    return code;\n};\n\n// Attach Particles\nnetlogoGenerator['attach'] = function () {\n    const code =\n        'ifelse collision-flag = 1 \\n[\\n' +\n        netlogoGenerator.INDENT + 'set last-collision collision-candidate\\n' +\n        netlogoGenerator.INDENT + 'let heading-candidate heading\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate\\n' + \n        netlogoGenerator.INDENT + '[\\n' +\n        netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set last-collision myself\\n' +\n        netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set heading heading-candidate\\n' + \n        netlogoGenerator.INDENT + ']\\n' +\n        ']\\n[\\n' +\n        netlogoGenerator.INDENT + 'set speed 0\\n' +\n        ']\\n';\n    return code;\n};\n\n// Control\n// Ask Particles\nnetlogoGenerator['ask_each_particle'] = function (block) {\n    const particleName = block.getField('TYPE').value_ || 'AIR';\n    const parameter = particleName === 'ALL' ? '' : ' with [particle-type = \"' + particleName.toLowerCase() + '\"]';\n    const statement_members = netlogoGenerator.statementToCode(block, 'ASK_EACH');\n    let code = 'ask particles' + parameter + '\\n' + '[\\n' + statement_members + ']\\n';\n    return code;\n};\n\n// Detect if touching\nnetlogoGenerator['touching_dropdown'] = function (block) {\n    const type = block.getFieldValue('TYPE');\n    let code;\n    let particleType;\n    if(type.includes('PARTICLE')){\n        if(type.includes('ANY')){\n            particleType = 'any';\n        }\n        else{\n            particleType = block.getField('TYPE').selectedOption_[0].replace(' particle', '');\n        }\n        const particleCondition = particleType != 'any' ? ' and ([particle-type] of collision-candidate = \"' + particleType + '\")' : ''\n        code = '(count collision-enemies > 0) and (collision-candidate != nobody) and (speed > 0 or [speed] of collision-candidate > 0)' + particleCondition\n    }\n    else{\n        code = 'abs [pxcor] of patch-ahead 1 >= max-pxcor - 4 or abs [pycor] of patch-ahead 1 >= max-pycor - 4'\n    }\n    return [code, netlogoGenerator.ORDER_NONE];\n};\n\nfunction getNLCodeFromUnpackBlocks(blockType, unpackBlocks, workspace) {\n  const tempBlock = workspace.newBlock(blockType);\n  tempBlock.appendStatementInput('EXPANDED_STATEMENT');\n  traverseBlocks(unpackBlocks, tempBlock.getInput('EXPANDED_STATEMENT').connection, workspace)\n  const code = netlogoGenerator.blockToCode(tempBlock.getInput('EXPANDED_STATEMENT').connection.targetBlock());\n  tempBlock.dispose()\n  return code\n}\n\nfunction traverseBlocks(blockData, parentBlockConnection, workspace) {\n      for (let blockGroup of blockData.reverse()) {\n        // instantiate block\n        const block = workspace.newBlock(blockGroup.blockType);\n        for (let field in blockGroup.fields) {\n            if (block.getField(field)) {\n                block.setFieldValue(blockGroup.fields[field], field)\n            }\n        }\n        // connect block to parent block\n        const blockPreviousConnection = block.previousConnection;\n        if (parentBlockConnection) {\n          parentBlockConnection.connect(blockPreviousConnection);\n        }\n        // add condition block if one exists\n        if (blockGroup.condition) {\n            const conditionBlock = workspace.newBlock(blockGroup.condition.blockType);\n            block.getInput(blockGroup.condition.input).connection.connect(conditionBlock.outputConnection);\n            if (blockGroup.condition.field) {\n                conditionBlock.setFieldValue(blockGroup.condition.field.value, blockGroup.condition.field.name);\n            }\n        }\n        // recursive step - traverse children and connect to parent.\n        // basecase when no children exist\n        if (blockGroup.children) {\n          traverseBlocks(blockGroup.children, block.inputList[1].connection, workspace)\n        }\n      }\n    }\n\n"],"sourceRoot":""}