{"version":3,"sources":["webpack:///./src/data/blockLibraries/testejs.js"],"names":["virus","getNLCodeFromUnpackBlocks","blockType","unpackBlocks","workspace","tempBlock","newBlock","appendStatementInput","traverseBlocks","getInput","connection","code","netlogoGenerator","blockToCode","targetBlock","dispose","blockData","parentBlockConnection","reverse","blockGroup","block","field","fields","getField","setFieldValue","blockPreviousConnection","previousConnection","connect","condition","conditionBlock","input","outputConnection","value","name","children","inputList","Blockly","Blocks","init","this","jsonInit","dataObj","SPEED","getFieldValue","data","JSON","stringify","onchange","parse","count","getChildren","child","getSurroundParent","contentXml","Xml","domToText","blockToDom","contextData","defineBlocksWithJsonArray","statement_members","statementToCode","INDENT","ifContents","JavaScript","prefixLines","elseContents","usedTouching","branchCode","conditionCode","n","length","valueToCode","ORDER_NONE","includes","STATEMENT_SUFFIX","injectId","parameters","root","getRootBlock","type","num","prefix","toLowerCase","suffix","CHANGED","xmlblock","domToBlock","textToDom","getDescendants","descendant","MASS","SIZE","POSITION","HEADING","speed","selectedOption_","mass","color","size","SIZE_VIRUS","position","heading","particleName","value_","parameter","particleType","particleCondition"],"mappings":"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","file":"testejs.bundle.js","sourcesContent":["import Blockly from 'blockly'\nimport { netlogoGenerator } from '@/blocklyHelpers/netlogoGenerator';\nexport let virus = {};\n\nvirus = {\n    \"categories\": [{\n        \"kind\": \"category\",\n        \"name\": \"Virus\",\n        \"expanded\": true,\n        \"contents\": [{\n            \"kind\": \"category\",\n            \"name\": \"Properties\",\n            \"toolboxitemid\": \"propertiesUnpackable\",\n            \"categorystyle\": \"particles_category\",\n            \"contents\": [{\n                \"kind\": \"block\",\n                \"type\": \"create_people\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_speed\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_type\"\n            },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"set_mass\"\n            // },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_color\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_size\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_position\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_heading\"\n            },\n            ]\n        },\n        {\n            \"kind\": \"category\",\n            \"name\": \"Action\",\n            \"toolboxitemid\": \"actionsUnpackable\",\n            \"categorystyle\": \"behavior_category\",\n            \"contents\": [\n            {\n                \"kind\": \"block\",\n                \"type\": \"move\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"interact\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"contaminate\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"get_infected\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"bounce_off\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"erase\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"attach\"\n            }\n            ]\n        },\n        {\n            \"kind\": \"category\",\n            \"name\": \"Control\",\n            \"colour\": \"#0089B8\",\n            \"contents\": [{\n                \"kind\": \"block\",\n                \"type\": \"ask_each_particle\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"is_infected\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"touching_dropdown\"\n            }\n        ]\n        }]\n    }]\n}\n\n// Create with Mutation\nBlockly.Blocks['create_people'] = {\n    init: function () {\n        this.jsonInit({\n            \"message0\": \"create  %1 %2 people %3\",\n            \"args0\": [\n                {\n                    \"type\": \"field_slider\",\n                    \"name\": \"PARTICLE_NUM\",\n                    \"value\": 10,\n                    \"min\": 10,\n                    \"max\": 200\n                },\n                {\n                    \"type\": \"field_dropdown\",\n                    \"name\": \"TYPE\",\n                    \"options\": [\n                        [\n                            \"healthy\",\n                            \"HEALTHY\"\n                        ],\n                        [\n                            \"sick\",\n                            \"SICK\"\n                        ],\n                        [\n                            \"vaccinated\",\n                            \"VACCINATED\"\n                        ]\n                    ]\n                },\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"style\": \"particle_blocks\",\n            \"mutator\": \"general_mutator\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                {\n                  blockType: 'set_speed',\n                  fields: {\n                    SPEED: 'MEDIUM',\n                  }\n                },\n                {\n                  blockType: 'set_position',\n                  fields: {\n                    'POSITION': 'RANDOM',\n                  }\n                },\n                {\n                  blockType: 'set_heading',\n                  fields: {\n                    'HEADING': 'RANDOM',\n                  }\n                },\n                // {\n                //   blockType: 'set_mass',\n                //   fields: {\n                //     'MASS': 'MEDIUM',\n                //   }\n                // },\n                {\n                  blockType: 'set_color',\n                  fields: {\n                    'COLOR': this.getFieldValue('TYPE') === 'HEALTHY' ? 'GREEN' : this.getFieldValue('TYPE') === 'SICK' ? 'RED' : 'BLUE',\n                  }\n                },\n                {\n                  blockType: 'set_size',\n                  fields: {\n                    'SIZE': 'MEDIUM',\n                  }\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n        \n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        // update connected blocks if visible\n        if(this.getInput('EXPANDED_STATEMENT')){\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                if (count === 0) {\n                    dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                else {\n                    dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                ++count;\n              }\n            }\n        }\n        if (!dataObj.contextData['CHANGED']) {\n          dataObj.unpackBlocks = [\n                {\n                  blockType: 'set_speed',\n                  fields: {\n                    SPEED: 'MEDIUM',\n                  }\n                },\n                {\n                  blockType: 'set_position',\n                  fields: {\n                    'POSITION': 'RANDOM',\n                  }\n                },\n                {\n                  blockType: 'set_heading',\n                  fields: {\n                    'HEADING': 'RANDOM',\n                  }\n                },\n                // {\n                //   blockType: 'set_mass',\n                //   fields: {\n                //     'MASS': 'MEDIUM',\n                //   }\n                // },\n                {\n                  blockType: 'set_color',\n                  fields: {\n                    'COLOR': this.getFieldValue('TYPE') === 'HEALTHY' ? 'GREEN' : this.getFieldValue('TYPE') === 'SICK' ? 'RED' : 'BLUE',\n                  }\n                },\n                {\n                  blockType: 'set_size',\n                  fields: {\n                    'SIZE': 'MEDIUM',\n                  }\n                },\n            ]\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\n// Collision with mutation\nBlockly.Blocks['interact'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"interact %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"behavior_border\"\n        });\n        let dataObj = {\n            'unpackBlocks': [\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: \n                    {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'WALL'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'bounce_off',\n                        fields: {}\n                      },\n                    ]\n                },\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'ANYONE'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'bounce_off',\n                        fields: {}\n                      }\n                    ]\n                },\n            ],\n            'contextData': {\n                'CHANGED': false\n            },\n            'contentXml': ''\n        };\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    onchange: function(){\n        if (this.getInput('EXPANDED_STATEMENT')) {\n            const dataObj = JSON.parse(this.data);\n            let count = 0;\n            for (let child of this.getChildren()){\n              if (child.getSurroundParent() === this) {\n                if(count === 0){\n                    dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                else{\n                    dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                ++count;\n              }\n            }\n            this.data = JSON.stringify(dataObj);\n        }\n    }\n};\n\n\nBlockly.Blocks['get_infected'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"get infected with a chance of %1 % %2\",\n            \"args0\": [\n                {\n                    \"type\": \"field_slider\",\n                    \"name\": \"PARTICLE_NUM\",\n                    \"value\": 50,\n                    \"min\": 0,\n                    \"max\": 100\n                },\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"behavior_border\"\n        });\n        let dataObj = {\n            'unpackBlocks': [\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'is_infected',\n                        field: {\n                            name: 'TYPE',\n                            value: 'SICK'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'set_type',\n                        fields: {\n                            name: 'TYPE',\n                            value: 'SICK'\n                        }\n                      },\n                      {\n                        blockType: 'set_color',\n                        fields: {\n                            name: 'COLOR',\n                            value: 'RED'\n                        }\n                      }\n                    ]\n                },\n            ],\n            'contextData': {\n                'CHANGED': false\n            },\n            'contentXml': ''\n        };\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    onchange: function(){\n        if (this.getInput('EXPANDED_STATEMENT')) {\n            const dataObj = JSON.parse(this.data);\n            let count = 0;\n            for (let child of this.getChildren()){\n              if (child.getSurroundParent() === this) {\n                if(count === 0){\n                    dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                else{\n                    dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                ++count;\n              }\n            }\n            this.data = JSON.stringify(dataObj);\n        }\n    }\n};\n\n// Collision with mutation\nBlockly.Blocks['contaminate'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"contaminate %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"behavior_border\"\n        });\n        let dataObj = {\n            'unpackBlocks': [\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'SICKPERSON'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'get_infected',\n                        fields: {}\n                      }\n                    ]\n                },\n                // {\n                //     blockType: 'controls_if',\n                //     fields: {},\n                //     condition: {\n                //         input: 'IF0',\n                //         blockType: 'touching_dropdown',\n                //         field: {\n                //             name: 'TYPE',\n                //             value: 'ANYONE'\n                //         }\n                //     },\n                //     children: [\n                //       {\n                //         blockType: 'bounce_off',\n                //         fields: {}\n                //       }\n                //     ]\n                // },\n            ],\n            'contextData': {\n                'CHANGED': false\n            },\n            'contentXml': ''\n        };\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    onchange: function(){\n        if (this.getInput('EXPANDED_STATEMENT')) {\n            const dataObj = JSON.parse(this.data);\n            let count = 0;\n            for (let child of this.getChildren()){\n              if (child.getSurroundParent() === this) {\n                if(count === 0){\n                    dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                else{\n                    dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                ++count;\n              }\n            }\n            this.data = JSON.stringify(dataObj);\n        }\n    }\n};\n\nBlockly.defineBlocksWithJsonArray([\n{\n    // Properties Blocks\n    // Create without Mutation\n    \"type\": \"create_particles1\",\n    \"message0\": \"create  %1 %2 particles %3\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"water\",\n                    \"WATER\"\n                ],\n                [\n                    \"ink\",\n                    \"INK\"\n                ]\n            ]\n        },\n        {\n            \"type\": \"field_slider\",\n            \"name\": \"PARTICLE_NUM\",\n            \"value\": 100,\n            \"min\": 0,\n            \"max\": 500\n        },\n        {\n            \"type\": \"input_dummy\",\n            \"name\": \"EMPTY\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_blocks\"\n},\n{\n    \"type\": \"set_speed\",\n    \"message0\": \"set speed %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"SPEED\",\n            \"options\": [\n                [\n                    \"zero\",\n                    \"ZERO\"\n                ],\n                [\n                    \"low\",\n                    \"LOW\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"high\",\n                    \"HIGH\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"set_type\",\n    \"message0\": \"set person condition to %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"sick\",\n                    \"SICK\"\n                ],\n                [\n                    \"healthy\",\n                    \"HEALTHY\"\n                ],\n                [\n                    \"vaccinated\",\n                    \"VACCINATED\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\":\"set_mass\",\n    \"message0\": \"set mass %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"MASS\",\n            \"options\": [\n                [\n                    \"light\",\n                    \"LIGHT\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"heavy\",\n                    \"HEAVY\"\n                ]\n            ]\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n    \"tooltip\": \"pick a value between 0 and 5\",\n},\n{\n    \"type\":\"set_color\",\n    \"message0\": \"set color %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"COLOR\",\n            \"options\": [\n                [\n                    \"red\",\n                    \"RED\"\n                ],\n                [\n                    \"orange\",\n                    \"ORANGE\"\n                ],\n                [\n                    \"yellow\",\n                    \"YELLOW\"\n                ],\n                [\n                    \"green\",\n                    \"GREEN\"\n                ],\n                [\n                    \"blue\",\n                    \"BLUE\"\n                ],\n                [\n                    \"cyan\",\n                    \"CYAN\"\n                ],\n                [\n                    \"violet\",\n                    \"VIOLET\"\n                ],\n                [\n                    \"gray\",\n                    \"GRAY\"\n                ],\n                [\n                    \"black\",\n                    \"BLACK\"\n                ],\n                [\n                    \"brown\",\n                    \"BROWN\"\n                ]\n            ]\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"set_size\",\n    \"message0\": \"set size %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"SIZE\",\n            \"options\": [\n                [\n                    \"small\",\n                    \"SMALL\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"big\",\n                    \"BIG\"\n                ]\n            ]\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"set_position\",\n    \"message0\": \"set position %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"POSITION\",\n            \"options\": [\n                [\n                    \"random\",\n                    \"RANDOM\"\n                ],\n                [\n                    \"center\",\n                    \"CENTER\"\n                ],\n                [\n                    \"vertical line\",\n                    \"VERTICAL\"\n                ],\n                [\n                    \"horizontal line\",\n                    \"HORIZONTAL\"\n                ],\n                [\n                    \"mouse position\",\n                    \"MOUSE\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"set_heading\",\n    \"message0\": \"set heading %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"HEADING\",\n            \"options\": [\n                [\n                    \"random\",\n                    \"RANDOM\"\n                ],\n                [\n                    \"up\",\n                    \"UP\"\n                ],\n                [\n                    \"right\",\n                    \"RIGHT\"\n                ],\n                [\n                    \"down\",\n                    \"DOWN\"\n                ],\n                [\n                    \"left\",\n                    \"LEFT\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n// Action Blocks\n{\n    \"type\": \"move\",\n    \"message0\": \"move\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n{\n    // Collision without Mutation\n    \"type\": \"collision1\",\n    \"message0\": \"interact %1\",\n    \"args0\": [\n        {\n            \"type\": \"input_dummy\",\n            \"name\": \"EMPTY\"\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n{\n    \"type\": \"bounce_off\",\n    \"message0\": \"bounce off\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_blocks\"\n},\n{\n    \"type\": \"erase\",\n    \"message0\": \"erase people\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_blocks\"\n},\n{\n    \"type\": \"attach\",\n    \"message0\": \"attach people\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_blocks\"\n},\n// Control Blocks\n{\n    \"type\": \"ask_each_particle\",\n    \"message0\": \"ask %1 people %2 %3\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"healthy\",\n                    \"HEALTHY\"\n                ],\n                [\n                    \"sick\",\n                    \"SICK\"\n                ],\n                [\n                    \"vaccinated\",\n                    \"VACCINATED\"\n                ],\n                [\n                    \"all\",\n                    \"ALL\"\n                ]\n            ]\n        },\n        {\n            \"type\": \"input_dummy\"\n        },\n        {\n            \"type\": \"input_statement\",\n            \"name\": \"ASK_EACH\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"control_blocks\"\n},\n{\n    \"type\": \"temperature\",\n    \"message0\": \"temperature is %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TEMP\",\n            \"options\": [\n                [\n                    \"high\",\n                    \"HIGH\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"low\",\n                    \"LOW\"\n                ],\n                [\n                    \"zero\",\n                    \"ZERO\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"control_blocks\",\n},\n{\n    \"type\": \"touching_dropdown\",\n    \"message0\": \"touching %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"anyone\",\n                    \"ANYONE\"\n                ],\n                [\n                    \"healthy person\",\n                    \"HEALTHYPERSON\"\n                ],\n                [\n                    \"sick person\",\n                    \"SICKPERSON\"\n                ],\n                [\n                    \"vaccinated person\",\n                    \"VACCINATEDPERSON\"\n                ],\n                [\n                    \"wall\",\n                    \"WALL\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"control_blocks\",\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n},\n{\n    \"type\": \"is_infected\",\n    \"message0\": \"person is %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"infected\",\n                    \"INFECTED\"\n                ],\n                [\n                    \"not infected\",\n                    \"NOTINFECTED\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"control_blocks\",\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n}\n]);\n\n// GEN BLOCKS\n// Setup blocks\nnetlogoGenerator['set'] = function (block) {\n    const statement_members = netlogoGenerator.statementToCode(block, 'SET');\n    const code = 'to blocks-set\\n' +\n        netlogoGenerator.INDENT + 'setup\\n' +\n        statement_members +\n        netlogoGenerator.INDENT + 'reset-ticks\\n' +\n        'end\\n';\n    return code;\n};\n\nnetlogoGenerator['go'] = function (block) {\n    const statement_members = netlogoGenerator.statementToCode(block, 'GO');\n    const code = 'to blocks-go\\n' +\n        netlogoGenerator.INDENT + 'mouse_click\\n' +\n        netlogoGenerator.INDENT + 'go\\n' +\n        statement_members +\n        netlogoGenerator.INDENT + 'tick-advance tick-delta\\n' +\n        netlogoGenerator.INDENT + 'display\\n' +\n        'end\\n';\n    return code;\n};\n\nnetlogoGenerator['mouse_click'] = function (block) {\n    let statement_members = netlogoGenerator.INDENT + 'set mouse-up? false\\n' + netlogoGenerator.statementToCode(block, 'MOUSE');\n\n    let ifContents = 'if mouse-down? \\n[\\n' +\n        statement_members + ']';\n    ifContents = Blockly.JavaScript.prefixLines(ifContents, netlogoGenerator.INDENT);\n\n    let elseContents = '[\\n' + netlogoGenerator.INDENT + 'if not mouse-down?\\n' + netlogoGenerator.INDENT + '[\\n' + netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set mouse-up? true\\n' + netlogoGenerator.INDENT + ']\\n' + ']\\n'\n    elseContents = Blockly.JavaScript.prefixLines(elseContents, netlogoGenerator.INDENT);\n    let code = 'ifelse mouse-up? != false' + '\\n[\\n' + ifContents + '\\n]\\n';\n\n    code = Blockly.JavaScript.prefixLines(\n        code, netlogoGenerator.INDENT) + elseContents;\n\n    return 'to mouse_click\\n' + code + 'end\\n';\n};\n\n// If/elseif/else condition\nnetlogoGenerator['controls_if'] = function (block) {\n    let n = 0;\n    let usedTouching;\n    let code = '', branchCode, conditionCode;\n\n    if (block.inputList.length === 2) {\n        code += 'if ';\n    }\n    else {\n        code += '(ifelse ';\n    }\n\n    do {\n        conditionCode = netlogoGenerator.valueToCode(block, 'IF' + n,\n            netlogoGenerator.ORDER_NONE) || 'false';\n        usedTouching = conditionCode.includes('(count collision-enemies > 0) and (collision-candidate != nobody)');\n        branchCode = usedTouching ? (netlogoGenerator.INDENT + 'set collision-flag 1\\n' + netlogoGenerator.statementToCode(block, 'DO' + n)) : (netlogoGenerator.INDENT + 'set collision-flag 0\\n') + netlogoGenerator.statementToCode(block, 'DO' + n);\n        if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n            branchCode = Blockly.JavaScript.prefixLines(\n                Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n                    block), netlogoGenerator.INDENT) + branchCode;\n        }\n        code += (n > 0 ? '\\n' : '') + conditionCode + '\\n[\\n' + branchCode + ']';\n        n++;\n    } while (block.getInput('IF' + n));\n\n    if (block.getInput('ELSE') || Blockly.JavaScript.STATEMENT_SUFFIX) {\n        branchCode = netlogoGenerator.statementToCode(block, 'ELSE');\n        if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n            branchCode = Blockly.JavaScript.prefixLines(\n                Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n                    block), netlogoGenerator.INDENT) + branchCode;\n        }\n        code += '\\n[\\n' + branchCode + ']';\n    }\n\n    (block.inputList.length === 2) ? code += '\\n' : code += ')\\n';\n    usedTouching ? code += 'set collision-flag 0\\n' : code +='';\n\n    return code;\n};\n\n\n// DIFFUSION BLOCK DEFINITIONS\n\n// Properties Blocks\n// Create Particles w/ mutation\nnetlogoGenerator['create_people'] = function (block) {\n    const root = block.getRootBlock().type;\n    const dataObj = JSON.parse(block.data);\n    const num = block.getFieldValue('PARTICLE_NUM');\n    const type = block.getFieldValue('TYPE')\n    let parameters;\n    let prefix = \n    'set person-condition \"' + type.toLowerCase() + '\"\\n' +\n    'set first-time 1\\n' +\n    'color-condition\\n' +\n    'set shape \"person\"\\n' +\n    'set sick-time 0\\n' +\n    'set last-collision nobody\\n' +\n    'set collision-flag 0\\n' +\n    'set collision-hatching 0\\n';\n    let suffix =\n    'set mass 1\\n' +\n    'if mouse-down? \\n[\\n' +\n    netlogoGenerator.INDENT + 'drop-with-mouse ' + num + '\\n' +\n    ']';\n    if (!dataObj.contextData.CHANGED){\n        parameters = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        for(let descendant of xmlblock.getDescendants()){\n            if(root === 'mouse_click' && descendant.type === 'set_position'){\n                descendant.dispose(true);\n            }\n        }\n        parameters = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    let code = 'create-people ' + num + '\\n[\\n' + Blockly.JavaScript.prefixLines(prefix, netlogoGenerator.INDENT) + Blockly.JavaScript.prefixLines(parameters, netlogoGenerator.INDENT) + Blockly.JavaScript.prefixLines(suffix, netlogoGenerator.INDENT) + '\\n]\\n';\n    return code;\n};\n\n// Create Particles no mutation\nnetlogoGenerator['create_particles1'] = function (block) {\n    const num = block.getFieldValue('PARTICLE_NUM');\n    const parameters =\n        'set particle-type \"' + block.getFieldValue('TYPE').toLowerCase() + '\" \\n' +\n        'set speed ' + netlogoGenerator.SPEED['MEDIUM'] + '\\n' +\n        'set mass ' + netlogoGenerator.MASS['MEDIUM'] + '\\n' +\n        'set energy (.5 * mass * speed * speed)\\n' +\n        'set first-time 1\\n' +\n        'set last-collision nobody\\n' +\n        'set collision-flag 0 \\n' +\n        'set collision-hatching 0\\n' +\n        'set color ' + (block.getFieldValue('TYPE') === 'WATER' ? 'cyan' : 'red') + '\\n' +\n        'set size ' + netlogoGenerator.SIZE['MEDIUM'] + '\\n' +\n        'setxy ' + netlogoGenerator.POSITION['RANDOM'] + '\\n' +\n        'set random-wiggle 40\\n' +\n        'set heading ' + netlogoGenerator.HEADING['RANDOM'] + '\\n' +\n        'if mouse-down? \\n[\\n' +\n        netlogoGenerator.INDENT + 'drop-with-mouse ' + num + '\\n' +\n        ']';\n    const code = 'create-particles ' + num + '\\n[\\n' + Blockly.JavaScript.prefixLines(parameters, netlogoGenerator.INDENT) + '\\n]\\n';\n    return code;\n};\n\n// Set Particle Speed\nnetlogoGenerator['set_speed'] = function (block) {\n    let speed = netlogoGenerator.SPEED[block.getField('SPEED').selectedOption_[1]];\n    let code = 'set random-wiggle 5\\nset speed ' + speed + '\\n';\n    return code;\n};\n\n// Set Particle Type\nnetlogoGenerator['set_type'] = function (block) {\n    let type = block.getField('TYPE').selectedOption_[0];\n    let code = 'set particle-type \"' + type + '\"\\n';\n    return code;\n};\n\n// Set Particle Mass\nnetlogoGenerator['set_mass'] = function (block) {\n    let mass = netlogoGenerator.MASS[block.getField('MASS').selectedOption_[1]];\n    let code = 'set mass ' + mass + '\\n' +\n        'set energy (.5 * mass * speed * speed)\\n';\n    return code;\n};\n\n// Set Particle Color\nnetlogoGenerator['set_color'] = function (block) {\n    let color = block.getField('COLOR').selectedOption_[0]\n    let code = 'set color ' + color + '\\n';\n    return code;\n};\n\n// Set Particle Size\nnetlogoGenerator['set_size'] = function (block) {\n    let size = netlogoGenerator.SIZE_VIRUS[block.getField('SIZE').selectedOption_[1]];\n    let code = 'set size ' + size + '\\n';\n    return code;\n};\n\n// Set Particle Postion\nnetlogoGenerator['set_position'] = function (block) {\n    const position = netlogoGenerator.POSITION[block.getField('POSITION').selectedOption_[1]];\n    const field = block.getField('POSITION').selectedOption_[1];\n    let code = (field !== 'MOUSE') ? ('setxy ' + position + '\\n') : (position + '\\n');\n    return code;\n};\n\n// Set Particle Heading\nnetlogoGenerator['set_heading'] = function (block) {\n    let heading = netlogoGenerator.HEADING[block.getField('HEADING').selectedOption_[1]];\n    let code = 'set random-wiggle 40\\nset heading ' + heading + '\\n';\n    return code;\n};\n\n\n\n\n// Action Blocks\n// Move\nnetlogoGenerator['move'] = function () {\n    const code = 'person-forward\\n';\n    return code;\n};\n\n// Collide with Mutation\nnetlogoGenerator['interact'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\nnetlogoGenerator['get_infected'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code + ';teste 123 testando \\n';\n};\n\n\n// Collide with Mutation\nnetlogoGenerator['contaminate'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\n\n// Collide w/o Mutation\nnetlogoGenerator['collision1'] = function () {\n    const code =\n        'bounce-wall\\n' +\n        'check-for-collision\\n';\n    return code;\n};\n\n// Bounce Off\nnetlogoGenerator['bounce_off'] = function () {\n    let code = \n    'ifelse collision-flag = 1\\n[\\n' + \n    netlogoGenerator.INDENT + 'collide-with collision-candidate\\n'+\n    netlogoGenerator.INDENT +'set last-collision collision-candidate\\n'+\n    netlogoGenerator.INDENT + 'ask collision-candidate [ set last-collision myself ]\\n]\\n[\\n' +\n    netlogoGenerator.INDENT + 'if abs[pxcor] of patch-ahead 1 >= max-pxcor - 4\\n' +\n    netlogoGenerator.INDENT + '[ set heading (- heading) ]\\n' + \n    netlogoGenerator.INDENT + 'if abs [pycor] of patch-ahead 1 >= max-pycor - 4\\n' + \n    netlogoGenerator.INDENT + '[ set heading(180 - heading) ]\\n]\\n';\n    return code;\n};\n\n// Erase Particles\nnetlogoGenerator['erase'] = function () {\n    const code =\n        'ifelse collision-flag = 1\\n[\\n' +\n        netlogoGenerator.INDENT + 'set last-collision collision-candidate\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate [ set last-collision myself ]\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate [ die ]\\n' +\n        ']\\n' +\n        '[\\n' +\n        netlogoGenerator.INDENT + 'die' +\n        '\\n]\\n';\n    return code;\n};\n\n// Attach Particles\nnetlogoGenerator['attach'] = function () {\n    const code =\n        'ifelse collision-flag = 1 \\n[\\n' +\n        netlogoGenerator.INDENT + 'set last-collision collision-candidate\\n' +\n        netlogoGenerator.INDENT + 'let heading-candidate heading\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate\\n' + \n        netlogoGenerator.INDENT + '[\\n' +\n        netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set last-collision myself\\n' +\n        netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set heading heading-candidate\\n' + \n        netlogoGenerator.INDENT + ']\\n' +\n        ']\\n[\\n' +\n        netlogoGenerator.INDENT + 'set speed 0\\n' +\n        ']\\n';\n    return code;\n};\n\n\n// Control Blocks\n// Ask Particles\nnetlogoGenerator['ask_each_particle'] = function (block) {\n    const particleName = block.getField('TYPE').value_ || 'HEALTHY';\n    const parameter = particleName === 'ALL' ? '' : ' with [person-condition = \"' + particleName.toLowerCase() + '\"]';\n    const statement_members = netlogoGenerator.statementToCode(block, 'ASK_EACH');\n    let code = 'ask people' + parameter + '\\n' + '[\\n' + statement_members + ']\\n';\n    return code;\n};\n\n// Check Environment Temperature\nnetlogoGenerator['temperature'] = function (block) {\n    switch (block.getFieldValue('TEMP')) {\n        case 'HIGH':\n            return ['temperature > 35', netlogoGenerator.ORDER_NONE];\n        case 'MEDIUM':\n            return ['temperature < 36 and temperature > 14', netlogoGenerator.ORDER_NONE];\n        case 'LOW':\n            return ['temperature < 15 and temperature > 0', netlogoGenerator.ORDER_NONE];\n        case 'ZERO':\n            return ['temperature = 0', netlogoGenerator.ORDER_NONE];\n    }\n};\n\n// Detect if touching\nnetlogoGenerator['touching_dropdown'] = function (block) {\n    const type = block.getFieldValue('TYPE');\n    let code;\n    let particleType;\n    if(type.includes('HEALTHY') || type.includes('SICK') || type.includes('ANY') || type.includes('RECOVERED') || type.includes('VACCINATED')){\n        if(type.includes('ANYONE')){\n            particleType = 'any';\n        }\n        if(type.includes('HEALTHYPERSON')){\n            particleType = 'healthy';\n        }\n        if(type.includes('SICKPERSON')){\n            particleType = 'sick';\n        }\n        if(type.includes('VACCINATEDPERSON')){\n            particleType = 'vaccinated';\n        }\n        if(type.includes('RECOVEREDPERSON')){\n            particleType = 'recovered';\n        }\n        const particleCondition = particleType != 'any' ? ' and ([person-condition] of collision-candidate = \"' + particleType + '\")' : ''\n        code = '(count collision-enemies > 0) and (collision-candidate != nobody)' + particleCondition\n    }\n    else{\n        code = 'abs [pxcor] of patch-ahead 1 >= max-pxcor - 4 or abs [pycor] of patch-ahead 1 >= max-pycor - 4'\n    }\n    return [code, netlogoGenerator.ORDER_NONE];\n};\n\nnetlogoGenerator['is_infected'] = function (block) {\n    const type = block.getFieldValue('TYPE');\n    let code;\n    let particleType;\n    if(type.includes('HEALTHY') || type.includes('SICK') || type.includes('ANY') || type.includes('RECOVERED') || type.includes('VACCINATED')){\n        if(type.includes('ANYONE')){\n            particleType = 'any';\n        }\n        if(type.includes('HEALTHYPERSON')){\n            particleType = 'healthy';\n        }\n        if(type.includes('SICKPERSON')){\n            particleType = 'sick';\n        }\n        if(type.includes('VACCINATEDPERSON')){\n            particleType = 'vaccinated';\n        }\n        if(type.includes('RECOVEREDPERSON')){\n            particleType = 'recovered';\n        }\n        const particleCondition = particleType != 'any' ? ' and ([person-condition] of collision-candidate = \"' + particleType + '\")' : ''\n        code = '(count collision-enemies > 0) and (collision-candidate != nobody)' + particleCondition\n    }\n    else{\n        code = 'abs [pxcor] of patch-ahead 1 >= max-pxcor - 4 or abs [pycor] of patch-ahead 1 >= max-pycor - 4'\n    }\n    return [code, netlogoGenerator.ORDER_NONE];\n};\n\nfunction getNLCodeFromUnpackBlocks(blockType, unpackBlocks, workspace) {\n  const tempBlock = workspace.newBlock(blockType);\n  tempBlock.appendStatementInput('EXPANDED_STATEMENT');\n  traverseBlocks(unpackBlocks, tempBlock.getInput('EXPANDED_STATEMENT').connection, workspace)\n  const code = netlogoGenerator.blockToCode(tempBlock.getInput('EXPANDED_STATEMENT').connection.targetBlock());\n  tempBlock.dispose()\n  return code\n}\n\nfunction traverseBlocks(blockData, parentBlockConnection, workspace) {\n      for (let blockGroup of blockData.reverse()) {\n        // instantiate block\n        const block = workspace.newBlock(blockGroup.blockType);\n        for (let field in blockGroup.fields) {\n            if (block.getField(field)) {\n                block.setFieldValue(blockGroup.fields[field], field)\n            }\n        }\n        // connect block to parent block\n        const blockPreviousConnection = block.previousConnection;\n        if (parentBlockConnection) {\n          parentBlockConnection.connect(blockPreviousConnection);\n        }\n        // add condition block if one exists\n        if (blockGroup.condition) {\n            const conditionBlock = workspace.newBlock(blockGroup.condition.blockType);\n            block.getInput(blockGroup.condition.input).connection.connect(conditionBlock.outputConnection);\n            if (blockGroup.condition.field) {\n                conditionBlock.setFieldValue(blockGroup.condition.field.value, blockGroup.condition.field.name);\n            }\n        }\n        // recursive step - traverse children and connect to parent.\n        // basecase when no children exist\n        if (blockGroup.children) {\n          traverseBlocks(blockGroup.children, block.inputList[1].connection, workspace)\n        }\n      }\n    }\n\n"],"sourceRoot":""}