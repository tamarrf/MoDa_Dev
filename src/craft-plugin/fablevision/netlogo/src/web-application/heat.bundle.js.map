{"version":3,"sources":["webpack:///./src/data/blockLibraries/heat.js"],"names":["heat","getNLCodeFromUnpackBlocks","blockType","unpackBlocks","workspace","tempBlock","newBlock","appendStatementInput","traverseBlocks","getInput","connection","code","netlogoGenerator","blockToCode","targetBlock","dispose","blockData","parentBlockConnection","reverse","blockGroup","block","field","fields","getField","setFieldValue","blockPreviousConnection","previousConnection","connect","condition","conditionBlock","input","outputConnection","value","name","children","inputList","Blockly","Blocks","init","this","jsonInit","dataObj","getFieldValue","data","JSON","stringify","onchange","parse","count","getChildren","child","getSurroundParent","contentXml","Xml","domToText","blockToDom","contextData","DIRECTION","MAGNITUDE","defineBlocksWithJsonArray","statement_members","statementToCode","INDENT","ifContents","JavaScript","prefixLines","elseContents","usedTouching","branchCode","conditionCode","n","length","valueToCode","ORDER_NONE","includes","STATEMENT_SUFFIX","injectId","parameters","root","getRootBlock","type","size","prefix","toLowerCase","suffix","CHANGED","xmlblock","domToBlock","textToDom","getDescendants","descendant","num","speed","SPEED","selectedOption_","arrangerment","ARRANGEMENT","color","linked","HEATSIZE","position","POSITION","heading","HEADING","block_direction","block_magnitude","direction","magnitude","particleName","value_","parameter","particleType"],"mappings":"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","file":"heat.bundle.js","sourcesContent":["import Blockly from 'blockly'\nimport { netlogoGenerator } from '@/blocklyHelpers/netlogoGenerator';\nexport let heat = {};\n\nheat = {\n  \"categories\": [\n    {\n      \"kind\": \"category\",\n      \"name\": \"Heat\",\n      \"expanded\": true,\n      \"contents\": [\n        {\n          \"kind\": \"category\",\n          \"name\": \"Properties\",\n          \"toolboxitemid\": \"propertiesUnpackable\",\n          \"categorystyle\": \"smoke_properties_category\",\n          \"contents\": [\n            {\n              \"kind\": \"block\",\n              \"type\": \"create_particles\"\n            },\n            // {\n            //   \"kind\": \"block\",\n            //   \"type\": \"create_electrons_old\"\n            // },\n            {\n               \"kind\": \"block\",\n               \"type\": \"create_electrons\"\n            },\n            // {\n            //   \"kind\": \"block\",\n            //   \"type\": \"set_speed\"\n            // },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_type\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_links\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_size\"\n            },\n            {\n               \"kind\": \"block\",\n              \"type\": \"set_arrangement\"\n              },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_color\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_position\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"set_heading\"\n            },\n          ]\n        },\n        {\n          \"kind\": \"category\",\n          \"name\": \"Action\",\n          \"categorystyle\": \"smoke_action_category\",\n          \"expanded\": true,\n          \"contents\": [\n            // {\n            //   \"kind\": \"block\",\n            //   \"type\": \"move forward\"\n            // },\n            // {\n            //   \"kind\": \"block\",\n            //   \"type\": \"blow\"\n            // },\n            {\n              \"kind\": \"block\",\n              \"type\": \"interact\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"transfer_energy\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"vibrate\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"wiggle\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"travel\"\n            },\n            {\n            \"kind\": \"block\",\n            \"type\": \"transfer_heat\"\n            },\n            // {\n            //   \"kind\": \"block\",\n            //   \"type\": \"move\"\n            // },\n            {\n              \"kind\": \"block\",\n              \"type\": \"bounce_off\"\n            },\n            {\n              \"kind\": \"block\",\n              \"type\": \"attach\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"erase\"\n              }\n          ]\n        },\n        {\n          \"kind\": \"category\",\n          \"name\": \"Control\",\n          \"categorystyle\": \"smoke_control_category\",\n          \"expanded\": true,\n          \"contents\": [\n            {\n                \"kind\": \"block\",\n                \"type\": \"ask_each_particle\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"touching_dropdown\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"is_linked\"\n            },\n          ]\n        }\n      ]\n    }\n  ]\n}\n\nBlockly.Blocks['create_particles'] = {\n    init: function () {\n        this.jsonInit({\n            \"message0\": \"create  %1 particles %2\",\n            \"args0\": [\n                // {\n                //     \"type\": \"field_slider\",\n                //     \"name\": \"PARTICLE_NUM\",\n                //     \"value\": 1000,\n                //     \"min\": 0,\n                //     \"max\": 2000\n                // },\n                {\n                    \"type\": \"field_dropdown\",\n                    \"name\": \"TYPE\",\n                    \"options\": [\n                        [\n                            \"copper\",\n                            \"COPPER\"\n                        ],\n                        [\n                            \"wood\",\n                            \"WOOD\"\n                        ]\n                    ]\n                },\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"style\": \"smoke_behavior_blocks\",\n            \"mutator\": \"general_mutator\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                // {\n                //   blockType: 'set_speed',\n                //   fields: {\n                //     SPEED: 'VERY_LOW',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_position',\n                //   fields: {\n                //     'POSITION': this.getFieldValue('TYPE') === 'SMOKE' ? 'CENTER' : 'RANDOM',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_heading',\n                //   fields: {\n                //     'HEADING': 'RANDOM',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_mass',\n                //   fields: {\n                //     'MASS': 'UNIFORM',\n                //   }\n                // },\n                 {\n                  blockType: 'set_arrangement',\n                  fields: {\n                    'ARRANGEMENT': this.getFieldValue('TYPE') === 'COPPER' ? 'UNIFORM' : 'MESSY',\n                  }\n                },\n                // {\n                //   blockType: 'set_color',\n                //   fields: {\n                //     'COLOR': this.getFieldValue('TYPE') === 'COPPER' ? 'WHITE' : 'WHITE',\n                //   }\n                // },\n                {\n                    blockType: 'set_links',\n                    fields: {\n                      'LINKS': 'ON',\n                    }\n                  },\n                {\n                  blockType: 'set_size',\n                  fields: {\n                    'SIZE': 'MEDIUM',\n                  }\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        if(this.getInput('EXPANDED_STATEMENT')){\n            // add blocks to XML\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n        }\n        // update fields to match type if type is the thing that changed\n        if (!dataObj.contextData['CHANGED']) {\n            dataObj.unpackBlocks = [\n                // {\n                //   blockType: 'set_speed',\n                //   fields: {\n                //     SPEED: 'VERY_LOW',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_position',\n                //   fields: {\n                //     'TRAVELPOSITION': this.getFieldValue('TYPE') === 'SMOKE' ? 'CENTER' : 'RANDOM',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_heading',\n                //   fields: {\n                //     'HEADING': 'RANDOM',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_mass',\n                //   fields: {\n                //     'MASS': 'UNIFORM',\n                //   }\n                // },\n                 {\n                  blockType: 'set_arrangement',\n                  fields: {\n                    'ARRANGEMENT': this.getFieldValue('TYPE') === 'COPPER' ? 'UNIFORM' : 'MESSY',\n                  }\n                },\n                // {\n                //   blockType: 'set_color',\n                //   fields: {\n                //     'COLOR': this.getFieldValue('TYPE') === 'COPPER' ? 'WHITE' : 'WHITE',\n                //   }\n                // },\n                {\n                    blockType: 'set_links',\n                    fields: {\n                      'LINKS': 'ON',\n                    }\n                  },\n                    {\n                  blockType: 'set_size',\n                  fields: {\n                    'SIZE': 'MEDIUM',\n                  }\n                },\n            ]\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\n\n\nBlockly.Blocks['create_electrons'] = {\n    init: function () {\n        this.jsonInit({\n            \"message0\": \"create  %1 electrons %2\",\n            \"args0\": [\n                {\n                    \"type\": \"field_slider\",\n                    \"name\": \"PARTICLE_NUM\",\n                    \"value\": 50,\n                    \"min\": 1,\n                    \"max\": 100\n                },\n                // {\n                //     \"type\": \"field_dropdown\",\n                //     \"name\": \"TYPE\",\n                //     \"options\": [\n                //         [\n                //             \"copper\",\n                //             \"COPPER\"\n                //         ],\n                //         [\n                //             \"wood\",\n                //             \"WOOD\"\n                //         ]\n                //     ]\n                // },\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"style\": \"smoke_behavior_blocks\",\n            \"mutator\": \"general_mutator\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                // {\n                //   blockType: 'set_speed',\n                //   fields: {\n                //     SPEED: 'VERY_LOW',\n                //   }\n                // },\n                {\n                  blockType: 'set_position',\n                  fields: {\n                    'POSITION': 'RANDOM_HEAT',\n                  }\n                },\n                {\n                  blockType: 'set_heading',\n                  fields: {\n                    'HEADING': 'RANDOM',\n                  }\n                },\n                // {\n                //   blockType: 'set_mass',\n                //   fields: {\n                //     'MASS': 'UNIFORM',\n                //   }\n                // },\n                //  {\n                //   blockType: 'set_arrangement',\n                //   fields: {\n                //     'ARRANGEMENT': this.getFieldValue('TYPE') === 'COPPER' ? 'UNIFORM' : 'MESSY',\n                //   }\n                // },\n                {\n                  blockType: 'set_color',\n                  fields: {\n                    'COLOR': 'YELLOW',\n                  }\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        if(this.getInput('EXPANDED_STATEMENT')){\n            // add blocks to XML\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n        }\n        // update fields to match type if type is the thing that changed\n        if (!dataObj.contextData['CHANGED']) {\n            dataObj.unpackBlocks = [\n                  // {\n                //   blockType: 'set_speed',\n                //   fields: {\n                //     SPEED: 'VERY_LOW',\n                //   }\n                // },\n                {\n                  blockType: 'set_position',\n                  fields: {\n                    'POSITION': 'RANDOM_HEAT',\n                  }\n                },\n                {\n                  blockType: 'set_heading',\n                  fields: {\n                    'HEADING': 'RANDOM',\n                  }\n                },\n                // {\n                //   blockType: 'set_mass',\n                //   fields: {\n                //     'MASS': 'UNIFORM',\n                //   }\n                // },\n                //  {\n                //   blockType: 'set_arrangement',\n                //   fields: {\n                //     'ARRANGEMENT': this.getFieldValue('TYPE') === 'COPPER' ? 'UNIFORM' : 'MESSY',\n                //   }\n                // },\n                {\n                  blockType: 'set_color',\n                  fields: {\n                    'COLOR': 'YELLOW',\n                  }\n                },\n            ]\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\n// Collision with mutation\nBlockly.Blocks['interact'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"interact %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"smoke_action_blocks\"\n        });\n        let dataObj = {\n            'unpackBlocks': [\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'WALL'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'bounce_off',\n                        fields: {}\n                      }\n                    ]\n                },\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'ANYPARTICLE'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'bounce_off',\n                        fields: {}\n                      }\n                    ]\n                },\n            ],\n            'contextData': {\n                'CHANGED': false\n            },\n            'contentXml': ''\n        };\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    onchange: function(){\n        if (this.getInput('EXPANDED_STATEMENT')) {\n            const dataObj = JSON.parse(this.data);\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n            this.data = JSON.stringify(dataObj);\n        }\n    }\n};\n\n// Collision with mutation\nBlockly.Blocks['transfer_energy'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"transfer energy %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"smoke_action_blocks\"\n        });\n        let dataObj = {\n            'unpackBlocks': [\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'ANYPARTICLE'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'transfer_heat',\n                        fields: {}\n                      }\n                    ]\n                },\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'is_linked',\n                    },\n                    children: [\n                      {\n                        blockType: 'transfer_heat',\n                        fields: {}\n                      }\n                    ]\n                }\n            ],\n            'contextData': {\n                'CHANGED': false\n            },\n            'contentXml': ''\n        };\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    onchange: function(){\n        if (this.getInput('EXPANDED_STATEMENT')) {\n            const dataObj = JSON.parse(this.data);\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n            this.data = JSON.stringify(dataObj);\n        }\n    }\n};\n\nBlockly.Blocks['vibrate'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"vibrate %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"smoke_action_blocks\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                {\n                  blockType: 'wiggle',\n                },\n                {\n                  blockType: 'transfer_energy',\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        // update connected blocks if visible\n        if(this.getInput('EXPANDED_STATEMENT')){\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\n// move block\nBlockly.Blocks['move forward'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"move %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"smoke_action_blocks\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                {\n                  blockType: 'move',\n                  fields: {\n                    DIRECTION: 'upward',\n                    MAGNITUDE: 'SAME'\n                  }\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        // update connected blocks if visible\n        if(this.getInput('EXPANDED_STATEMENT')){\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\n// wind block\nBlockly.Blocks['blow'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"blow %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"smoke_action_blocks\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                {\n                  blockType: 'move',\n                  fields: {\n                    DIRECTION: 'WIND',\n                    MAGNITUDE: 'WIND'\n                  }\n                },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        // update connected blocks if visible\n        if(this.getInput('EXPANDED_STATEMENT')){\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                  if (count === 0) {\n                      dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  else {\n                      dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                  }\n                  ++count;\n              }\n            }\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\nBlockly.defineBlocksWithJsonArray([\n{\n    \"type\": \"set_speed\",\n    \"message0\": \"set speed %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"SPEED\",\n            \"options\": [\n                [\n                    \"zero\",\n                    \"ZERO\"\n                ],\n                [\n                    \"very low\",\n                    \"VERY_LOW\"\n                ],\n                [\n                    \"low\",\n                    \"LOW\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"high\",\n                    \"HIGH\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_behavior_unpacked_blocks\"\n},\n{\n    \"type\": \"set_type\",\n    \"message0\": \"set type %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"copper\",\n                    \"COPPER\"\n                ],\n                [\n                    \"wood\",\n                    \"WOOD\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_behavior_unpacked_blocks\"\n},\n// {\n//     \"type\": \"create_electrons_old\",\n//     \"message0\": \"create electrons\",\n//     \"inputsInline\": true,\n//     \"previousStatement\": null,\n//     \"nextStatement\": null,\n//     \"style\": \"smoke_behavior_blocks\"\n// },\n// {\n//     \"type\":\"set_mass\",\n//     \"message0\": \"set mass %1\",\n//     \"args0\": [\n//         {\n//             \"type\": \"field_dropdown\",\n//             \"name\": \"MASS\",\n//             \"options\": [\n//                 [\n//                     \"uniform\",\n//                     \"UNIFORM\"\n//                 ],\n//                 [\n//                     \"messy\",\n//                     \"MESSY\"\n//                 ]\n//             ]\n//         }\n//     ],\n//     \"inputsInline\": true,\n//     \"previousStatement\": null,\n//     \"nextStatement\": null,\n//     \"style\": \"smoke_behavior_unpacked_blocks\",\n//     \"tooltip\": \"pick a value between 0 and 5\",\n// },\n{\n    \"type\":\"set_arrangement\",\n    \"message0\": \"set arrangement %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"ARRANGEMENT\",\n            \"options\": [\n                [\n                    \"uniform\",\n                    \"UNIFORM\"\n                ],\n                [\n                    \"messy\",\n                    \"MESSY\"\n                ]\n            ]\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_behavior_unpacked_blocks\",\n    \"tooltip\": \"pick a value between 0 and 5\",\n},\n    {\n        \"type\": \"set_color\",\n        \"message0\": \"set color %1\",\n        \"args0\": [\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"COLOR\",\n                \"options\": [\n                    [\n                        \"yellow\",\n                        \"YELLOW\"\n                    ],\n                    [\n                        \"red\",\n                        \"RED\"\n                    ],\n                    [\n                        \"green\",\n                        \"GREEN\"\n                    ],\n                    [\n                        \"blue\",\n                        \"BLUE\"\n                    ],\n                    [\n                        \"gray\",\n                        \"GRAY\"\n                    ],\n                    [\n                      \"cyan\",\n                      \"CYAN\"\n                    ],\n                    [\n                      \"white\",\n                      \"WHITE\"\n                    ]\n                ]\n            }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\",\n        \"style\": \"smoke_behavior_unpacked_blocks\"\n    },\n    {\n        \"type\": \"set_links\",\n        \"message0\": \"set links %1\",\n        \"args0\": [\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"LINKS\",\n                \"options\": [\n                    [\n                        \"on\",\n                        \"ON\"\n                    ],\n                    [\n                        \"off\",\n                        \"OFF\"\n                    ]\n                ]\n            }\n        ],\n        \"inputsInline\": true,\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"style\": \"smoke_behavior_unpacked_blocks\",\n    },\n    {\n        \"type\": \"set_size\",\n        \"message0\": \"set size %1\",\n        \"args0\": [\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"SIZE\",\n                \"options\": [\n                    [\n                        \"small\",\n                        \"SMALL\"\n                    ],\n                    [\n                        \"medium\",\n                        \"MEDIUM\"\n                    ],\n                    [\n                        \"big\",\n                        \"BIG\"\n                    ]\n                ]\n            }\n        ],\n        \"inputsInline\": true,\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"style\": \"smoke_behavior_unpacked_blocks\",\n    },\n{\n    \"type\": \"set_position\",\n    \"message0\": \"set position %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"POSITION\",\n            \"options\": [\n                [\n                    \"random\",\n                    \"RANDOM_HEAT\"\n                ],\n                [\n                    \"center\",\n                    \"CENTER_HEAT\"\n                ],\n                [\n                    \"vertical line\",\n                    \"VERTICAL_HEAT\"\n                ],\n                [\n                    \"horizontal line\",\n                    \"HORIZONTAL_HEAT\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_behavior_unpacked_blocks\"\n},\n    {\n        \"type\": \"set_heading\",\n        \"message0\": \"set heading %1\",\n        \"args0\": [\n          {\n              \"type\": \"field_dropdown\",\n              \"name\": \"HEADING\",\n              \"options\": [\n                  [\n                      \"random\",\n                      \"RANDOM\"\n                  ],\n                  [\n                      \"up\",\n                      \"UP\"\n                  ],\n                  [\n                      \"right\",\n                      \"RIGHT\"\n                  ],\n                  [\n                      \"down\",\n                      \"DOWN\"\n                  ],\n                  [\n                      \"left\",\n                      \"LEFT\"\n                  ]\n              ]\n          }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\",\n        \"style\": \"smoke_behavior_unpacked_blocks\"\n    },\n\n// Action blocks\n{\n    \"type\": \"move\",\n    \"message0\": \"move %1 %2\",\n    \"args0\": [\n      {\n          \"type\": \"field_dropdown\",\n          \"name\": \"DIRECTION\",\n          \"options\": [\n              [\n                  \"forward\",\n                  \"FORWARD\"\n              ],\n            //   [\n            //       \"upward\",\n            //       \"UPWARD\"\n            //   ],\n            //   [\n            //       \"rightward\",\n            //       \"RIGHTWARD\"\n            //   ],\n            //   [\n            //       \"downward\",\n            //       \"DOWNWARD\"\n            //   ],\n            //   [\n            //       \"leftward\",\n            //       \"LEFTWARD\"\n            //   ],\n              [\n                  \"in wind direction\",\n                  \"WIND\"\n              ]\n          ]\n      },\n      {\n          \"type\": \"field_dropdown\",\n          \"name\": \"MAGNITUDE\",\n          \"options\": [\n              [\n                  \"the same\",\n                  \"SAME\"\n              ],\n            //   [\n            //       \"much more\",\n            //       \"MUCH_MORE\"\n            //   ],\n            //   [\n            //       \"more\",\n            //       \"MORE\"\n            //   ],\n            //   [\n            //       \"a little more\",\n            //       \"LITTLE_MORE\"\n            //   ],\n              [\n                  \"at wind speed\",\n                  \"WIND\"\n              ]\n          ]\n      }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"wiggle\",\n    \"message0\": \"wiggle\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"travel\",\n    \"message0\": \"move\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"transfer_heat\",\n    \"message0\": \"transfer heat\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"bounce_off\",\n    \"message0\": \"bounce off\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"erase\",\n    \"message0\": \"erase particles\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n{\n    \"type\": \"attach\",\n    \"message0\": \"attach particles\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_action_blocks\"\n},\n// Control Blocks\n{\n    \"type\": \"ask_each_particle\",\n    \"message0\": \"ask %1 %2 %3\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"particles\",\n                    \"PARTICLES\"\n                ],\n                [\n                    \"electrons\",\n                    \"ELECTRONS\"\n                ],\n                [\n                    \"all agents\",\n                    \"ALL\"\n                ]\n            ]\n        },\n        {\n            \"type\": \"input_dummy\"\n        },\n        {\n            \"type\": \"input_statement\",\n            \"name\": \"ASK_EACH\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"smoke_control_blocks\"\n},\n{\n    \"type\": \"touching_dropdown\",\n    \"message0\": \"touching %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"any\",\n                    \"ANY\"\n                ],\n                [\n                    \"particles\",\n                    \"PARTICLES\"\n                ],\n                [\n                    \"electrons\",\n                    \"ELECTRONS\"\n                ],\n                [\n                    \"wall\",\n                    \"WALL\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"smoke_control_blocks\",\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n},\n{\n    \"type\": \"is_linked\",\n    \"message0\": \"is linked to particles %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"any\",\n                    \"ANY\"\n                ],\n                [\n                    \"particles\",\n                    \"PARTICLES\"\n                ],\n                [\n                    \"electrons\",\n                    \"ELECTRONS\"\n                ],\n                [\n                    \"wall\",\n                    \"WALL\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"smoke_control_blocks\",\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n},\n\n    {\n        \"type\": \"relationship\",\n        \"message0\": \"as size goes %1 %2 step size goes %3\",\n        \"args0\": [\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"SIZE\",\n                \"options\": [\n                    [\n                        \"up\",\n                        \"UP\"\n                    ],\n                    [\n                        \"down\",\n                        \"DOWN\"\n                    ]\n                ]\n            },\n            {\n                \"type\": \"input_dummy\"\n            },\n            {\n                \"type\": \"field_dropdown\",\n                \"name\": \"STEPSIZE\",\n                \"options\": [\n                    [\n                        \"up\",\n                        \"UP\"\n                    ],\n                    [\n                        \"down\",\n                        \"DOWN\"\n                    ],\n                    [\n                        \"the same\",\n                        \"SAME\"\n                    ]\n                ]\n            }\n        ],\n        \"previousStatement\": null,\n        \"nextStatement\": null,\n        \"style\": \"smoke_action_unpacked_blocks\",\n        \"tooltip\": \"\",\n        \"helpUrl\": \"\"\n    },\n]);\n\n// GEN BLOCKS\n// Setup blocks\nnetlogoGenerator['set'] = function (block) {\n    const statement_members = netlogoGenerator.statementToCode(block, 'SET');\n    const code = 'to blocks-set\\n' +\n        netlogoGenerator.INDENT + 'setup\\n' +\n        statement_members +\n        netlogoGenerator.INDENT + 'reset-ticks\\n' +\n        'end\\n';\n    return code;\n};\nnetlogoGenerator['go'] = function (block) {\n    const statement_members = netlogoGenerator.statementToCode(block, 'GO');\n    const code = 'to blocks-go\\n' +\n        // netlogoGenerator.INDENT + 'mouse_click\\n' +\n        netlogoGenerator.INDENT + 'go\\n' +\n        statement_members +\n       // netlogoGenerator.INDENT + 'ask particles [color-agent]\\n' +\n        netlogoGenerator.INDENT + 'tick-advance tick-delta\\n' +\n        netlogoGenerator.INDENT + 'display\\n' +\n        'end\\n';\n    return code;\n};\n\nnetlogoGenerator['mouse_click'] = function (block) {\n    let statement_members = netlogoGenerator.INDENT + 'set mouse-up? false\\n' + netlogoGenerator.statementToCode(block, 'MOUSE');\n\n    let ifContents = 'if mouse-down? \\n[\\n' +\n        statement_members + ']';\n    ifContents = Blockly.JavaScript.prefixLines(ifContents, netlogoGenerator.INDENT);\n\n    let elseContents = '[\\n' + netlogoGenerator.INDENT + 'if not mouse-down?\\n' + netlogoGenerator.INDENT + '[\\n' + netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set mouse-up? true\\n' + netlogoGenerator.INDENT + ']\\n' + ']\\n'\n    elseContents = Blockly.JavaScript.prefixLines(elseContents, netlogoGenerator.INDENT);\n    let code = 'ifelse mouse-up? != false' + '\\n[\\n' + ifContents + '\\n]\\n';\n\n    code = Blockly.JavaScript.prefixLines(\n        code, netlogoGenerator.INDENT) + elseContents;\n\n    // return 'to mouse_click\\n' + code + 'end\\n';\n    return 'to mouse_click\\n' + code + 'end\\n';\n};\n\n// If/elseif/else condition\nnetlogoGenerator['controls_if'] = function (block) {\n    let n = 0;\n    let usedTouching;\n    let code = '', branchCode, conditionCode;\n\n    if (block.inputList.length === 2) {\n        code += 'if ';\n    }\n    else {\n        code += '(ifelse ';\n    }\n\n    do {\n        conditionCode = netlogoGenerator.valueToCode(block, 'IF' + n,\n            netlogoGenerator.ORDER_NONE) || 'false';\n        usedTouching = conditionCode.includes('(collision-candidate != nobody and collision-candidate != last-collision and distance collision-candidate <= size)');\n        branchCode = usedTouching ? (netlogoGenerator.INDENT + 'set collision-flag 1\\n' + netlogoGenerator.statementToCode(block, 'DO' + n)) : (netlogoGenerator.INDENT + 'set collision-flag 0\\n') + netlogoGenerator.statementToCode(block, 'DO' + n);\n        if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n            branchCode = Blockly.JavaScript.prefixLines(\n                Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n                    block), netlogoGenerator.INDENT) + branchCode;\n        }\n        code += (n > 0 ? '\\n' : '') + conditionCode + '\\n[\\n' + branchCode + ']';\n        n++;\n    } while (block.getInput('IF' + n));\n\n    if (block.getInput('ELSE') || Blockly.JavaScript.STATEMENT_SUFFIX) {\n        branchCode = netlogoGenerator.statementToCode(block, 'ELSE');\n        if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n            branchCode = Blockly.JavaScript.prefixLines(\n                Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n                    block), netlogoGenerator.INDENT) + branchCode;\n        }\n        code += '\\n[\\n' + branchCode + ']';\n    }\n\n    (block.inputList.length === 2) ? code += '\\n' : code += ')\\n';\n    usedTouching ? code += 'set collision-flag 0\\n' : code +='';\n\n    return code;\n};\n\n// SMOKE PROPAGATION BLOCK DEFINITIONS\n// Properties\n// Create Particles w/ mutation\nnetlogoGenerator['create_particles'] = function (block) {\n    const root = block.getRootBlock().type;\n    const dataObj = JSON.parse(block.data);\n    // const num = block.getFieldValue('PARTICLE_NUM');\n    const type = block.getFieldValue('TYPE');\n    // const size = (type === \"COPPER\" ? 2.0 : 2.0)\n    const size = 0.7;\n    let parameters;\n    let prefix = \n\n    'let particlesX 0 \\n' +\n    'let particlesY 0 \\n' + \n    // 'let bottomCor -15 \\n' +\n    'while [particlesY < 11][ \\n' +\n    'while [particlesX < 11][ \\n' +\n    '   create-particles 1[ \\n' +\n    '      set particle-type \"' + type.toLowerCase() + '\"\\n' +\n    '      set size ' + size + '\\n'  +\n    '      set shape \"circle\" \\n'   +\n    '      set color white \\n'   +\n    '      set turtle-moved 0\\n'+\n    '      set temperature room-temp \\n'   +\n    '      ;; save old value \\n' +\n    '      set old-temperature temperature \\n' +\n    '      set heading random 360   \\n'   +  \n    '      setxy (particlesX - 5) (particlesY - 5)\\n'     \n    \n    let suffix = \n    '   ] \\n' +\n    '   set particlesX particlesX + 1 \\n' +\n    ' ] \\n' +\n    ' set particlesX 0 \\n' +\n    'set particlesY particlesY + 1 \\n' +\n    '] \\n'  +\n\n    'set particlesx 0\\n' +\n\n    //create particles on heatsoruce type particles-heatsource and turn them red\n    'while [particlesX < 11][ \\n' +\n    '   create-particles 1[ \\n' +\n    '      set particle-type \"' + 'particle-heatsource' + '\"\\n' +\n    '      set size ' + size + '\\n'  +\n    '      set shape \"circle\" \\n'   +\n    '      setxy (particlesx - 5) bottomcor  \\n' +\n    '      ] \\n' +\n    '      set particlesX particlesX + 1 \\n' +\n    '      ]\\n' +\n    '      ask particles with [ycor = bottomCor][ \\n '  +\n    '         set temperature bottomTemperature \\n' +\n    '        set color scale-color red rescale bottomTemperature 19.9 14.4 \\n ' +\n    '         ] \\n'  +\n    '         if linked = \"ON\" [ \\n'  +\n    '          ask particles with [particle-type != \"particle-heatsource\"][ \\n '  +\n    '         create-links-with other particles in-radius 1.4 \\n' +\n    '         ] \\n'+\n    '           ask links[ \\n '  +\n    '         set thickness 0.1 \\n' +\n    '         set color 45 \\n' +\n    '         ] \\n'+\n    '         ] \\n'\n      \n    if (!dataObj.contextData.CHANGED){\n        parameters = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        for(let descendant of xmlblock.getDescendants()){\n            if(root === 'mouse_click' && descendant.type === 'set_position'){\n                descendant.dispose(true);\n            }\n        }\n        parameters = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    let code = Blockly.JavaScript.prefixLines(prefix, netlogoGenerator.INDENT) + ';; test 1' + '\\n' + Blockly.JavaScript.prefixLines(parameters, netlogoGenerator.INDENT)  +'\\n ;; test 2 \\n'+ Blockly.JavaScript.prefixLines(suffix, netlogoGenerator.INDENT) + ';; test 3' + '\\n';\n    // let code = Blockly.JavaScript.prefixLines(prefix, netlogoGenerator.INDENT) + '\\n';\n    return code;\n};\n\nnetlogoGenerator['create_electrons'] = function (block) {\n    const root = block.getRootBlock().type;\n    const dataObj = JSON.parse(block.data);\n    const num = block.getFieldValue('PARTICLE_NUM');\n    const size = 0.4;\n    let parameters;\n    let prefix = \n    '   create-electrons ' + num + '[ \\n' +\n    '      set size ' + size + '\\n'  +\n    '      set particle-type \"electrons\"\\n' +\n    '      set shape \"circle\" \\n'   +\n    '      set turtle-moved 0\\n' + \n        ';; assign to electron the room temperature\\n' +\n        'set temperature room-temp\\n' +\n        ' ;; give to the bottom ones the temperature of the bunsen\\n' +\n        'if pycor = (- plate-size) [set temperature bottomTemperature]\\n' +\n        ';; save old value\\n' +\n        'set old-temperature temperature\\n' ;\n        // 'ask electrons [color-electron]\\n' ;\n    \n    let suffix = \n    '   ] \\n'   \n\n    if (!dataObj.contextData.CHANGED){\n        parameters = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        for(let descendant of xmlblock.getDescendants()){\n            if(root === 'mouse_click' && descendant.type === 'set_position'){\n                descendant.dispose(true);\n            }\n        }\n        parameters = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    let code = Blockly.JavaScript.prefixLines(prefix, netlogoGenerator.INDENT) + ';; test 1' + '\\n' + Blockly.JavaScript.prefixLines(parameters, netlogoGenerator.INDENT)  +'\\n ;; test 2 \\n'+ Blockly.JavaScript.prefixLines(suffix, netlogoGenerator.INDENT) + ';; test 3' + '\\n';\n    return code;\n};\n\n// Set Particle Speed\nnetlogoGenerator['set_speed'] = function (block) {\n    let speed = netlogoGenerator.SPEED[block.getField('SPEED').selectedOption_[1]];\n    let code = 'set random-wiggle 5\\nset speed ' + speed + '\\n';\n    return code;\n};\n\n// Set Particle Type\nnetlogoGenerator['set_type'] = function (block) {\n    let type = block.getField('TYPE').selectedOption_[0];\n    let code = 'set particle-type \"' + type + '\"\\n';\n    return code;\n};\n\n// // Create electrons\n// netlogoGenerator['create_electrons_old'] = function () {\n//     const code =\n//         'create-electrons 500 [\\n' +\n//         'setxy (random-float (2 * plate-size) ) - (plate-size ) + 3 (random-float (2 * plate-size)) - plate-size\\n' +\n//         'set heading random 360\\n' +\n//         'set particle-type \"electrons\"\\n' +\n//         'set electron-moved 0\\n' + \n//         'set shape \"circle\"\\n' +\n//         'set size .4\\n' +\n//         ';; assign to electron the room temperature\\n' +\n//         'set temperature room-temp\\n' +\n//         ' ;; give to the bottom ones the temperature of the bunsen\\n' +\n//         'if pycor = (- plate-size) [set temperature bottom-temp]\\n' +\n//         ';; save old value\\n' +\n//         'set old-temperature temperature\\n' +\n//         'ask electrons [color-electron]\\n' +\n//         ']\\n' ;\n//     return code;\n// };\n\n// // Set Particle Mass\n// netlogoGenerator['set_mass'] = function (block) {\n//     let mass = netlogoGenerator.MASS[block.getField('MASS').selectedOption_[1]];\n//     let code = ' \\n ;; test X \\n';\n//     return code;\n// };\n\n// Set Particle Arrangement\nnetlogoGenerator['set_arrangement'] = function (block) {\n    let arrangerment = netlogoGenerator.ARRANGEMENT[block.getField('ARRANGEMENT').selectedOption_[1]];\n\n    let code = \n    \n    arrangerment + '\\n';\n\n    // 'setxy xcor ' + arrangerment + 'ycor ' + arrangerment + '\\n';\n    // 'ifelse (ycor <= plate-size) and (ycor >= (- plate-size )) and (xcor <= plate-size + 3) and (xcor >= (- plate-size + 3))\\n' +\n    // '[]\\n' +\n    // '[setxy ((random 15 - random 15) + 3) (random 15 - random 15)]\\n';\n    \n    return code;\n};\n\n// Set Particle Color\nnetlogoGenerator['set_color'] = function (block) {\n    let color = block.getField('COLOR').selectedOption_[0]\n    // let code = 'set color ' + color + '\\nset turtle-color ' + color + '\\n';\n    let code = 'set color ' + color + '\\n';\n    return code;\n};\n\n// Set Particle Links\nnetlogoGenerator['set_links'] = function (block) {\n    let linked = block.getField('LINKS').selectedOption_[1];\n    let code = 'set linked ' + '\"' + linked+ '\"' + '\\n';\n    return code;\n};\n\n// Set Particle Size\nnetlogoGenerator['set_size'] = function (block) {\n    let size = netlogoGenerator.HEATSIZE[block.getField('SIZE').selectedOption_[1]];\n    let code = 'set size ' + size + '\\n';\n    return code;\n};\n\n// Set Particle Postion\nnetlogoGenerator['set_position'] = function (block) {\n    const position = netlogoGenerator.POSITION[block.getField('POSITION').selectedOption_[1]];\n    const field = block.getField('POSITION').selectedOption_[1];\n    let code = (field !== 'MOUSE') ? ('setxy ' + position + '\\n') : (position + '\\n');\n    return code;\n};\n\n// Set Particle Heading\nnetlogoGenerator['set_heading'] = function (block) {\n    let heading = netlogoGenerator.HEADING[block.getField('HEADING').selectedOption_[1]];\n    let code = 'set random-wiggle 40\\nset heading ' + heading + '\\n';\n    return code;\n};\n\n\n// Action\n// Move\nnetlogoGenerator['move'] = function (block) {\n    let block_direction = block.getField('DIRECTION').selectedOption_[1]\n    let block_magnitude = block.getField('MAGNITUDE').selectedOption_[1]\n    let direction = netlogoGenerator.DIRECTION[block_direction];\n    let magnitude = netlogoGenerator.MAGNITUDE[block_magnitude];\n    let code = 'set random-wiggle 2\\n'\n      + 'move ' + direction + ' ' + magnitude + '\\n';\n    if (block_magnitude === \"WIND\") {\n      code += 'if (speed > wind-speed) [set speed wind-speed]\\n'\n    }\n    if (block_direction === \"FORWARD\") {\n      code = code + 'particle-forward\\n'\n    }\n    return code;\n};\n\n// Apply wind\nnetlogoGenerator['blow'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\nnetlogoGenerator['move forward'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\n// Wiggle\nnetlogoGenerator['wiggle'] = function () {\n    const code =\n\n    // change tick-counter frequency on nlogo file\n    'if tick-counter = 1 [ \\n' +\n    // 'if random-normal (room-temp + 10) 5 < temperature [ \\n' +\n    \n    'set vibrate-energy (vibrate-energy + temperature / 5)\\n'+\n    'if vibrate-energy >= temperature [set vibrate-energy temperature]\\n'+\n    'if vibrate-energy <= (- temperature) [set vibrate-energy (- temperature)]\\n'+\n    \n        'ifelse turtle-moved = 0 [\\n'+\n        'set heading random 360\\n'+\n        'set wiggle-displacement ((vibrate-energy / 100) * 0.1)\\n' +\n        'forward wiggle-displacement\\n' +\n        'set heading heading - 180 \\n' +\n        'set turtle-moved 1\\n' +\n        ']\\n'+\n\n        '[\\n'+\n        'forward wiggle-displacement\\n' +\n        'set turtle-moved 0\\n' +\n        // ']\\n'+\n\n    // ']\\n' +\n    ']\\n' +\n    ']\\n';\n\n\n    return code;\n};\n\n// Travel\nnetlogoGenerator['travel'] = function () {\n    // let fineTuning = 0.5;\n    const code =\n    'if particle-type != \"particle-heatsource\"[ \\n' +\n    'let xcorr (xcor + dx * temperature * 0.1 * tick-delta)\\n' +\n    'let ycorr (ycor + dy * temperature * 0.1 * tick-delta)\\n' +\n    'if (ycorr) > plate-size + 0.5 [\\n' +\n    '  die\\n' +\n    ']\\n' +\n    'if (ycorr) < (- plate-size - 0.5)[\\n' +\n        '  die\\n' +\n\n        ']\\n' +\n        'if xcorr > plate-size + 0.5 or xcorr < (- plate-size - 0.5) [\\n' +\n        'die\\n' +\n\n            ']\\n' +\n        \n        'setxy xcorr ycorr\\n ' +\n     'if ycorr < (- plate-size) - 0.3 [ set temperature bottomTemperature ]\\n' +\n    ']\\n';\n    return code;\n};\n\n// Travel backup\n// netlogoGenerator['travel'] = function () {\n//     // let fineTuning = 0.5;\n//     const code =\n//     'if particle-type != \"particle-heatsource\"[ \\n' +\n//     'let xcorr (xcor + dx * temperature * 0.1 * tick-delta)\\n' +\n//     'let ycorr (ycor + dy * temperature * 0.1 * tick-delta)\\n' +\n//     'if (ycorr) > plate-size [\\n' +\n//     '  set heading (180 - heading)\\n' +\n//     ']\\n' +\n//     'if (ycorr) < (- plate-size)[\\n' +\n//         '  set heading (180 - heading)\\n' +\n\n//         ']\\n' +\n//         'if xcorr > plate-size or xcorr < (- plate-size) [\\n' +\n//         'set heading (- heading)\\n' +\n\n//             ']\\n' +\n        \n//         'setxy xcorr ycorr\\n ' +\n//     // 'if pycor < (- plate-size) [ set temperature bottom-temp ]\\n' +\n//     ']\\n';\n//     return code;\n// };\n\n// Wiggle\nnetlogoGenerator['transfer_heat'] = function () {\n    const code =\n\n    'if breed = particles and linked = \"ON\" [ \\n' +\n      'set temperature new-temperature\\n' +\n       ';; set the edges back to their constant heat\\n' +\n       'if pycor = bottomcor [ set temperature bottomTemperature ]\\n' +\n       ';; save old temperature\\n' +\n       'set old-temperature temperature\\n'+\n       'color-agent\\n'+\n       '] \\n' +\n    'if breed = electrons[ \\n' +\n        'set temperature new-temperature\\n' +\n        ';; set the edges back to their constant heat\\n' +\n        'if pycor = bottomcor [ set temperature bottomTemperature ]\\n' +\n        ';; save old temperature\\n' +\n        'set old-temperature temperature\\n'+\n        'color-agent\\n'+\n        '] \\n';\n    \n     return code;\n};\n\n// Interact\nnetlogoGenerator['interact'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\n// Interact\nnetlogoGenerator['transfer_energy'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\n\nnetlogoGenerator['vibrate'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\n// Bounce Off\nnetlogoGenerator['bounce_off'] = function () {\n    let code = \n    'if particle-type != \"particle-heatsource\" [ ifelse collision-flag = 1\\n[\\n' + \n    netlogoGenerator.INDENT + 'set heading (heading + (random 60) - random (60))\\n'+\n    netlogoGenerator.INDENT +'set last-collision collision-candidate\\n'+\n    netlogoGenerator.INDENT + ']\\n' +\n    netlogoGenerator.INDENT + '[ \\n' +\n    netlogoGenerator.INDENT + 'let xcorr (xcor + dx * temperature * 0.1 * tick-delta)\\n' +\n    netlogoGenerator.INDENT + 'let ycorr (ycor + dy * temperature * 0.1 * tick-delta)\\n'+\n    netlogoGenerator.INDENT + 'if (ycorr) > (plate-size + 0.5) [\\n' +\n    netlogoGenerator.INDENT +  '  set heading (180 - heading)\\n' +\n    netlogoGenerator.INDENT +  ']\\n' +\n    netlogoGenerator.INDENT +  'if (ycorr) < (- plate-size - 0.5)[\\n' +\n    netlogoGenerator.INDENT +      '  set heading (180 - heading)\\n' +\n    netlogoGenerator.INDENT +     ']\\n' +\n    netlogoGenerator.INDENT +     'if xcorr > plate-size  + 0.5 or xcorr < (- plate-size - 0.5) [\\n' +\n    netlogoGenerator.INDENT +     'set heading (- heading)\\n' +\n    netlogoGenerator.INDENT +         ']\\n' +\n    netlogoGenerator.INDENT + '] ]\\n';\n    return code;\n};\n// // Bounce Off\n// netlogoGenerator['bounce_off'] = function () {\n//     let code = \n//     'ifelse collision-flag = 1\\n[\\n' + \n//     netlogoGenerator.INDENT + 'collide-with collision-candidate\\n'+\n//     netlogoGenerator.INDENT +'set last-collision collision-candidate\\n'+\n//     netlogoGenerator.INDENT + 'ask collision-candidate [ set last-collision myself ]\\n]\\n[\\n' +\n//     netlogoGenerator.INDENT + 'if abs[pxcor] of patch-ahead 1 >= max-pxcor - 4\\n' +\n//     netlogoGenerator.INDENT + '[ set heading (- heading) ]\\n' + \n//     netlogoGenerator.INDENT + 'if abs [pycor] of patch-ahead 1 >= max-pycor - 4\\n' + \n//     netlogoGenerator.INDENT + '[ set heading(180 - heading) ]\\n]\\n';\n//     return code;\n// };\n\n// Erase Particles\nnetlogoGenerator['erase'] = function () {\n    const code =\n        'ifelse collision-flag = 1\\n[\\n' +\n        netlogoGenerator.INDENT + 'set last-collision collision-candidate\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate [ set last-collision myself ]\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate [ die ]\\n' +\n        ']\\n' +\n        '[\\n' +\n        netlogoGenerator.INDENT + 'die' +\n        '\\n]\\n';\n    return code;\n};\n\n// Attach Particles\nnetlogoGenerator['attach'] = function () {\n    const code =\n        'ifelse collision-flag = 1 \\n[\\n' +\n        netlogoGenerator.INDENT + 'set last-collision collision-candidate\\n' +\n        netlogoGenerator.INDENT + 'let heading-candidate heading\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate\\n' + \n        netlogoGenerator.INDENT + '[\\n' +\n        netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set last-collision myself\\n' +\n        netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set heading heading-candidate\\n' + \n        netlogoGenerator.INDENT + ']\\n' +\n        ']\\n[\\n' +\n        netlogoGenerator.INDENT + 'set speed 0\\n' +\n        ']\\n';\n    return code;\n};\n\n// Control\n// Ask Particles\nnetlogoGenerator['ask_each_particle'] = function (block) {\n    const particleName = block.getField('TYPE').value_ || 'PARTICLES';\n    const parameter = particleName === 'ALL' ? 'turtles ' : particleName.toLowerCase() ;\n    // const parameter = particleName === 'ALL' ? '' : ' with [particle-type = \"' + particleName.toLowerCase() + '\"]';\n    const statement_members = netlogoGenerator.statementToCode(block, 'ASK_EACH');\n    let code = 'ask ' + parameter + '\\n' + '[\\n' + statement_members + ']\\n';\n    return code;\n};\n\n// // Ask Particles BACKUP\n// netlogoGenerator['ask_each_particle'] = function (block) {\n//     const particleName = block.getField('TYPE').value_ || 'PLATE';\n//     const parameter = particleName === 'PLATE' ? 'particles' : 'electrons';\n//     const statement_members = netlogoGenerator.statementToCode(block, 'ASK_EACH');\n//     let code = 'ask ' + parameter + '\\n' + '[\\n' + statement_members + ']\\n';\n//     return code;\n// };\n\n// Detect if touching\nnetlogoGenerator['touching_dropdown'] = function (block) {\n    const type = block.getFieldValue('TYPE');\n    let code;\n    let particleType;\n    if(type.includes('PARTICLES') || type.includes('ELECTRONS') || type.includes('ANY')){  \n        if(type.includes('ANY')){\n            particleType = 'particles electrons ';\n        }\n        if(type.includes('ELECTRONS')){\n            particleType = 'electrons ';\n        }\n        if(type.includes('PARTICLES')){\n            particleType = 'particles ';\n        }\n        code = \n        //to bypass the if and create the if later\n        'true [] \\n' +\n        'set collision-candidate min-one-of other (turtle-set ' + particleType + ') [distance myself] \\n ' +\n        'set collision-flag 1 \\n' +\n        'if(collision-candidate != nobody and collision-candidate != last-collision and distance collision-candidate <= size)';\n       \n    }\n    if(type.includes('WALL')){  \n        //if wall\n        code = \n        'true \\n';\n        // 'set collision-flag 0 \\n';\n        // 'if true \\n';\n        // 'if(abs [pxcor] of patch-ahead 1 >= max-pxcor or abs [pycor] of patch-ahead 1 >= max-pycor)';\n    }\n    return [code, netlogoGenerator.ORDER_NONE];\n};\n\nnetlogoGenerator['is_linked'] = function (block) {\n    const type = block.getFieldValue('TYPE');\n    let code;\n    if(type.includes('PARTICLES') || type.includes('ELECTRONS') || type.includes('ANY')){  \n    //    \n    }\n   \n    code = \n            'linked = \"ON\" \\n';\n    return [code, netlogoGenerator.ORDER_NONE];\n};\n\n// netlogoGenerator['is_linked'] = function (block) {\n//     let code;\n//         code = \n//         'linked = \"ON\" \\n' +\n//         '    \\n ' ;\n//     return [code, netlogoGenerator.ORDER_NONE];\n// };\n\nfunction getNLCodeFromUnpackBlocks(blockType, unpackBlocks, workspace) {\n  const tempBlock = workspace.newBlock(blockType);\n  tempBlock.appendStatementInput('EXPANDED_STATEMENT');\n  traverseBlocks(unpackBlocks, tempBlock.getInput('EXPANDED_STATEMENT').connection, workspace)\n  const code = netlogoGenerator.blockToCode(tempBlock.getInput('EXPANDED_STATEMENT').connection.targetBlock());\n  tempBlock.dispose()\n  return code\n}\n\nfunction traverseBlocks(blockData, parentBlockConnection, workspace) {\n      for (let blockGroup of blockData.reverse()) {\n        // instantiate block\n        const block = workspace.newBlock(blockGroup.blockType);\n        for (let field in blockGroup.fields) {\n            if (block.getField(field)) {\n                block.setFieldValue(blockGroup.fields[field], field)\n            }\n        }\n        // connect block to parent block\n        const blockPreviousConnection = block.previousConnection;\n        if (parentBlockConnection) {\n          parentBlockConnection.connect(blockPreviousConnection);\n        }\n        // add condition block if one exists\n        if (blockGroup.condition) {\n            const conditionBlock = workspace.newBlock(blockGroup.condition.blockType);\n            block.getInput(blockGroup.condition.input).connection.connect(conditionBlock.outputConnection);\n            if (blockGroup.condition.field) {\n                conditionBlock.setFieldValue(blockGroup.condition.field.value, blockGroup.condition.field.name);\n            }\n        }\n        // recursive step - traverse children and connect to parent.\n        // basecase when no children exist\n        if (blockGroup.children) {\n          traverseBlocks(blockGroup.children, block.inputList[1].connection, workspace)\n        }\n      }\n    }\n\n"],"sourceRoot":""}