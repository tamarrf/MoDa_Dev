{"version":3,"sources":["webpack:///./src/data/blockLibraries/photosynthesis.js"],"names":["photosynthesis","getNLCodeFromUnpackBlocks","blockType","unpackBlocks","workspace","tempBlock","newBlock","appendStatementInput","traverseBlocks","getInput","connection","code","netlogoGenerator","blockToCode","targetBlock","dispose","blockData","parentBlockConnection","reverse","blockGroup","block","field","fields","getField","setFieldValue","blockPreviousConnection","previousConnection","connect","condition","conditionBlock","input","outputConnection","value","name","children","inputList","Blockly","Blocks","init","this","jsonInit","dataObj","SPEED","data","JSON","stringify","onchange","parse","count","getChildren","child","getSurroundParent","contentXml","Xml","domToText","blockToDom","contextData","defineBlocksWithJsonArray","statement_members","statementToCode","INDENT","ifContents","JavaScript","prefixLines","elseContents","usedTouching","branchCode","conditionCode","n","length","valueToCode","ORDER_NONE","includes","STATEMENT_SUFFIX","injectId","parameters","root","getRootBlock","type","num","getFieldValue","prefix","toLowerCase","suffix","CHANGED","xmlblock","domToBlock","textToDom","getDescendants","descendant","MASS","SIZE","POSITION","HEADING","speed","selectedOption_","mass","color","size","position","light","LIGHT","heading","produce","PRODUCE","break_molecule","BREAK","consume","CONSUME","particleName","value_","parameter","particleType","replace","particleCondition","particleTYPE"],"mappings":"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","file":"photosynthesis.bundle.js","sourcesContent":["import Blockly from 'blockly'\nimport { netlogoGenerator } from '@/blocklyHelpers/netlogoGenerator';\nexport let photosynthesis = {};\n\nphotosynthesis = {\n    \"categories\": [{\n        \"kind\": \"category\",\n        \"name\": \"Photosynthesis\",\n        \"expanded\": true,\n        \"contents\": [{\n            \"kind\": \"category\",\n            \"name\": \"Properties\",\n            \"toolboxitemid\": \"propertiesUnpackable\",\n            \"categorystyle\": \"particles_category\",\n            \"contents\": [{\n                \"kind\": \"block\",\n                \"type\": \"create_particles\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"create_energy\"\n            },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"create_chloroplasts\"\n            //\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"set_type\"\n            // },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"set_mass\"\n            // },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_speed\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_position\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"set_heading\"\n            },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"set_light\"\n            // },\n            ]\n        },\n        {\n            \"kind\": \"category\",\n            \"name\": \"Action\",\n            \"toolboxitemid\": \"actionsUnpackable\",\n            \"categorystyle\": \"behavior_category\",\n            \"contents\": [{\n                \"kind\": \"block\",\n                \"type\": \"move\"\n            },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"break_apart\"\n            // },\n            {\n                \"kind\": \"block\",\n                \"type\": \"break_apart2\"\n            },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"produce_o2\"\n            // },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"produce_glucose\"\n            // },\n            {\n                \"kind\": \"block\",\n                \"type\": \"produce\"\n            },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"consume\"\n            // },\n            {\n                \"kind\": \"block\",\n                \"type\": \"addCounter\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"zeroCounter\"\n            }\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"interact\"\n            // },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"break_molecules\"\n            // },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"bounce_off\"\n            // },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"erase\"\n            // },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"attach\"\n            // }\n            ]\n        },\n        {\n            \"kind\": \"category\",\n            \"name\": \"Control\",\n            \"colour\": \"#0089B8\",\n            \"contents\": [{\n                \"kind\": \"block\",\n                \"type\": \"ask_each_particle\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"inside\"\n            },\n            {\n                \"kind\": \"block\",\n                \"type\": \"counter\"\n            }\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"temperature\"\n            // },\n            // {\n            //     \"kind\": \"block\",\n            //     \"type\": \"touching_dropdown\"\n            // }\n        ]\n        }]\n    }]\n}\n\n// Create with Mutation\nBlockly.Blocks['create_particles'] = {\n    init: function () {\n        this.jsonInit({\n            \"message0\": \"create  %1 %2 molecules %3\",\n            \"args0\": [\n                {\n                    \"type\": \"field_slider\",\n                    \"name\": \"PARTICLE_NUM\",\n                    \"value\": 50,\n                    \"min\": 0,\n                    \"max\": 100\n                },\n                {\n                    \"type\": \"field_dropdown\",\n                    \"name\": \"TYPE\",\n                    \"options\": [\n                        [\n                            \"co2\",\n                            \"CO2\"\n                        ],\n                        [\n                            \"h2o\",\n                            \"H2O\"\n                        ]\n                    ]\n                },\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"style\": \"particle_blocks\",\n            \"mutator\": \"general_mutator\"\n        });\n        let dataObj = {\n            'unpackBlocks':[\n                {\n                  blockType: 'set_speed',\n                  fields: {\n                    SPEED: 'PHOTOMEDIUM',\n                  }\n                },\n                {\n                  blockType: 'set_position',\n                  fields: {\n                    'POSITION': 'RANDOM',\n                  }\n                },\n                {\n                  blockType: 'set_heading',\n                  fields: {\n                    'HEADING': 'RANDOM',\n                  }\n                },\n                // {\n                //   blockType: 'set_mass',\n                //   fields: {\n                //     'MASS': 'MEDIUM',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_color',\n                //   fields: {\n                //     'COLOR': this.getFieldValue('TYPE') === 'WATER' ? 'CYAN' : 'RED',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_size',\n                //   fields: {\n                //     'SIZE': 'MEDIUM',\n                //   }\n                // },\n            ],\n            'contextData':{\n                'CHANGED': false\n            },\n            'contentXml':'',\n        }\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n        \n    },\n    // update dafault values when applicable\n    onchange: function(){\n        const dataObj = JSON.parse(this.data);\n        // update connected blocks if visible\n        if(this.getInput('EXPANDED_STATEMENT')){\n            let count = 0;\n            for (let child of this.getChildren()) {\n              if (child.getSurroundParent() === this) {\n                if (count === 0) {\n                    dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                else {\n                    dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                ++count;\n              }\n            }\n        }\n        if (!dataObj.contextData['CHANGED']) {\n          dataObj.unpackBlocks = [\n            {\n                blockType: 'set_speed',\n                fields: {\n                  SPEED: 'PHOTOMEDIUM',\n                }\n              },\n                {\n                  blockType: 'set_position',\n                  fields: {\n                    'POSITION': 'RANDOM',\n                  }\n                },\n                {\n                  blockType: 'set_heading',\n                  fields: {\n                    'HEADING': 'RANDOM',\n                  }\n                },\n                // {\n                //   blockType: 'set_mass',\n                //   fields: {\n                //     'MASS': 'MEDIUM',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_color',\n                //   fields: {\n                //     'COLOR': this.getFieldValue('TYPE') === 'WATER' ? 'CYAN' : 'RED',\n                //   }\n                // },\n                // {\n                //   blockType: 'set_size',\n                //   fields: {\n                //     'SIZE': 'MEDIUM',\n                //   }\n                // },\n            ]\n        }\n        this.data = JSON.stringify(dataObj);\n    }\n};\n\n// Blockly.Blocks['create_energy'] = {\n//     init: function () {\n//         this.jsonInit({\n//             \"message0\": \"create light energy %1\",\n//             \"args0\": [\n//                 {\n//                     \"type\": \"input_dummy\",\n//                     \"name\": \"EMPTY\"\n//                 }\n//             ],\n//             \"previousStatement\": null,\n//             \"nextStatement\": null,\n//             \"style\": \"particle_blocks\",\n//             \"mutator\": \"general_mutator\"\n//         });\n//         let dataObj = {\n//             'unpackBlocks':[\n//                 {\n//                   blockType: 'set_speed',\n//                   fields: {\n//                     SPEED: 'PHOTOHIGH',\n//                   }\n//                 },\n//                 // {\n//                 //   blockType: 'set_position',\n//                 //   fields: {\n//                 //     'POSITION': 'RANDOM',\n//                 //   }\n//                 // },\n//                 // {\n//                 //   blockType: 'set_heading',\n//                 //   fields: {\n//                 //     'HEADING': 'RANDOM',\n//                 //   }\n//                 // },\n//                 // {\n//                 //   blockType: 'set_mass',\n//                 //   fields: {\n//                 //     'MASS': 'MEDIUM',\n//                 //   }\n//                 // },\n//                 // {\n//                 //   blockType: 'set_color',\n//                 //   fields: {\n//                 //     'COLOR': this.getFieldValue('TYPE') === 'WATER' ? 'CYAN' : 'RED',\n//                 //   }\n//                 // },\n//                 // {\n//                 //   blockType: 'set_mass',\n//                 //   fields: {\n//                 //     'MASS': 'MEDIUM',\n//                 //   }\n//                 // },\n//                 {\n//                   blockType: 'set_light',\n//                   fields: {\n//                     'LIGHT': 'LAMP',\n//                   }\n//                 },\n//             ],\n//             'contextData':{\n//                 'CHANGED': false\n//             },\n//             'contentXml':'',\n//         }\n//         // define unpacked blocks and default values\n//         this.data = JSON.stringify(dataObj);\n        \n//     },\n//     // update dafault values when applicable\n//     onchange: function(){\n//         const dataObj = JSON.parse(this.data);\n//         // update connected blocks if visible\n//         if(this.getInput('EXPANDED_STATEMENT')){\n//             let count = 0;\n//             for (let child of this.getChildren()) {\n//               if (child.getSurroundParent() === this) {\n//                 if (count === 0) {\n//                     dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n//                 }\n//                 else {\n//                     dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n//                 }\n//                 ++count;\n//               }\n//             }\n//         }\n//         if (!dataObj.contextData['CHANGED']) {\n//           dataObj.unpackBlocks = [\n//             {\n//                 blockType: 'set_speed',\n//                 fields: {\n//                   SPEED: 'PHOTOHIGH',\n//                 }\n//               },\n//                 // {\n//                 //   blockType: 'set_position',\n//                 //   fields: {\n//                 //     'POSITION': 'RANDOM',\n//                 //   }\n//                 // },\n//                 // {\n//                 //   blockType: 'set_heading',\n//                 //   fields: {\n//                 //     'HEADING': 'RANDOM',\n//                 //   }\n//                 // },\n//                 // {\n//                 //   blockType: 'set_mass',\n//                 //   fields: {\n//                 //     'MASS': 'MEDIUM',\n//                 //   }\n//                 // },\n//                 // {\n//                 //   blockType: 'set_color',\n//                 //   fields: {\n//                 //     'COLOR': this.getFieldValue('TYPE') === 'WATER' ? 'CYAN' : 'RED',\n//                 //   }\n//                 // },\n//                   {\n//                     blockType: 'set_light',\n//                     fields: {\n//                       'LIGHT': 'LAMP',\n//                     }\n//                   },\n//             ]\n//         }\n//         this.data = JSON.stringify(dataObj);\n//     }\n// };\n\n// Collision with mutation\nBlockly.Blocks['interact'] = {\n    init: function(){\n        this.jsonInit({\n            \"message0\": \"interact %1\",\n            \"args0\": [\n                {\n                    \"type\": \"input_dummy\",\n                    \"name\": \"EMPTY\"\n                }\n            ],\n            \"inputsInline\": true,\n            \"previousStatement\": null,\n            \"nextStatement\": null,\n            \"mutator\": \"general_mutator\",\n            \"style\": \"behavior_border\"\n        });\n        let dataObj = {\n            'unpackBlocks': [\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'WALL'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'bounce_off',\n                        fields: {}\n                      }\n                    ]\n                },\n                {\n                    blockType: 'controls_if',\n                    fields: {},\n                    condition: {\n                        input: 'IF0',\n                        blockType: 'touching_dropdown',\n                        field: {\n                            name: 'TYPE',\n                            value: 'ANYPARTICLE'\n                        }\n                    },\n                    children: [\n                      {\n                        blockType: 'bounce_off',\n                        fields: {}\n                      }\n                    ]\n                },\n            ],\n            'contextData': {\n                'CHANGED': false\n            },\n            'contentXml': ''\n        };\n        // define unpacked blocks and default values\n        this.data = JSON.stringify(dataObj);\n    },\n    onchange: function(){\n        if (this.getInput('EXPANDED_STATEMENT')) {\n            const dataObj = JSON.parse(this.data);\n            let count = 0;\n            for (let child of this.getChildren()){\n              if (child.getSurroundParent() === this) {\n                if(count === 0){\n                    dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                else{\n                    dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n                }\n                ++count;\n              }\n            }\n            this.data = JSON.stringify(dataObj);\n        }\n    }\n};\n\n// Blockly.Blocks['break_molecules'] = {\n//     init: function(){\n//         this.jsonInit({\n//             \"message0\": \"photossynthesis %1\",\n//             \"args0\": [\n//                 {\n//                     \"type\": \"input_dummy\",\n//                     \"name\": \"EMPTY\"\n//                 }\n//             ],\n//             \"inputsInline\": true,\n//             \"previousStatement\": null,\n//             \"nextStatement\": null,\n//             \"mutator\": \"general_mutator\",\n//             \"style\": \"behavior_border\"\n//         });\n//         let dataObj = {\n//             'unpackBlocks': [\n//                 {\n//                     blockType: 'controls_if',\n//                     fields: {},\n//                     condition: {\n//                         input: 'IF0',\n//                         blockType: 'inside',\n//                         field: {\n//                             name: 'TYPE',\n//                             value: 'H2O'\n//                         }\n//                     },\n//                     children: [\n//                       {\n//                         blockType: 'controls_if',\n//                         fields: {},\n//                          condition: {\n//                         input: 'IF0',\n//                         blockType: 'inside',\n//                         field: {\n//                             name: 'TYPE',\n//                             value: 'CO2'\n//                               }\n//                          },\n//                         children: [\n//                         {\n//                             blockType: 'break_apart',\n//                             fields: {}\n//                         },\n//                         {\n//                             blockType: 'produce_o2',\n//                             fields: {}\n//                         },\n//                         {\n//                             blockType: 'addCounter',\n//                             fields: {}\n//                         },\n//                         ]\n//                         }\n//                     ]\n//                 },\n//                 {\n//                     blockType: 'produce_glucose',\n//                         fields: {}\n//                 },\n//             ],\n//             'contextData': {\n//                 'CHANGED': false\n//             },\n//             'contentXml': ''\n//         };\n//         // define unpacked blocks and default values\n//         this.data = JSON.stringify(dataObj);\n//     },\n//     onchange: function(){\n//         if (this.getInput('EXPANDED_STATEMENT')) {\n//             const dataObj = JSON.parse(this.data);\n//             let count = 0;\n//             for (let child of this.getChildren()){\n//               if (child.getSurroundParent() === this) {\n//                 if(count === 0){\n//                     dataObj.contentXml = Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n//                 }\n//                 else{\n//                     dataObj.contentXml += Blockly.Xml.domToText(Blockly.Xml.blockToDom(child));\n//                 }\n//                 ++count;\n//               }\n//             }\n//             this.data = JSON.stringify(dataObj);\n//         }\n//     }\n// };\n\nBlockly.defineBlocksWithJsonArray([\n{\n    // Properties Blocks\n    // Create without Mutation\n    \"type\": \"create_particles1\",\n    \"message0\": \"create  %1 %2 particles %3\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"water\",\n                    \"WATER\"\n                ],\n                [\n                    \"ink\",\n                    \"INK\"\n                ]\n            ]\n        },\n        {\n            \"type\": \"field_slider\",\n            \"name\": \"PARTICLE_NUM\",\n            \"value\": 100,\n            \"min\": 0,\n            \"max\": 500\n        },\n        {\n            \"type\": \"input_dummy\",\n            \"name\": \"EMPTY\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_blocks\"\n},\n{\n    \"type\": \"set_speed\",\n    \"message0\": \"set speed %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"SPEED\",\n            \"options\": [\n                [\n                    \"zero\",\n                    \"ZERO\"\n                ],\n                [\n                    \"low\",\n                    \"PHOTOLOW\"\n                ],\n                [\n                    \"medium\",\n                    \"PHOTOMEDIUM\"\n                ],\n                [\n                    \"high\",\n                    \"PHOTOHIGH\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"set_type\",\n    \"message0\": \"set type %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"water\",\n                    \"WATER\"\n                ],\n                [\n                    \"ink\",\n                    \"INK\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\":\"set_mass\",\n    \"message0\": \"set mass %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"MASS\",\n            \"options\": [\n                [\n                    \"light\",\n                    \"LIGHT\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"heavy\",\n                    \"HEAVY\"\n                ]\n            ]\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n    \"tooltip\": \"pick a value between 0 and 5\",\n},\n{\n    \"type\":\"set_color\",\n    \"message0\": \"set color %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"COLOR\",\n            \"options\": [\n                [\n                    \"red\",\n                    \"RED\"\n                ],\n                [\n                    \"orange\",\n                    \"ORANGE\"\n                ],\n                [\n                    \"yellow\",\n                    \"YELLOW\"\n                ],\n                [\n                    \"green\",\n                    \"GREEN\"\n                ],\n                [\n                    \"blue\",\n                    \"BLUE\"\n                ],\n                [\n                    \"cyan\",\n                    \"CYAN\"\n                ],\n                [\n                    \"violet\",\n                    \"VIOLET\"\n                ],\n                [\n                    \"gray\",\n                    \"GRAY\"\n                ],\n                [\n                    \"black\",\n                    \"BLACK\"\n                ],\n                [\n                    \"brown\",\n                    \"BROWN\"\n                ]\n            ]\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"set_size\",\n    \"message0\": \"set size %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"SIZE\",\n            \"options\": [\n                [\n                    \"small\",\n                    \"SMALL\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"big\",\n                    \"BIG\"\n                ]\n            ]\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n// {\n//     \"type\": \"break_apart\",\n//     \"message0\": \"break %1 apart\",\n//     \"args0\": [\n//         {\n//             \"type\": \"field_dropdown\",\n//             \"name\": \"TYPE\",\n//             \"options\": [\n//                 [\n//                     \"co2\",\n//                     \"CO2\"\n//                 ],\n//                 [\n//                     \"h2o\",\n//                     \"H2O\"\n//                 ]\n//             ]\n//         }\n//     ],\n//     \"previousStatement\": null,\n//     \"nextStatement\": null,\n//     \"style\": \"particle_border\",\n// },\n{\n    \"type\": \"set_position\",\n    \"message0\": \"set position %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"POSITION\",\n            \"options\": [\n                [\n                    \"random\",\n                    \"RANDOM\"\n                ],\n                [\n                    \"center\",\n                    \"CENTER\"\n                ],\n                [\n                    \"vertical line\",\n                    \"VERTICAL\"\n                ],\n                [\n                    \"horizontal line\",\n                    \"HORIZONTAL\"\n                ],\n                [\n                    \"mouse position\",\n                    \"MOUSE\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"set_light\",\n    \"message0\": \"set light intensity %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"LIGHT\",\n            \"options\": [\n                [\n                    \"lamp intensity\",\n                    \"LAMP\"\n                ],\n                [\n                    \"low\",\n                    \"LOW\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"high\",\n                    \"HIGH\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"create_chloroplasts\",\n    \"message0\": \"create %1 chloroplasts\",\n    \"args0\": [\n        {\n            \"type\": \"field_slider\",\n                    \"name\": \"PARTICLE_NUM\",\n                    \"value\": 3,\n                    \"min\": 1,\n                    \"max\": 6\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"set_heading\",\n    \"message0\": \"set heading %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"HEADING\",\n            \"options\": [\n                [\n                    \"random\",\n                    \"RANDOM\"\n                ],\n                [\n                    \"up\",\n                    \"UP\"\n                ],\n                [\n                    \"right\",\n                    \"RIGHT\"\n                ],\n                [\n                    \"down\",\n                    \"DOWN\"\n                ],\n                [\n                    \"left\",\n                    \"LEFT\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_border\",\n},\n{\n    \"type\": \"produce\",\n    \"message0\": \"produce %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"PRODUCE\",\n            \"options\": [\n                [\n                    \"o2\",\n                    \"O2\"\n                ],\n                // [\n                //     \"glucose complex\",\n                //     \"GLUCOSECOMPLEX\"\n                // ],\n                [\n                    \"glucose\",\n                    \"GLUCOSE\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\",\n},\n{\n    \"type\": \"break_apart2\",\n    \"message0\": \"break %1 apart\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"BREAK\",\n            \"options\": [\n                [\n                    \"co2\",\n                    \"CO2\"\n                ],\n                [\n                    \"h2o\",\n                    \"H2O\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\",\n},\n{\n    \"type\": \"consume\",\n    \"message0\": \"consume %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"CONSUME\",\n            \"options\": [\n                [\n                    \"co2\",\n                    \"CO2\"\n                ],\n                [\n                    \"h2o\",\n                    \"H2O\"\n                ],\n                [\n                    \"glucose complexes\",\n                    \"GLUCOSECOMPLEX\"\n                ],\n                [\n                    \"light energy\",\n                    \"LIGHTENERGY\"\n                ]\n            ]\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\",\n},\n// Action Blocks\n{\n    \"type\": \"move\",\n    \"message0\": \"move\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n{\n    \"type\": \"break_apart\",\n    \"message0\": \"break molecules apart\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n{\n    \"type\": \"produce_o2\",\n    \"message0\": \"produce o2\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n{\n    \"type\": \"create_energy\",\n    \"message0\": \"create light energy\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"particle_blocks\"\n},\n{\n    \"type\": \"addCounter\",\n    \"message0\": \"add 1 to counter\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n{\n    \"type\": \"zeroCounter\",\n    \"message0\": \"set counter to 0\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n\n{\n    \"type\": \"produce_glucose\",\n    \"message0\": \"produce glucose\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n{\n    // Collision without Mutation\n    \"type\": \"collision1\",\n    \"message0\": \"interact %1\",\n    \"args0\": [\n        {\n            \"type\": \"input_dummy\",\n            \"name\": \"EMPTY\"\n        }\n    ],\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_border\"\n},\n{\n    \"type\": \"bounce_off\",\n    \"message0\": \"bounce off\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_blocks\"\n},\n{\n    \"type\": \"erase\",\n    \"message0\": \"erase particles\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_blocks\"\n},\n{\n    \"type\": \"attach\",\n    \"message0\": \"attach particles\",\n    \"inputsInline\": true,\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"behavior_blocks\"\n},\n// Control Blocks\n{\n    \"type\": \"ask_each_particle\",\n    \"message0\": \"ask %1 %2 %3\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"all molecules\",\n                    \"ALL\"\n                ],\n                [\n                    \"chloroplasts\",\n                    \"CHLOROPLASTS\"\n                ],\n                [\n                    \"light energy\",\n                    \"energy\"\n                ],\n                [\n                    \"co2 molecules\",\n                    \"CO2\"\n                ],\n                [\n                    \"h2o molecules\",\n                    \"H2O\"\n                ],\n                [\n                    \"o2 molecules\",\n                    \"O2\"\n                ],\n                [\n                    \"glucose molecules\",\n                    \"GLUCOSE\"\n                ]\n            ]\n        },\n        {\n            \"type\": \"input_dummy\"\n        },\n        {\n            \"type\": \"input_statement\",\n            \"name\": \"ASK_EACH\"\n        }\n    ],\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"style\": \"control_blocks\"\n},\n{\n    \"type\": \"temperature\",\n    \"message0\": \"temperature is %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TEMP\",\n            \"options\": [\n                [\n                    \"high\",\n                    \"HIGH\"\n                ],\n                [\n                    \"medium\",\n                    \"MEDIUM\"\n                ],\n                [\n                    \"low\",\n                    \"LOW\"\n                ],\n                [\n                    \"zero\",\n                    \"ZERO\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"control_blocks\",\n},\n{\n    \"type\": \"inside\",\n    \"message0\": \"%1 is inside\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"co2\",\n                    \"CO2MOLECULE\"\n                ],\n                [\n                    \"h2o\",\n                    \"H2OMOLECULE\"\n                ],\n                [\n                    \"light energy\",\n                    \"ENERGYMOLECULE\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"control_blocks\",\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n},\n{\n    \"type\": \"counter\",\n    \"message0\": \"counter is %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"NUMBER\",\n            \"options\": [\n                [\n                    \"1\",\n                    \"1\"\n                ],\n                [\n                    \"2\",\n                    \"2\"\n                ],\n                [\n                    \"3\",\n                    \"3\"\n                ],\n                [\n                    \"4\",\n                    \"4\"\n                ],\n                [\n                    \"5\",\n                    \"5\"\n                ],\n                [\n                    \"6\",\n                    \"6\"\n                ],\n                [\n                    \"changed\",\n                    \"CHANGED\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"control_blocks\",\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n},\n{\n    \"type\": \"touching_dropdown\",\n    \"message0\": \"touching %1\",\n    \"args0\": [\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"TYPE\",\n            \"options\": [\n                [\n                    \"any molecule\",\n                    \"ANYMOLECULE\"\n                ],\n                [\n                    \"h2o molecule\",\n                    \"H2OMOLECULE\"\n                ],\n                [\n                    \"co2 molecule\",\n                    \"CO2MOLECULE\"\n                ],\n                [\n                    \"o2 molecule\",\n                    \"O2MOLECULE\"\n                ],\n                [\n                    \"wall\",\n                    \"WALL\"\n                ]\n            ]\n        }\n    ],\n    \"output\": \"Boolean\",\n    \"style\": \"control_blocks\",\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n}]);\n\n// GEN BLOCKS\n// Setup blocks\nnetlogoGenerator['set'] = function (block) {\n    const statement_members = netlogoGenerator.statementToCode(block, 'SET');\n    const code = 'to blocks-set\\n' +\n        netlogoGenerator.INDENT + 'setup\\n' +\n        statement_members +\n        netlogoGenerator.INDENT + 'reset-ticks\\n' +\n        'end\\n';\n    return code;\n};\n\nnetlogoGenerator['go'] = function (block) {\n    const statement_members = netlogoGenerator.statementToCode(block, 'GO');\n    const code = 'to blocks-go\\n' +\n        // netlogoGenerator.INDENT + 'mouse_click\\n' +\n        netlogoGenerator.INDENT + 'go\\n' +\n        statement_members +\n        netlogoGenerator.INDENT + 'tick-advance tick-delta\\n' +\n        netlogoGenerator.INDENT + 'display\\n' +\n        netlogoGenerator.INDENT + 'ask particles with [particle-type = \"chloroplasts\"] [\\n' +\n        netlogoGenerator.INDENT + 'set sugar-count-old sugar-count\\n' +\n        netlogoGenerator.INDENT + ']\\n' +\n        'end\\n';\n    return code;\n};\n\nnetlogoGenerator['mouse_click'] = function (block) {\n    let statement_members = netlogoGenerator.INDENT + 'set mouse-up? false\\n' + netlogoGenerator.statementToCode(block, 'MOUSE');\n\n    let ifContents = 'if mouse-down? \\n[\\n' +\n        statement_members + ']';\n    ifContents = Blockly.JavaScript.prefixLines(ifContents, netlogoGenerator.INDENT);\n\n    let elseContents = '[\\n' + netlogoGenerator.INDENT + 'if not mouse-down?\\n' + netlogoGenerator.INDENT + '[\\n' + netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set mouse-up? true\\n' + netlogoGenerator.INDENT + ']\\n' + ']\\n'\n    elseContents = Blockly.JavaScript.prefixLines(elseContents, netlogoGenerator.INDENT);\n    let code = 'ifelse mouse-up? != false' + '\\n[\\n' + ifContents + '\\n]\\n';\n\n    code = Blockly.JavaScript.prefixLines(\n        code, netlogoGenerator.INDENT) + elseContents;\n\n    return 'to mouse_click\\n' + code + 'end\\n';\n};\n\n// If/elseif/else condition\nnetlogoGenerator['controls_if'] = function (block) {\n    let n = 0;\n    let usedTouching;\n    let code = '', branchCode, conditionCode;\n\n    if (block.inputList.length === 2) {\n        code += 'if ';\n    }\n    else {\n        code += '(ifelse ';\n    }\n\n    do {\n        conditionCode = netlogoGenerator.valueToCode(block, 'IF' + n,\n            netlogoGenerator.ORDER_NONE) || 'false';\n        usedTouching = conditionCode.includes('(count collision-enemies > 0) and (collision-candidate != nobody) and (speed > 0 or [speed] of collision-candidate > 0)');\n        branchCode = usedTouching ? (netlogoGenerator.INDENT + 'set collision-flag 1\\n' + netlogoGenerator.statementToCode(block, 'DO' + n)) : (netlogoGenerator.INDENT + 'set collision-flag 0\\n') + netlogoGenerator.statementToCode(block, 'DO' + n);\n        if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n            branchCode = Blockly.JavaScript.prefixLines(\n                Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n                    block), netlogoGenerator.INDENT) + branchCode;\n        }\n        code += (n > 0 ? '\\n' : '') + conditionCode + '\\n[\\n' + branchCode + ']';\n        n++;\n    } while (block.getInput('IF' + n));\n\n    if (block.getInput('ELSE') || Blockly.JavaScript.STATEMENT_SUFFIX) {\n        branchCode = netlogoGenerator.statementToCode(block, 'ELSE');\n        if (Blockly.JavaScript.STATEMENT_SUFFIX) {\n            branchCode = Blockly.JavaScript.prefixLines(\n                Blockly.JavaScript.injectId(Blockly.JavaScript.STATEMENT_SUFFIX,\n                    block), netlogoGenerator.INDENT) + branchCode;\n        }\n        code += '\\n[\\n' + branchCode + ']';\n    }\n\n    (block.inputList.length === 2) ? code += '\\n' : code += ')\\n';\n    usedTouching ? code += 'set collision-flag 0\\n' : code +='';\n\n    return code;\n};\n\n\n// DIFFUSION BLOCK DEFINITIONS\n\n// Properties Blocks\n// Create Particles w/ mutation\nnetlogoGenerator['create_particles'] = function (block) {\n    const root = block.getRootBlock().type;\n    const dataObj = JSON.parse(block.data);\n    const num = block.getFieldValue('PARTICLE_NUM');\n    const type = block.getFieldValue('TYPE')\n    let parameters;\n    let prefix = \n    'set particle-type \"' + type.toLowerCase() + '\"\\n' +\n    'set first-time 1\\n' +\n    'set last-collision nobody\\n' +\n    'set collision-flag 0\\n' +\n    'set size 16\\n' +\n    'set photo-candidate-CO2 nobody\\n' +\n    'set photo-candidate-H2O nobody\\n' +\n    'set ismoving? true\\n' +\n    'if particle-type = \"co2\"[\\n' +\n    'set shape \"co2\"\\n' +\n    ']\\n'+\n    'if particle-type = \"h2o\"[\\n' +\n    'set shape \"h2o\"\\n' +\n    ']\\n'+\n    'set kill 0\\n' +\n    'set color blue\\n' +\n    'set mass 3\\n' +\n    'set collision-hatching 0\\n';\n    let suffix =\n    'if mouse-down? \\n[\\n' +\n    netlogoGenerator.INDENT + 'drop-with-mouse ' + num + '\\n' +\n    ']';\n    if (!dataObj.contextData.CHANGED){\n        parameters = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        for(let descendant of xmlblock.getDescendants()){\n            if(root === 'mouse_click' && descendant.type === 'set_position'){\n                descendant.dispose(true);\n            }\n        }\n        parameters = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    let code = 'create-particles ' + num + '\\n[\\n' + Blockly.JavaScript.prefixLines(prefix, netlogoGenerator.INDENT) + Blockly.JavaScript.prefixLines(parameters, netlogoGenerator.INDENT) + Blockly.JavaScript.prefixLines(suffix, netlogoGenerator.INDENT) + '\\n]\\n';\n    return code;\n};\n\nnetlogoGenerator['create_energy'] = function () {\n    const code = \n    'if temperature > random 100 [ \\n' +\n    'create-particles 1 [\\n'+\n    'set particle-type \"energy\"\\n' +\n    'set first-time 1\\n' +\n    'set last-collision nobody\\n' +\n    'set collision-flag 0\\n' +\n    'set size 16\\n' +\n    'set color 45 \\n'+\n    'set photo-candidate-CO2 nobody\\n' +\n    'set photo-candidate-H2O nobody\\n' +\n    'set ismoving? true\\n' +\n    'setxy -100 (100 - random 200)\\n' +\n    'set shape \"ray\"\\n' +\n    'set heading 90\\n' +\n    'set speed 35\\n' +\n    'set kill 0\\n' +\n    'set color yellow\\n' +\n    'set mass 3\\n' +\n    'set collision-hatching 0\\n' +\n    ']\\n]\\n';\n    return code;\n};\n\n// netlogoGenerator['create_energy'] = function (block) {\n//     const root = block.getRootBlock().type;\n//     const dataObj = JSON.parse(block.data);\n//     // const num = block.getFieldValue('PARTICLE_NUM');\n//     // const type = block.getFieldValue('TYPE')\n//     let parameters;\n//     let num = 1;\n//     let prefix = \n//     'set particle-type \"energy\"\\n' +\n//     'set first-time 1\\n' +\n//     'set last-collision nobody\\n' +\n//     'set collision-flag 0\\n' +\n//     'set size 10\\n' +\n//     'set color 45 \\n'+\n//     'set photo-candidate-CO2 nobody\\n' +\n//     'set photo-candidate-H2O nobody\\n' +\n//     'set ismoving? true\\n' +\n//     'setxy -100 (100 - random 200)\\n' +\n//     'set shape \"ray\"\\n' +\n//     'set heading 90\\n' +\n//     'set kill 0\\n' +\n//     'set color yellow\\n' +\n//     'set mass 3\\n' +\n//     'set collision-hatching 0\\n';\n//     let suffix =\n//     'if mouse-down? \\n[\\n' +\n//     netlogoGenerator.INDENT + 'drop-with-mouse ' + num + '\\n' +\n//     ']';\n//     if (!dataObj.contextData.CHANGED){\n//         parameters = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n//     }\n//     else{\n//         let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n//         for(let descendant of xmlblock.getDescendants()){\n//             if(root === 'mouse_click' && descendant.type === 'set_position'){\n//                 descendant.dispose(true);\n//             }\n//         }\n//         parameters = netlogoGenerator.blockToCode(xmlblock);\n//         xmlblock.dispose();\n//     }\n//     let code = \n//     'if light-intensity > random 100 [ \\n' +\n//     'create-particles ' + num + '\\n[\\n' + Blockly.JavaScript.prefixLines(prefix, netlogoGenerator.INDENT) + Blockly.JavaScript.prefixLines(parameters, netlogoGenerator.INDENT) + Blockly.JavaScript.prefixLines(suffix, netlogoGenerator.INDENT) + '\\n]\\n'+\n//     ']\\n';\n//     return code;\n// };\n\n// Create Particles no mutation\nnetlogoGenerator['create_particles1'] = function (block) {\n    const num = block.getFieldValue('PARTICLE_NUM');\n    const parameters =\n        'set particle-type \"' + block.getFieldValue('TYPE').toLowerCase() + '\" \\n' +\n        'set speed ' + netlogoGenerator.SPEED['TEMP'] + '\\n' +\n        'set mass ' + netlogoGenerator.MASS['MEDIUM'] + '\\n' +\n        'set energy (.5 * mass * speed * speed)\\n' +\n        'set first-time 1\\n' +\n        'set last-collision nobody\\n' +\n        'set collision-flag 0 \\n' +\n        'set ready? false \\n' +\n        'set collision-hatching 0\\n' +\n        'set color ' + (block.getFieldValue('TYPE') === 'WATER' ? 'cyan' : 'red') + '\\n' +\n        'set size ' + netlogoGenerator.SIZE['MEDIUM'] + '\\n' +\n        'setxy ' + netlogoGenerator.POSITION['RANDOM'] + '\\n' +\n        'set random-wiggle 40\\n' +\n        'set heading ' + netlogoGenerator.HEADING['RANDOM'] + '\\n' +\n        'if mouse-down? \\n[\\n' +\n        netlogoGenerator.INDENT + 'drop-with-mouse ' + num + '\\n' +\n        ']';\n    const code = 'create-particles ' + num + '\\n[\\n' + Blockly.JavaScript.prefixLines(parameters, netlogoGenerator.INDENT) + '\\n]\\n';\n    return code;\n};\n\n// Set Particle Speed\nnetlogoGenerator['set_speed'] = function (block) {\n    let speed = netlogoGenerator.SPEED[block.getField('SPEED').selectedOption_[1]];\n    let code = 'set speed ' + speed + '\\n';\n    return code;\n};\n\n// Set Particle Type\nnetlogoGenerator['set_type'] = function (block) {\n    let type = block.getField('TYPE').selectedOption_[0];\n    let code = 'set particle-type \"' + type + '\"\\n';\n    return code;\n};\n\n// Set Particle Mass\nnetlogoGenerator['set_mass'] = function (block) {\n    let mass = netlogoGenerator.MASS[block.getField('MASS').selectedOption_[1]];\n    let code = 'set mass ' + mass + '\\n' +\n        'set energy (.5 * mass * speed * speed)\\n';\n    return code;\n};\n\n// Set Particle Color\nnetlogoGenerator['set_color'] = function (block) {\n    let color = block.getField('COLOR').selectedOption_[0]\n    let code = 'set color ' + color + '\\n';\n    return code;\n};\n\n// Set Particle Size\nnetlogoGenerator['set_size'] = function (block) {\n    let size = netlogoGenerator.SIZE[block.getField('SIZE').selectedOption_[1]];\n    let code = 'set size ' + size + '\\n';\n    return code;\n};\n\n// Set Particle Postion\nnetlogoGenerator['set_position'] = function (block) {\n    const position = netlogoGenerator.POSITION[block.getField('POSITION').selectedOption_[1]];\n    const field = block.getField('POSITION').selectedOption_[1];\n    let code = (field !== 'MOUSE') ? ('setxy ' + position + '\\n') : (position + '\\n');\n    return code;\n};\n\nnetlogoGenerator['set_light'] = function (block) {\n    let light = netlogoGenerator.LIGHT[block.getField('LIGHT').selectedOption_[1]];\n    let code = 'set light-intensity ' + light + '\\n';\n    return code;\n};\n\n// //break apart to go inside ask chroloplast\n// netlogoGenerator['break_apart'] = function (block) {\n//     // const type = block.getFieldValue('TYPE');\n//     //  let code; \n//     //   if (type.toLowerCase() === \"co2\"){\n//     //     code = ';TYPE = co2\\n';\n//     // }\n//     // if (type.toLowerCase() === \"h2o\"){\n//     //     code = ';TYPE = h20\\n';\n//     // }\n//     let code =\n//         'break-apart\\n'+\n//     '\\n';\n     \n//     return code;\n// };\n\nnetlogoGenerator['break_apart'] = function () {\n    const code = 'break-apart\\n';\n    return code;\n};\n\nnetlogoGenerator['produce_o2'] = function () {\n    const code = 'produce-o2\\n';\n    return code;\n};\nnetlogoGenerator['produce_glucose'] = function () {\n    const code = 'produce-glucose\\n';\n    return code;\n};\n\nnetlogoGenerator['addCounter'] = function () {\n    const code = 'set sugar-count sugar-count + 1\\n';\n    return code;\n};\nnetlogoGenerator['zeroCounter'] = function () {\n    const code = 'set sugar-count 0\\n';\n    return code;\n};\n\n//create chloroplasts\nnetlogoGenerator['create_chloroplasts'] = function (block) {\n    const num = block.getFieldValue('PARTICLE_NUM');\n    let code = 'create-chloroplasts ' + num + '[\\n' +    \n     'set particle-type \"chloroplasts\"\\n' +\n     'set size 50\\n' +\n     'set ismoving? false\\n' +\n     'set shape \"circle\"\\n' +\n     'set color [0 125 0 75]\\n' +\n     'set mass 3 \\n'+\n     'set photo-candidate-H2O nobody \\n'+\n     'set photo-candidate-CO2 nobody \\n'+\n     'set photo-candidate-ENERGY nobody \\n' +\n     'set heading random-float 360\\n'+\n     'setxy (- 0.9 * max-pxcor + random-float (0.9 * max-pxcor * 2)) -0.9 * max-pycor + random-float (0.9 * max-pycor * 2)' +\n     ']\\n'+\n     '\\n';\n     \n     //  'set first-time 1\\n' +\n    //  'set last-collision nobody\\n' +\n    //  'set collision-flag 0\\n' +\n  \n    //  'if particle-type = \"co2\"[\\n' +\n    //  ']\\n'+\n    //  'if particle-type = \"h2o\"[\\n' +\n    //  'set shape \"h2o\"\\n' +\n    //  ']\\n'+\n    //  'set mass 3\\n' +\n    //  'set speed 10\\n' +\n    //  'set collision-hatching 0\\n';\n\n    // 'setxy 0 0\\n' +\n    \n    \n    return code;\n};\n\n// Set Particle Heading\nnetlogoGenerator['set_heading'] = function (block) {\n    let heading = netlogoGenerator.HEADING[block.getField('HEADING').selectedOption_[1]];\n    let code = 'set random-wiggle 40\\nset heading ' + heading + '\\n';\n    return code;\n};\n\nnetlogoGenerator['produce'] = function (block) {\n    let produce = netlogoGenerator.PRODUCE[block.getField('PRODUCE').selectedOption_[1]];\n    let code = produce + '\\n';\n    return code;\n};\n\nnetlogoGenerator['break_apart2'] = function (block) {\n    let break_molecule = netlogoGenerator.BREAK[block.getField('BREAK').selectedOption_[1]];\n    let code = break_molecule + '\\n';\n    return code;\n};\n\nnetlogoGenerator['consume'] = function (block) {\n    let consume = netlogoGenerator.CONSUME[block.getField('CONSUME').selectedOption_[1]];\n    let type = block.getFieldValue('CONSUME');\n    let code;\n\n        if(type.includes('GLUCOSECOMPLEX')){\n            code = 'ask particles with [chloroplasts-candidate = myself and particle-type = ' + consume + '] [set kill 1] \\n';\n        }\n        else{\n            code = 'ask one-of particles with [chloroplasts-candidate = myself and particle-type = ' + consume + '] [set kill 1] \\n';\n        }\n\n    return code;\n};\n\n\n// Action Blocks\n// Move\nnetlogoGenerator['move'] = function () {\n    const code = 'turtle-forward\\n';\n    return code;\n};\n\n// Collide with Mutation\nnetlogoGenerator['interact'] = function (block) {\n    let code ;\n    const dataObj = JSON.parse(block.data);\n    if (!dataObj.contextData.CHANGED){\n        code = getNLCodeFromUnpackBlocks(block.type, dataObj.unpackBlocks, this.workspace)\n    }\n    else{\n        let xmlblock = Blockly.Xml.domToBlock(Blockly.Xml.textToDom(JSON.parse(block.data).contentXml), this.workspace);\n        code = netlogoGenerator.blockToCode(xmlblock);\n        xmlblock.dispose();\n    }\n    return code;\n};\n\n// Collide w/o Mutation\nnetlogoGenerator['collision1'] = function () {\n    const code =\n        'bounce-wall\\n' +\n        'check-for-collision\\n';\n    return code;\n};\n\n// Bounce Off\nnetlogoGenerator['bounce_off'] = function () {\n    let code = \n    'ifelse collision-flag = 1\\n[\\n' + \n    netlogoGenerator.INDENT + 'collide-with collision-candidate\\n'+\n    netlogoGenerator.INDENT +'set last-collision collision-candidate\\n'+\n    netlogoGenerator.INDENT + 'ask collision-candidate [ set last-collision myself ]\\n]\\n[\\n' +\n    netlogoGenerator.INDENT + 'if abs[pxcor] of patch-ahead 1 >= max-pxcor - ( size )\\n' +\n    netlogoGenerator.INDENT + '[ set heading (- heading) ]\\n' + \n    netlogoGenerator.INDENT + 'if abs [pycor] of patch-ahead 1 >= max-pycor - ( size )\\n' + \n    netlogoGenerator.INDENT + '[ set heading(180 - heading) ]\\n]\\n';\n    return code;\n};\n\n// Erase Particles\nnetlogoGenerator['erase'] = function () {\n    const code =\n        'ifelse collision-flag = 1\\n[\\n' +\n        netlogoGenerator.INDENT + 'set last-collision collision-candidate\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate [ set last-collision myself ]\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate [ die ]\\n' +\n        ']\\n' +\n        '[\\n' +\n        netlogoGenerator.INDENT + 'die' +\n        '\\n]\\n';\n    return code;\n};\n\n// Attach Particles\nnetlogoGenerator['attach'] = function () {\n    const code =\n        'ifelse collision-flag = 1 \\n[\\n' +\n        netlogoGenerator.INDENT + 'set last-collision collision-candidate\\n' +\n        netlogoGenerator.INDENT + 'let heading-candidate heading\\n' +\n        netlogoGenerator.INDENT + 'ask collision-candidate\\n' + \n        netlogoGenerator.INDENT + '[\\n' +\n        netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set last-collision myself\\n' +\n        netlogoGenerator.INDENT + netlogoGenerator.INDENT + 'set heading heading-candidate\\n' + \n        netlogoGenerator.INDENT + ']\\n' +\n        ']\\n[\\n' +\n        netlogoGenerator.INDENT + 'set speed 0\\n' +\n        ']\\n';\n    return code;\n};\n\n\n// Control Blocks\n// Ask Particles\nnetlogoGenerator['ask_each_particle'] = function (block) {\n    const particleName = block.getField('TYPE').value_ || 'CO2';\n    const parameter = particleName === 'ALL' ? ' with [particle-type != \"chloroplasts\"] ' : ' with [particle-type = \"' + particleName.toLowerCase() + '\"]';\n    const statement_members = netlogoGenerator.statementToCode(block, 'ASK_EACH');\n    let code = 'ask turtles' + parameter + '\\n' + '[\\n' + statement_members + ']\\n';\n    return code;\n};\n\n// Check Environment Temperature\nnetlogoGenerator['temperature'] = function (block) {\n    switch (block.getFieldValue('TEMP')) {\n        case 'HIGH':\n            return ['temperature > 35', netlogoGenerator.ORDER_NONE];\n        case 'MEDIUM':\n            return ['temperature < 36 and temperature > 14', netlogoGenerator.ORDER_NONE];\n        case 'LOW':\n            return ['temperature < 15 and temperature > 0', netlogoGenerator.ORDER_NONE];\n        case 'ZERO':\n            return ['temperature = 0', netlogoGenerator.ORDER_NONE];\n    }\n};\n\n// netlogoGenerator['inside'] = function (block) {\n//     const type = block.getFieldValue('TYPE');\n//     let code;\n//     let particleType;\n//     let particleTYPE;\n\n\n//     if(type.includes('h2o')){\n//         particleType = \"H2O\";\n//     }\n//     if(type.includes('co2')){\n//         particleType = \"CO2\";\n//     }\n//     if(type.includes('CO2')){\n//         particleTYPE = \"CO2\";\n//     }\n//     if(type.includes('H2O')){\n//         particleTYPE = \"H2O\";\n//     }\n//     if(type.includes('CO2')){\n//         particleType = \"co2\";\n//     }\n//     if(type.includes('H2O')){\n//         particleType = \"h2o\";\n//     }\n\n//     code =\n\n    \n//     ' photo-candidate-' + particleTYPE + ' = nobody [ \\n' +\n//     '  set photo-candidate-' + particleTYPE + ' one-of other particles in-radius ((size / 2) - 1.5) with [ particle-type = \"' + particleType + '\"] \\n' +\n//     '] \\n' +\n//     '\\n';\n\n//     return [code, netlogoGenerator.ORDER_NONE];\n// };\n\n\n\n// Detect if touching\nnetlogoGenerator['touching_dropdown'] = function (block) {\n    const type = block.getFieldValue('TYPE');\n    let code;\n    let particleType;\n    if(type.includes('MOLECULE')){\n        if(type.includes('ANY')){\n            particleType = 'any';\n        }\n        else{\n            particleType = block.getField('TYPE').selectedOption_[0].replace(' molecule', '');\n        }\n        const particleCondition = particleType != 'any' ? ' and ([particle-type] of collision-candidate = \"' + particleType + '\")' : ''\n        code = '(count collision-enemies > 0) and (collision-candidate != nobody) and (speed > 0 or [speed] of collision-candidate > 0)' + particleCondition\n    }\n    else{\n        code = 'abs [pxcor] of patch-ahead 1 >= max-pxcor - 4 or abs [pycor] of patch-ahead 1 >= max-pycor - 4'\n    }\n    return [code, netlogoGenerator.ORDER_NONE];\n};\n\nnetlogoGenerator['inside'] = function (block) {\n    const type = block.getFieldValue('TYPE');\n    let code;\n    let particleType;\n    let particleTYPE;\n    if(type.includes('CO2'))    {\n        particleTYPE = 'CO2';\n    }\n    if(type.includes('H2O'))    {\n        particleTYPE = 'H2O';\n    } \n    if(type.includes('ENERGY'))    {\n        particleTYPE = 'ENERGY';\n    }\n    if(type.includes('MOLECULE')){\n        if(type.includes('ANY')){\n            particleType = 'any';\n        }\n        else{\n            particleType = block.getField('TYPE').selectedOption_[0].replace(' molecule', '');\n        }\n        const particleCondition = particleType != 'any' ? '(photo-candidate-' + particleTYPE + ' != nobody)' : ''\n        code = particleCondition\n    }\n    else{\n        code = 'abs [pxcor] of patch-ahead 1 >= max-pxcor - 4 or abs [pycor] of patch-ahead 1 >= max-pycor - 4'\n    }\n    return [code, netlogoGenerator.ORDER_NONE];\n};\n\nnetlogoGenerator['counter'] = function (block) {\n    let code;\n    const num = block.getFieldValue('NUMBER');\n    \n    if (num === \"CHANGED\") {\n        code = '(sugar-count != sugar-count-old)'\n    }\n    else {\n        code = 'sugar-count = ' + num\n    }\n    return [code, netlogoGenerator.ORDER_NONE];\n\n};\n\nfunction getNLCodeFromUnpackBlocks(blockType, unpackBlocks, workspace) {\n  const tempBlock = workspace.newBlock(blockType);\n  tempBlock.appendStatementInput('EXPANDED_STATEMENT');\n  traverseBlocks(unpackBlocks, tempBlock.getInput('EXPANDED_STATEMENT').connection, workspace)\n  const code = netlogoGenerator.blockToCode(tempBlock.getInput('EXPANDED_STATEMENT').connection.targetBlock());\n  tempBlock.dispose()\n  return code\n}\n\nfunction traverseBlocks(blockData, parentBlockConnection, workspace) {\n      for (let blockGroup of blockData.reverse()) {\n        // instantiate block\n        const block = workspace.newBlock(blockGroup.blockType);\n        for (let field in blockGroup.fields) {\n            if (block.getField(field)) {\n                block.setFieldValue(blockGroup.fields[field], field)\n            }\n        }\n        // connect block to parent block\n        const blockPreviousConnection = block.previousConnection;\n        if (parentBlockConnection) {\n          parentBlockConnection.connect(blockPreviousConnection);\n        }\n        // add condition block if one exists\n        if (blockGroup.condition) {\n            const conditionBlock = workspace.newBlock(blockGroup.condition.blockType);\n            block.getInput(blockGroup.condition.input).connection.connect(conditionBlock.outputConnection);\n            if (blockGroup.condition.field) {\n                conditionBlock.setFieldValue(blockGroup.condition.field.value, blockGroup.condition.field.name);\n            }\n        }\n        // recursive step - traverse children and connect to parent.\n        // basecase when no children exist\n        if (blockGroup.children) {\n          traverseBlocks(blockGroup.children, block.inputList[1].connection, workspace)\n        }\n      }\n    }\n\n"],"sourceRoot":""}