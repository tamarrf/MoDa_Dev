{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","$container","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","selectedBlockType","blockTypeSort","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","totalNewBlockTypes","init","placeholderKey","$blockTypesColumnContainer","$blockTypeItemsContainer","this","$fieldItemsOuterContainer","children","$blockTypeItems","length","i","$item","blockTypes","BlockType","handle","id","data","addListener","newMatch","match","parseInt","getBlockTypeSettingsModal","DragSort","blockTypeSettingsModal","axis","getFieldTypeInfo","type","addField","addBlockType","show","onSubmit","name","getFieldTypeSettingsHtml","Promise","t","cancel","requestAnimationFrame","select","addItems","namespace","resolve","BlockTypeSettingsModal","reject","setContainer","$nameInputContainer","$nameField","CancelToken","source","$nameErrorList","$handleField","createTextField","token","then","$body","$handleInputContainer","find","response","$handleInput","$handleErrorList","cp","displayError","$cancelBtn","Modal","onFormSubmit","$form","appendTo","$bod","preventDefault","visible","ui","label","instructions","handleGenerator","updateTarget","hide","shake","$nameInput","val","class","maxlength","$buttons","onDeleteClick","confirm","onDelete","$submitBtn","HandleGenerator","startListening","stopListening","ev","$deleteBtn","displayErrors","errors","trim","$errorList","attr","$input","removeClass","addClass","text","$nameHiddenInput","$handleHiddenInput","isMobileBrowser","$fieldSettingsContainer","trigger","fieldSettings","base","$nameLabel","configurator","$nameContainer","$handleLabel","$settingsBtn","fields","selectedField","fieldSort","totalNewFields","onSortChange","field","deselect","insertBefore","$win","$fieldItems","$fieldItem","Field","applySettings","bind","$items","selectedFieldType","initializedFieldTypeSettings","$requiredCheckbox","$typeSelect","$translationSettingsContainer","blockType","showSettings","fieldTypeSettingsTemplates","selfDestruct","$typeSettingsContainer","$widthInput","remove","valueLabel","pct","widthSlider","setTimeout","updateNameLabel","updateHandleLabel","isNew","getDefaultFieldSettings","setFieldType","updateTranslationMethodSettings","getFieldTypeSettings","footHtml","fresh","initUiElements","$settings","appendHeadHtml","headHtml","appendFootHtml","SlidePicker","min","step","width","onChange","insertAfter","settingsHtml","getParsedFieldTypeHtml","html","escapeHtml","prop","$fieldset","detach","fieldTypeOptions","append","catch","isMultiSite","targetPrefix","$translationKeyFormatContainer","createSelectField","replace","RegExp","confirmDelete","required","createTextareaField","createCheckboxField","checked","push","value","options","toggle","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend({\n        fieldTypeInfo: null,\n\n        inputNamePrefix: null,\n        fieldTypeSettingsNamespace: null,\n        inputIdPrefix: null,\n        placeholderKey: null,\n\n        $container: null,\n\n        $blockTypesColumnContainer: null,\n        $fieldsColumnContainer: null,\n        $fieldSettingsColumnContainer: null,\n\n        $blockTypeItemsOuterContainer: null,\n        $blockTypeItemsContainer: null,\n        $fieldItemsContainer: null,\n        $fieldSettingItemsContainer: null,\n\n        $newBlockTypeBtn: null,\n        $newFieldBtn: null,\n\n        blockTypes: null,\n        selectedBlockType: null,\n        blockTypeSort: null,\n        totalNewBlockTypes: 0,\n\n        _fieldTypeSettingsHtml: null,\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n            this.fieldTypeInfo = fieldTypeInfo;\n            this.inputNamePrefix = inputNamePrefix;\n            this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n            this.placeholderKey = placeholderKey;\n\n            this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n            this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n            this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n            this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n            this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n            this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n            this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n            this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n            this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n            this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n            this._fieldTypeSettingsHtml = {};\n\n            // Find the existing block types\n            this.blockTypes = {};\n\n            var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n            for (var i = 0; i < $blockTypeItems.length; i++) {\n                var $item = $($blockTypeItems[i]),\n                    id = $item.data('id');\n\n                this.blockTypes[id] = new BlockType(this, $item);\n\n                // Is this a new block type?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                    this.totalNewBlockTypes = parseInt(newMatch[1]);\n                }\n            }\n\n            this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n            this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n        },\n\n        getFieldTypeInfo: function(type) {\n            for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                if (this.fieldTypeInfo[i].type === type) {\n                    return this.fieldTypeInfo[i];\n                }\n            }\n        },\n\n        addBlockType: function() {\n            this.getBlockTypeSettingsModal();\n\n            this.blockTypeSettingsModal.show();\n\n            this.blockTypeSettingsModal.onSubmit = (name, handle) => {\n                this.totalNewBlockTypes++;\n                var id = 'new' + this.totalNewBlockTypes;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                    '</div>'\n                ).appendTo(this.$blockTypeItemsContainer);\n\n                this.blockTypes[id] = new BlockType(this, $item);\n                this.blockTypes[id].applySettings(name, handle);\n                this.blockTypes[id].select();\n                this.blockTypes[id].addField();\n\n                this.blockTypeSort.addItems($item);\n            };\n        },\n\n        addFieldToSelectedBlockType: function() {\n            if (this.selectedBlockType) {\n                this.selectedBlockType.addField();\n            }\n        },\n\n        getBlockTypeSettingsModal: function() {\n            if (!this.blockTypeSettingsModal) {\n                this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n            }\n\n            return this.blockTypeSettingsModal;\n        },\n\n        getFieldTypeSettingsHtml: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                    resolve(this._fieldTypeSettingsHtml[type]);\n                    return;\n                }\n\n                // Cancel the current request\n                if (this._cancelToken) {\n                    this._ignoreFailedRequest = true;\n                    this._cancelToken.cancel();\n                    Garnish.requestAnimationFrame(() => {\n                        this._ignoreFailedRequest = false;\n                    });\n                }\n\n                // Create a cancel token\n                this._cancelToken = axios.CancelToken.source();\n\n                Craft.sendActionRequest('POST', 'fields/render-settings', {\n                    cancelToken: this._cancelToken.token,\n                    data: {\n                        type: type,\n                        namespace: this.fieldTypeSettingsNamespace,\n                    }\n                }).then(response => {\n                    this._fieldTypeSettingsHtml[type] = response.data;\n                    resolve(response.data);\n                }).catch(() => {\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                    reject();\n                });\n            });\n        },\n    });\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend({\n        init: function() {\n            this.base();\n\n            this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n            this.setContainer(this.$form);\n\n            this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n            let $nameField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n            }).appendTo(this.$body);\n            let $nameInputContainer = $nameField.find('.input');\n            this.$nameInput = $nameInputContainer.find('.text');\n            this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n            let $handleField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                class: 'code',\n                maxlength: 47,\n            }).appendTo(this.$body);\n            let $handleInputContainer = $handleField.find('.input');\n            this.$handleInput = $handleInputContainer.find('.text');\n            this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n            this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n            this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n            }).appendTo(this.$buttons);\n\n            this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n            this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n        },\n\n        onFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent multi form submits with the return key\n            if (!this.visible) {\n                return;\n            }\n\n            if (this.handleGenerator.listening) {\n                // Give the handle a chance to catch up with the input\n                this.handleGenerator.updateTarget();\n            }\n\n            // Basic validation\n            var name = Craft.trim(this.$nameInput.val()),\n                handle = Craft.trim(this.$handleInput.val());\n\n            if (!name || !handle) {\n                Garnish.shake(this.$form);\n            } else {\n                this.hide();\n                this.onSubmit(name, handle);\n            }\n        },\n\n        onDeleteClick: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                this.hide();\n                this.onDelete();\n            }\n        },\n\n        show: function(name, handle, errors) {\n            this.$nameInput.val(typeof name === 'string' ? name : '');\n            this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n            if (!handle) {\n                this.handleGenerator.startListening();\n            } else {\n                this.handleGenerator.stopListening();\n            }\n\n            if (typeof name === 'undefined') {\n                this.$deleteBtn.addClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Create'));\n            } else {\n                this.$deleteBtn.removeClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Apply'));\n            }\n\n            this.displayErrors('name', (errors ? errors.name : null));\n            this.displayErrors('handle', (errors ? errors.handle : null));\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n\n            this.base();\n        },\n\n        displayErrors: function(attr, errors) {\n            var $input = this['$' + attr + 'Input'],\n                $errorList = this['$' + attr + 'ErrorList'];\n\n            $errorList.children().remove();\n\n            if (errors) {\n                $input.addClass('error');\n                $errorList.show();\n\n                for (var i = 0; i < errors.length; i++) {\n                    $('<li/>').text(errors[i]).appendTo($errorList);\n                }\n            } else {\n                $input.removeClass('error');\n                $errorList.hide();\n            }\n        }\n    });\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend({\n        configurator: null,\n        id: null,\n        errors: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n        $nameHiddenInput: null,\n        $handleHiddenInput: null,\n        $settingsBtn: null,\n        $fieldItemsContainer: null,\n        $fieldSettingsContainer: null,\n\n        fields: null,\n        selectedField: null,\n        fieldSort: null,\n        totalNewFields: 0,\n        fieldSettings: null,\n\n        init: function(configurator, $item) {\n            this.configurator = configurator;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n            this.errors = this.$item.data('errors');\n\n            this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n            this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n            this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n            this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n            this.$settingsBtn = this.$item.find('.settings');\n\n            // Find the field items container if it exists, otherwise create it\n            this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldItemsContainer.length) {\n                this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n            }\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldSettingsContainer.length) {\n                this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n            }\n\n            // Find the existing fields\n            this.fields = {};\n\n            var $fieldItems = this.$fieldItemsContainer.children();\n\n            for (var i = 0; i < $fieldItems.length; i++) {\n                var $fieldItem = $($fieldItems[i]),\n                    id = $fieldItem.data('id');\n\n                this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                // Is this a new field?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewFields) {\n                    this.totalNewFields = parseInt(newMatch[1]);\n                }\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n            this.fieldSort = new Garnish.DragSort($fieldItems, {\n                handle: '.move',\n                axis: 'y',\n                onSortChange: () => {\n                    // Adjust the field setting containers to match the new sort order\n                    for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                        var $item = $(this.fieldSort.$items[i]),\n                            id = $item.data('id'),\n                            field = this.fields[id];\n\n                        field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                    }\n                },\n            });\n        },\n\n        select: function() {\n            if (this.configurator.selectedBlockType === this) {\n                return;\n            }\n\n            if (this.configurator.selectedBlockType) {\n                this.configurator.selectedBlockType.deselect();\n            }\n\n            this.configurator.$fieldsColumnContainer.removeClass('hidden');\n            this.$fieldItemsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.configurator.selectedBlockType = this;\n            Garnish.$win.trigger('resize');\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldsColumnContainer.addClass('hidden');\n            this.$fieldItemsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.configurator.selectedBlockType = null;\n\n            if (this.selectedField) {\n                this.selectedField.deselect();\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        showSettings: function() {\n            var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n            blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n            blockTypeSettingsModal.onSubmit = this.applySettings.bind(this);\n            blockTypeSettingsModal.onDelete = this.selfDestruct.bind(this);\n        },\n\n        applySettings: function(name, handle) {\n            if (this.errors) {\n                this.errors = null;\n                this.$settingsBtn.removeClass('error');\n            }\n\n            this.$nameLabel.text(name);\n            this.$handleLabel.text(handle);\n            this.$nameHiddenInput.val(name);\n            this.$handleHiddenInput.val(handle);\n        },\n\n        addField: function() {\n            this.totalNewFields++;\n            var id = 'new' + this.totalNewFields;\n\n            var $item = $(\n                '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                '<div class=\"mci-name\">' +\n                '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                '<div class=\"smalltext light code\"></div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                '</div>' +\n                '</div>'\n            ).appendTo(this.$fieldItemsContainer);\n\n            this.fields[id] = new Field(this.configurator, this, $item);\n            this.fields[id].select();\n\n            this.fieldSort.addItems($item);\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldItemsContainer.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.configurator.blockTypes[this.id] = null;\n            delete this.configurator.blockTypes[this.id];\n        }\n    });\n\n    var Field = Garnish.Base.extend({\n        configurator: null,\n        blockType: null,\n        id: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        selectedFieldType: null,\n        initializedFieldTypeSettings: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n\n        $fieldSettingsContainer: null,\n        $nameInput: null,\n        $handleInput: null,\n        $requiredCheckbox: null,\n        $typeSelect: null,\n        $translationSettingsContainer: null,\n        $typeSettingsContainer: null,\n        $widthInput: null,\n        $deleteBtn: null,\n\n        init: function(configurator, blockType, $item) {\n            this.configurator = configurator;\n            this.blockType = blockType;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n\n            this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n            this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n            this.initializedFieldTypeSettings = {};\n            this.fieldTypeSettingsTemplates = {};\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            var isNew = (!this.$fieldSettingsContainer.length);\n\n            if (isNew) {\n                this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n            }\n\n            this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n            this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n            this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n            this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n            this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n            this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n            this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n            this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n            if (isNew) {\n                this.setFieldType('craft\\\\fields\\\\PlainText');\n            } else {\n                this.selectedFieldType = this.$typeSelect.val();\n                this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n            }\n\n            if (!this.$handleInput.val()) {\n                new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n            this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n            this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n            this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n            this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n            let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.$widthInput.val(width);\n                }\n            });\n            widthSlider.$container.insertAfter($nameContainer);\n        },\n\n        select: function() {\n            if (this.blockType.selectedField === this) {\n                return;\n            }\n\n            if (this.blockType.selectedField) {\n                this.blockType.selectedField.deselect();\n            }\n\n            this.configurator.$fieldSettingsColumnContainer.removeClass('hidden');\n            this.blockType.$fieldSettingsContainer.removeClass('hidden');\n            this.$fieldSettingsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.blockType.selectedField = this;\n            Garnish.$win.trigger('resize');\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldSettingsColumnContainer.addClass('hidden');\n            this.blockType.$fieldSettingsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.blockType.selectedField = null;\n            Garnish.$win.trigger('resize');\n        },\n\n        updateNameLabel: function() {\n            var val = this.$nameInput.val();\n            this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n        },\n\n        updateHandleLabel: function() {\n            this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n        },\n\n        updateRequiredIcon: function() {\n            if (this.$requiredCheckbox.prop('checked')) {\n                this.$nameLabel.addClass('mci-required');\n            } else {\n                this.$nameLabel.removeClass('mci-required');\n            }\n        },\n\n        onTypeSelectChange: function() {\n            this.setFieldType(this.$typeSelect.val());\n        },\n\n        setFieldType: function(type) {\n            // Update the Translation Method settings\n            Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n            if (this.selectedFieldType) {\n                this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n            }\n\n            this.selectedFieldType = type;\n            this.$typeSelect.val(type);\n\n            // Show a spinner\n            this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                this.$typeSettingsContainer.html('').append($settings);\n                if (fresh) {\n                    Craft.initUiElements($settings);\n                    Craft.appendHeadHtml(headHtml);\n                    Craft.appendFootHtml(footHtml);\n                }\n\n                Garnish.$win.trigger('resize');\n            }).catch(() => {\n                this.$typeSettingsContainer.html('');\n            });\n        },\n\n        getFieldTypeSettings: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                    resolve({\n                        fresh: false,\n                        $settings: this.initializedFieldTypeSettings[type],\n                    });\n                    return;\n                }\n\n                this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                    settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                    headHtml = this.getParsedFieldTypeHtml(headHtml);\n                    footHtml = this.getParsedFieldTypeHtml(footHtml);\n                    let $settings = $('<div/>').html(settingsHtml);\n                    this.initializedFieldTypeSettings[type] = $settings;\n                    resolve({\n                        fresh: true,\n                        $settings: $settings,\n                        headHtml: headHtml,\n                        footHtml: footHtml,\n                    });\n                }).catch($.noop);\n            });\n        },\n\n        getParsedFieldTypeHtml: function(html) {\n            if (typeof html === 'string') {\n                html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n            } else {\n                html = '';\n            }\n\n            return html;\n        },\n\n        getDefaultFieldSettings: function() {\n            var $container = $('<div/>', {\n                'data-id': this.id\n            });\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                id: this.inputIdPrefix + '-name',\n                name: this.inputNamePrefix + '[name]'\n            }).appendTo($container);\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                id: this.inputIdPrefix + '-handle',\n                'class': 'code',\n                name: this.inputNamePrefix + '[handle]',\n                maxlength: 64,\n                required: true\n            }).appendTo($container);\n\n            Craft.ui.createTextareaField({\n                label: Craft.t('app', 'Instructions'),\n                id: this.inputIdPrefix + '-instructions',\n                'class': 'nicetext',\n                name: this.inputNamePrefix + '[instructions]'\n            }).appendTo($container);\n\n            let $fieldset = $('<fieldset/>').appendTo($container);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'This field is required'),\n                id: this.inputIdPrefix + '-required',\n                name: this.inputNamePrefix + '[required]'\n            }).appendTo($fieldset);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'Use this field’s values as search keywords'),\n                id: this.inputIdPrefix + '-searchable',\n                name: this.inputNamePrefix + '[searchable]',\n                checked: false,\n            }).appendTo($fieldset);\n\n            var fieldTypeOptions = [];\n\n            for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                fieldTypeOptions.push({\n                    value: this.configurator.fieldTypeInfo[i].type,\n                    label: this.configurator.fieldTypeInfo[i].name\n                });\n            }\n\n            Craft.ui.createSelectField({\n                label: Craft.t('app', 'Field Type'),\n                id: this.inputIdPrefix + '-type',\n                name: this.inputNamePrefix + '[type]',\n                options: fieldTypeOptions,\n                value: 'craft\\\\fields\\\\PlainText'\n            }).appendTo($container);\n\n            if (Craft.isMultiSite) {\n                var $translationSettingsContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-settings'\n                }).appendTo($container);\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Translation Method'),\n                    id: this.inputIdPrefix + '-translation-method',\n                    name: this.inputNamePrefix + '[translationMethod]',\n                    options: [],\n                    value: 'none',\n                    toggle: true,\n                    targetPrefix: this.inputIdPrefix + '-translation-method-'\n                }).appendTo($translationSettingsContainer);\n\n                var $translationKeyFormatContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-method-custom',\n                    'class': 'hidden'\n                }).appendTo($translationSettingsContainer);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Translation Key Format'),\n                    id: this.inputIdPrefix + '-translation-key-format',\n                    name: this.inputNamePrefix + '[translationKeyFormat]'\n                }).appendTo($translationKeyFormatContainer);\n            }\n\n            $('<hr/>').appendTo($container);\n\n            $('<div/>', {\n                'class': 'mc-fieldtype-settings'\n            }).appendTo($container);\n\n            $('<input/>', {\n                type: 'hidden',\n                id: this.inputIdPrefix + '-width',\n                name: this.inputNamePrefix + '[width]',\n                value: '100',\n            }).appendTo($container);\n\n            $('<hr/>').appendTo($container);\n\n            $('<a/>', {\n                'class': 'error delete',\n                text: Craft.t('app', 'Delete')\n            }).appendTo($container);\n\n            return $container;\n        },\n\n        confirmDelete: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                this.selfDestruct();\n            }\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.blockType.fields[this.id] = null;\n            delete this.blockType.fields[this.id];\n        }\n    });\n})(jQuery);\n"]}