{"version":3,"sources":["assetindexes/src/AssetIndexesUtility.js"],"names":["$","Craft","AssetIndexesUtility","Garnish","Base","extend","$trigger","$form","completedActions","loadingActions","queue","cacheImages","formId","sessionId","init","$status","addListener","this","onSubmit","progressBar","ev","preventDefault","hasClass","resetProgressBar","totalActions","ProgressBar","$progressBarStatus","velocity","opacity","postData","removeClass","params","expandPostArray","postActionRequest","response","indexingData","getPostData","start","volumeData","requestCounter","push","volumes","i","total","process","volumeId","processIndexing","finishIndexing","updateProgressBar","$allDone","setItemCount","addClass","trigger","setProcessedItemCount","maxConcurrentActions","alert","shift","error","data","type","$modal","appendTo","$bod","$body","html","confirm","$buttons","$footer","modal","hide","showDelete","onComplete","class","text","t","Modal","hideOnShadeClick","settings","onHide","noop","showConfirmDialog","finish","$progressBar","overview","hideProgressBar","duration","css","jQuery"],"mappings":"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","file":"AssetIndexesUtility.min.js","sourcesContent":["(function($) {\n    Craft.AssetIndexesUtility = Garnish.Base.extend({\n        $trigger: null,\n        $form: null,\n\n        totalActions: null,\n        completedActions: null,\n        loadingActions: null,\n        queue: null,\n\n        cacheImages: false,\n        sessionId: null,\n\n        init: function(formId) {\n            this.$form = $('#' + formId);\n            this.$trigger = $('input.submit', this.$form);\n            this.$status = $('.utility-status', this.$form);\n\n            this.addListener(this.$form, 'submit', 'onSubmit');\n        },\n\n        onSubmit: function(ev) {\n            ev.preventDefault();\n\n            if (!this.$trigger.hasClass('disabled')) {\n                if (!this.progressBar) {\n                    this.progressBar = new Craft.ProgressBar(this.$status, true);\n                } else {\n                    this.progressBar.resetProgressBar();\n                }\n\n                this.totalActions = 0;\n                this.loadingActions = 0;\n                this.completedActions = 0;\n                this.queue = [];\n\n                this.progressBar.$progressBar.removeClass('hidden');\n                this.progressBar.$progressBarStatus.removeClass('hidden');\n\n                this.progressBar.$progressBar.velocity('stop').velocity({\n                    opacity: 1\n                }, {\n                    complete: () => {\n                        var postData = Garnish.getPostData(this.$form),\n                            params = Craft.expandPostArray(postData);\n                        params.start = true;\n\n                        this.cacheImages = params.cacheImages;\n\n                        Craft.postActionRequest('utilities/asset-index-perform-action', {params}, response => {\n                            if (response.indexingData) {\n                                this.sessionId = response.indexingData.sessionId;\n\n                                // Load up all the data\n                                for (var i = 0; i < response.indexingData.volumes.length; i++) {\n                                    var volumeData = response.indexingData.volumes[i];\n\n                                    for (var requestCounter = 0; requestCounter < volumeData.total; requestCounter++) {\n                                        this.queue.push({\n                                            process: true,\n                                            sessionId: this.sessionId,\n                                            volumeId: volumeData.volumeId,\n                                            cacheImages: this.cacheImages\n                                        });\n                                        this.totalActions++;\n                                    }\n                                }\n\n                                if (this.totalActions > 0) {\n                                    this.processIndexing();\n                                } else {\n                                    this.finishIndexing();\n                                }\n                            }\n                        });\n                    },\n                });\n\n                if (this.$allDone) {\n                    this.$allDone.css('opacity', 0);\n                }\n\n                this.$trigger.addClass('disabled');\n                this.$trigger.trigger('blur');\n            }\n        },\n\n        updateProgressBar: function() {\n            this.progressBar.setItemCount(this.totalActions);\n            this.progressBar.setProcessedItemCount(this.completedActions);\n            this.progressBar.updateProgressBar();\n        },\n\n        processIndexing: function() {\n            if (this.completedActions + this.loadingActions < this.totalActions && this.loadingActions < Craft.AssetIndexesUtility.maxConcurrentActions) {\n                this.loadingActions++;\n\n                var params = this.queue.shift();\n                Craft.postActionRequest('utilities/asset-index-perform-action', {params}, response => {\n                    this.loadingActions--;\n                    this.completedActions++;\n\n                    this.updateProgressBar();\n\n                    if (response && response.error) {\n                        alert(response.error);\n                    }\n\n                    if (this.completedActions == this.totalActions) {\n                        this.finishIndexing();\n                    } else {\n                        this.processIndexing();\n                    }\n                });\n\n                // Try again, in case we have more space.\n                this.processIndexing();\n            }\n        },\n\n        showConfirmDialog: function(data) {\n            var $modal = $('<form class=\"modal fitted confirmmodal\"/>').appendTo(Garnish.$bod),\n                $body = $('<div class=\"body\"/>').appendTo($modal).html(data.confirm),\n                $footer = $('<footer class=\"footer\"/>').appendTo($modal),\n                $buttons = $('<div class=\"buttons right\"/>').appendTo($footer);\n\n            if (data.showDelete) {\n                let $cancelBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn',\n                    text: Craft.t('app', 'Keep them'),\n                }).appendTo($buttons);\n                $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'Delete them'),\n                }).appendTo($buttons);\n\n                this.addListener($cancelBtn, 'click', function() {\n                    modal.hide();\n                    this.onComplete();\n                });\n            } else {\n                $('<button/>', {\n                    type: 'submit',\n                    class: 'btn submit',\n                    text: Craft.t('app', 'OK'),\n                }).appendTo($buttons);\n            }\n\n            Craft.initUiElements($body);\n\n            var modal = new Garnish.Modal($modal, {\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n            });\n\n            this.addListener($modal, 'submit', function(ev) {\n                ev.preventDefault();\n\n                modal.settings.onHide = $.noop;\n                modal.hide();\n\n                var postData = Garnish.getPostData($body);\n                var params = Craft.expandPostArray(postData);\n\n                $.extend(params, data.params);\n                params.finish = true;\n\n                Craft.postActionRequest('utilities/asset-index-perform-action', {params}, $.noop);\n                this.onComplete();\n            });\n        },\n\n        finishIndexing: function() {\n            var params = {\n                sessionId: this.sessionId,\n                overview: true\n            };\n\n            Craft.postActionRequest('utilities/asset-index-perform-action', {params}, response => {\n                if (response.confirm) {\n                    this.hideProgressBar();\n                    this.showConfirmDialog(response);\n                } else {\n                    this.onComplete();\n                }\n            });\n        },\n\n        hideProgressBar: function() {\n            this.progressBar.$progressBarStatus.addClass('hidden');\n            this.progressBar.$progressBar.velocity({opacity: 0}, {\n                duration: 'fast'\n            });\n        },\n\n        onComplete: function() {\n            this.hideProgressBar();\n\n            if (!this.$allDone) {\n                this.$allDone = $('<div class=\"alldone\" data-icon=\"done\" />').appendTo(this.$status);\n                this.$allDone.css('opacity', 0);\n                this.$allDone.velocity({opacity: 1}, {duration: 'fast'});\n                this.$trigger.removeClass('disabled');\n                this.$trigger.trigger('focus');\n            }\n        }\n    }, {\n        maxConcurrentActions: 3\n    });\n})(jQuery);\n"]}