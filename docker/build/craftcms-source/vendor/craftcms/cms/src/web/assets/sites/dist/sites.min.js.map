{"version":3,"sources":["sites/src/sites.js"],"names":["$","Craft","SitesAdmin","Garnish","Base","extend","$groups","init","$selectedGroup","find","addListener","$groupSettingsBtn","menuBtn","data","elem","onOptionSelect","$elem","hasClass","renameSelectedGroup","this","deleteSelectedGroup","addNewGroup","promptForGroupName","then","name","postActionRequest","response","textStatus","success","location","getUrl","groupId","group","id","errors","flattenErrors","t","join","cp","displayError","catch","newName","displayNotice","alert","resolve","reject","sendActionRequest","oldName","$form","class","appendTo","$bod","$body","append","html","$buttons","type","text","js","Modal","onShow","setTimeout","setFocusWithin","onHide","ev","preventDefault","val","hide","$cancelBtn","on","modal","href","responseErrors","attribute","hasOwnProperty","concat","SiteAdminTable","AdminTable","confirmDeleteModal","$deleteActionRadios","$deleteSubmitBtn","$deleteSpinner","_deleting","$row","destroy","confirmDeleteItem","first","trigger","_createConfirmDeleteModal","isMobileBrowser","validateDeleteInputs","validates","eq","prop","removeClass","submitDeleteLocale","addClass","disable","getItemId","$rowToDelete","transferContentTo","$transferSelect","settings","deleteAction","enable","handleDeleteItemResponse","getItemName","getCsrfInput","language","site","i","sites","length","escapeHtml","jQuery"],"mappings":"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","file":"sites.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.SitesAdmin = Garnish.Base.extend({\n        $groups: null,\n        $selectedGroup: null,\n\n        init: function() {\n            this.$groups = $('#groups');\n            this.$selectedGroup = this.$groups.find('a.sel:first');\n            this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n            var $groupSettingsBtn = $('#groupsettingsbtn');\n\n            if ($groupSettingsBtn.length) {\n                var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                menuBtn.settings.onOptionSelect = elem => {\n                    var $elem = $(elem);\n\n                    if ($elem.hasClass('disabled')) {\n                        return;\n                    }\n\n                    switch ($elem.data('action')) {\n                        case 'rename': {\n                            this.renameSelectedGroup();\n                            break;\n                        }\n                        case 'delete': {\n                            this.deleteSelectedGroup();\n                            break;\n                        }\n                    }\n                };\n            }\n        },\n\n        addNewGroup: function() {\n            this.promptForGroupName('').then(name => {\n                if (!name) {\n                    return;\n                }\n\n                let data = {\n                    name: name\n                };\n\n                Craft.postActionRequest('sites/save-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/sites', {groupId: response.group.id});\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }).catch(() => {});\n        },\n\n        renameSelectedGroup: function() {\n            this.promptForGroupName(this.$selectedGroup.data('raw-name')).then(newName => {\n                var data = {\n                    id: this.$selectedGroup.data('id'),\n                    name: newName\n                };\n\n                Craft.postActionRequest('sites/save-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            this.$selectedGroup.text(response.group.name);\n                            this.$selectedGroup.data('raw-name', newName);\n                            Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }).catch(() => {});\n        },\n\n        promptForGroupName: function(oldName) {\n            return new Promise((resolve, reject) => {\n                Craft.sendActionRequest('POST', 'sites/rename-group-field', {\n                    data: {name: oldName},\n                }).then(response => {\n                    let $form = $('<form/>', {class: 'modal prompt'}).appendTo(Garnish.$bod);\n                    let $body = $('<div/>', {class: 'body'}).append(response.data.html).appendTo($form);\n                    let $buttons = $('<div/>', {class: 'buttons right'}).appendTo($body);\n                    let $cancelBtn = $('<button/>', {type: 'button', class: 'btn', text: Craft.t('app', 'Cancel')}).appendTo($buttons);\n                    let $saveBtn = $('<button/>', {type: 'submit', class: 'btn submit', text: Craft.t('app', 'Save')}).appendTo($buttons);\n\n                    Craft.appendFootHtml(response.data.js);\n\n                    let success = false;\n                    let modal = new Garnish.Modal($form, {\n                        onShow: () => {\n                            setTimeout(() => {\n                                Craft.setFocusWithin($body);\n                            }, 100);\n                        },\n                        onHide: () => {\n                            if (!success) {\n                                reject();\n                            }\n                        },\n                    });\n\n                    $form.on('submit', ev => {\n                        ev.preventDefault();\n                        let newName = $('.text', $body).val();\n                        if (newName && newName !== oldName) {\n                            resolve(newName);\n                            success = true;\n                        }\n                        modal.hide();\n                    });\n\n                    $cancelBtn.on('click', () => {\n                        modal.hide();\n                    });\n                });\n            });\n        },\n\n        deleteSelectedGroup: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this group?'))) {\n                var data = {\n                    id: this.$selectedGroup.data('id')\n                };\n\n                Craft.postActionRequest('sites/delete-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/sites');\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }\n        },\n\n        flattenErrors: function(responseErrors) {\n            var errors = [];\n\n            for (var attribute in responseErrors) {\n                if (!responseErrors.hasOwnProperty(attribute)) {\n                    continue;\n                }\n\n                errors = errors.concat(responseErrors[attribute]);\n            }\n\n            return errors;\n        }\n    });\n\n    Craft.SiteAdminTable = Craft.AdminTable.extend({\n        confirmDeleteModal: null,\n\n        $rowToDelete: null,\n        $deleteActionRadios: null,\n        $deleteSubmitBtn: null,\n        $deleteSpinner: null,\n\n        _deleting: false,\n\n        confirmDeleteItem: function($row) {\n            if (this.confirmDeleteModal) {\n                this.confirmDeleteModal.destroy();\n                delete this.confirmDeleteModal;\n            }\n\n            this._createConfirmDeleteModal($row);\n\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                setTimeout(() => {\n                    this.$deleteActionRadios.first().trigger('focus');\n                }, 100);\n            }\n\n            return false;\n        },\n\n        validateDeleteInputs: function() {\n            var validates = (\n                this.$deleteActionRadios.eq(0).prop('checked') ||\n                this.$deleteActionRadios.eq(1).prop('checked')\n            );\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            } else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        submitDeleteLocale: function(ev) {\n            ev.preventDefault();\n\n            if (this._deleting || !this.validateDeleteInputs()) {\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this._deleting = true;\n\n            var data = {\n                id: this.getItemId(this.$rowToDelete)\n            };\n\n            // Are we transferring content?\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                data.transferContentTo = this.$transferSelect.val();\n            }\n\n            Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._deleting = false;\n                    this.enable();\n                    this.confirmDeleteModal.hide();\n                    this.handleDeleteItemResponse(response, this.$rowToDelete);\n                }\n            });\n        },\n\n        _createConfirmDeleteModal: function($row) {\n            this.$rowToDelete = $row;\n\n            let id = this.getItemId($row);\n            let name = this.getItemName($row);\n\n            let $form = $(\n                '<form id=\"confirmdeletemodal\" class=\"modal fitted\" method=\"post\" accept-charset=\"UTF-8\">' +\n                Craft.getCsrfInput() +\n                '<input type=\"hidden\" name=\"action\" value=\"localization/deleteLocale\"/>' +\n                '<input type=\"hidden\" name=\"id\" value=\"' + id + '\"/>' +\n                '</form>'\n            ).appendTo(Garnish.$bod);\n            let $body = $(\n                '<div class=\"body\">' +\n                '<p>' + Craft.t('app', 'What do you want to do with any content that is only available in {language}?', {language: name}) + '</p>' +\n                '<div class=\"options\">' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label> ' +\n                '<div id=\"transferselect\" class=\"select\">' +\n                '<select/>' +\n                '</div>' +\n                '</div>' +\n                '<div>' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                '</div>' +\n                '</div>'\n            ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$transferSelect = $('#transferselect').find('> select');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Delete {site}', {site: name}),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            for (var i = 0; i < Craft.sites.length; i++) {\n                if (Craft.sites[i].id != id) {\n                    this.$transferSelect.append('<option value=\"' + Craft.sites[i].id + '\">' + Craft.escapeHtml(Craft.sites[i].name) + '</option>');\n                }\n            }\n\n            this.confirmDeleteModal = new Garnish.Modal($form);\n\n            this.addListener($cancelBtn, 'click', function() {\n                this.confirmDeleteModal.hide();\n            });\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'submitDeleteLocale');\n        }\n    });\n})(jQuery);\n"]}