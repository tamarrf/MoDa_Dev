{"version":3,"sources":["matrix/src/MatrixInput.js"],"names":["$","Craft","MatrixInput","Garnish","Base","extend","id","blockTypesByHandle","blockTypes","inputIdPrefix","showingAddBlockMenu","addBlockBtnGroupWidth","$container","$blockContainer","$addBlockBtnContainer","$addBlockBtnGroup","$addBlockBtnGroupBtns","blockSelect","totalNewBlocks","init","inputNamePrefix","settings","i","$blocks","this","formatInputId","maxBlocks","setSettings","defaults","children","$addBlockMenuBtn","setNewBlockBtn","blockType","collapsedBlocks","getCollapsedBlockIds","blockSort","DragSort","filter","getSelectedItems","handle","axis","$targetItem","hasClass","collapseDraggees","magnetStrength","helperOpacity","onSortChange","resetItemOrder","length","Select","$block","blockId","newMatch","parseInt","data","block","match","target","inArray","MenuBtn","collapse","addListener","ev","updateAddBlockBtn","onOptionSelect","option","$doc","ready","bind","addBlockBtnContainerWidth","width","requestAnimationFrame","addClass","removeClass","navigator","userAgent","indexOf","css","canAddMoreBlocks","$actionMenu","$items","eq","find","parent","getBlockTypeByHandle","addBlock","type","$insertBefore","html","staticBlocks","name","t","footHtml","getHiddenBlockCss","window","draftEditor","pause","MatrixBlock","addItems","$fieldsContainer","appendTo","scrollContainerToElement","bodyHtml","getParsedBlockHtml","trigger","velocity","opacity","initUiElements","collapseSelectedBlocks","callOnSelectedBlocks","expandSelectedBlocks","autofocus","disableSelectedBlocks","first","resume","placeholderKey","deleteSelectedBlocks","collapsedBlockStorageKey","filterArray","localStorage","$selectedItems","fn","rememberCollapsedBlockId","marginBottom","outerHeight","push","setCollapsedBlockIds","replace","RegExp","matrix","systemUid","$titlebar","split","ids","join","forgetCollapsedBlockId","collapsedBlocksIndex","splice","menuBtn","$previewContainer","$collapsedInput","preventDefault","collapsed","expand","isNew","substr","$menuBtn","$fields","menu","onMenuOptionSelect","$inputs","$field","inputPreviewText","prev","next","$maybeLightswitchContainer","on","value","$input","hasAttr","_handleTitleBarClick","toggle","animate","show","j","hide","text","getText","getInputPostVal","Array","trim","displayValue","collapsedContainerHeight","previewHtml","height","expandedContainerHeight","duration","val","setTimeout","$prev","display","Storage","$option","disable","batchAction","enable","moveUp","insertBefore","moveDown","$next","insertAfter","totalSelected","isSelected","confirm","enableSelectedBlocks","selfDestruct","remove","jQuery"],"mappings":"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","file":"MatrixInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix input class\n     */\n    Craft.MatrixInput = Garnish.Base.extend({\n        id: null,\n        blockTypes: null,\n        blockTypesByHandle: null,\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        showingAddBlockMenu: false,\n        addBlockBtnGroupWidth: null,\n        addBlockBtnContainerWidth: null,\n\n        $container: null,\n        $blockContainer: null,\n        $addBlockBtnContainer: null,\n        $addBlockBtnGroup: null,\n        $addBlockBtnGroupBtns: null,\n\n        blockSort: null,\n        blockSelect: null,\n        totalNewBlocks: 0,\n\n        init: function(id, blockTypes, inputNamePrefix, settings) {\n            this.id = id;\n            this.blockTypes = blockTypes;\n            this.inputNamePrefix = inputNamePrefix;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n\n            // see if settings was actually set to the maxBlocks value\n            if (typeof settings === 'number') {\n                settings = {maxBlocks: settings};\n            }\n            this.setSettings(settings, Craft.MatrixInput.defaults);\n\n            this.$container = $('#' + this.id);\n            this.$blockContainer = this.$container.children('.blocks');\n            this.$addBlockBtnContainer = this.$container.children('.buttons');\n            this.$addBlockBtnGroup = this.$addBlockBtnContainer.children('.btngroup');\n            this.$addBlockBtnGroupBtns = this.$addBlockBtnGroup.children('.btn');\n            this.$addBlockMenuBtn = this.$addBlockBtnContainer.children('.menubtn');\n\n            this.$container.data('matrix', this);\n\n            this.setNewBlockBtn();\n\n            this.blockTypesByHandle = {};\n\n            var i;\n\n            for (i = 0; i < this.blockTypes.length; i++) {\n                var blockType = this.blockTypes[i];\n                this.blockTypesByHandle[blockType.handle] = blockType;\n            }\n\n            var $blocks = this.$blockContainer.children(),\n                collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n            this.blockSort = new Garnish.DragSort($blocks, {\n                handle: '> .actions > .move',\n                axis: 'y',\n                filter: () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.blockSort.$targetItem.hasClass('sel')) {\n                        return this.blockSelect.getSelectedItems();\n                    } else {\n                        return this.blockSort.$targetItem;\n                    }\n                },\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                helperOpacity: 0.9,\n                onSortChange: () => {\n                    this.blockSelect.resetItemOrder();\n                },\n            });\n\n            this.blockSelect = new Garnish.Select(this.$blockContainer, $blocks, {\n                multi: true,\n                vertical: true,\n                handle: '> .checkbox, > .titlebar',\n                checkboxMode: true\n            });\n\n            for (i = 0; i < $blocks.length; i++) {\n                var $block = $($blocks[i]),\n                    blockId = $block.data('id');\n\n                // Is this a new block?\n                var newMatch = (typeof blockId === 'string' && blockId.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlocks) {\n                    this.totalNewBlocks = parseInt(newMatch[1]);\n                }\n\n                var block = new MatrixBlock(this, $block);\n\n                if (block.id && $.inArray('' + block.id, collapsedBlocks) !== -1) {\n                    block.collapse();\n                }\n            }\n\n            this.addListener(this.$addBlockBtnGroupBtns, 'click', function(ev) {\n                var type = $(ev.target).data('type');\n                this.addBlock(type);\n            });\n\n            new Garnish.MenuBtn(this.$addBlockMenuBtn,\n                {\n                    onOptionSelect: option => {\n                        this.addBlock($(option).data('type'));\n                    },\n                });\n\n            this.updateAddBlockBtn();\n\n            this.addListener(this.$container, 'resize', 'setNewBlockBtn');\n            Garnish.$doc.ready(this.setNewBlockBtn.bind(this));\n\n            this.trigger('afterInit');\n        },\n\n        setNewBlockBtn: function() {\n            // Do we know what the button group width is yet?\n            if (!this.addBlockBtnGroupWidth) {\n                this.addBlockBtnGroupWidth = this.$addBlockBtnGroup.width();\n\n                if (!this.addBlockBtnGroupWidth) {\n                    return;\n                }\n            }\n\n            // Only check if the container width has resized\n            if (this.addBlockBtnContainerWidth !== (this.addBlockBtnContainerWidth = this.$addBlockBtnContainer.width())) {\n                if (this.addBlockBtnGroupWidth > this.addBlockBtnContainerWidth) {\n                    if (!this.showingAddBlockMenu) {\n                        this.$addBlockBtnGroup.addClass('hidden');\n                        this.$addBlockMenuBtn.removeClass('hidden');\n                        this.showingAddBlockMenu = true;\n                    }\n                } else {\n                    if (this.showingAddBlockMenu) {\n                        this.$addBlockMenuBtn.addClass('hidden');\n                        this.$addBlockBtnGroup.removeClass('hidden');\n                        this.showingAddBlockMenu = false;\n\n                        // Because Safari is awesome\n                        if (navigator.userAgent.indexOf('Safari') !== -1) {\n                            Garnish.requestAnimationFrame(() => {\n                                this.$addBlockBtnGroup.css('opacity', 0.99);\n\n                                Garnish.requestAnimationFrame(() => {\n                                    this.$addBlockBtnGroup.css('opacity', '');\n                                });\n                            });\n                        }\n                    }\n                }\n            }\n        },\n\n        canAddMoreBlocks: function() {\n            return (!this.maxBlocks || this.$blockContainer.children().length < this.maxBlocks);\n        },\n\n        updateAddBlockBtn: function() {\n            var i, block;\n\n            if (this.canAddMoreBlocks()) {\n                this.$addBlockBtnGroup.removeClass('disabled');\n                this.$addBlockMenuBtn.removeClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().removeClass('disabled');\n                    }\n                }\n            } else {\n                this.$addBlockBtnGroup.addClass('disabled');\n                this.$addBlockMenuBtn.addClass('disabled');\n\n                for (i = 0; i < this.blockSelect.$items.length; i++) {\n                    block = this.blockSelect.$items.eq(i).data('block');\n\n                    if (block) {\n                        block.$actionMenu.find('a[data-action=add]').parent().addClass('disabled');\n                    }\n                }\n            }\n        },\n\n        addBlock: function(type, $insertBefore, autofocus) {\n            if (!this.canAddMoreBlocks()) {\n                return;\n            }\n\n            this.totalNewBlocks++;\n\n            var id = 'new' + this.totalNewBlocks;\n\n            var html = `\n<div class=\"matrixblock\" data-id=\"${id}\" data-type=\"${type}\">\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[sortOrder][]\" value=\"${id}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][type]\" value=\"${type}\"/>\n  <input type=\"hidden\" name=\"${this.inputNamePrefix}[blocks][${id}][enabled]\" value=\"1\"/>\n  <div class=\"titlebar\">\n    <div class=\"blocktype\">${this.getBlockTypeByHandle(type).name}</div>\n    <div class=\"preview\"></div>\n  </div>\n  <div class=\"checkbox\" title=\"${Craft.t('app', 'Select')}\"></div>\n  <div class=\"actions\">\n    <div class=\"status off\" title=\"${Craft.t('app', 'Disabled')}\"></div>\n    <a class=\"settings icon menubtn\" title=\"${Craft.t('app', 'Actions')}\" role=\"button\"></a> \n    <div class=\"menu\">\n      <ul class=\"padded\">\n        <li><a data-icon=\"collapse\" data-action=\"collapse\">${Craft.t('app', 'Collapse')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"expand\" data-action=\"expand\">${Craft.t('app', 'Expand')}</a></li>\n        <li><a data-icon=\"disabled\" data-action=\"disable\">${Craft.t('app', 'Disable')}</a></li>\n        <li class=\"hidden\"><a data-icon=\"enabled\" data-action=\"enable\">${Craft.t('app', 'Enable')}</a></li>\n        <li><a data-icon=\"uarr\" data-action=\"moveUp\">${Craft.t('app', 'Move up')}</a></li>\n        <li><a data-icon=\"darr\" data-action=\"moveDown\">${Craft.t('app', 'Move down')}</a></li>\n      </ul>`;\n\n            if (!this.settings.staticBlocks) {\n                html += `\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">\n        <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('app', 'Delete')}</a></li>\n      </ul>\n      <hr class=\"padded\"/>\n      <ul class=\"padded\">`;\n\n                for (var i = 0; i < this.blockTypes.length; i++) {\n                    var blockType = this.blockTypes[i];\n                    html += `\n        <li><a data-icon=\"plus\" data-action=\"add\" data-type=\"${blockType.handle}\">${Craft.t('app', 'Add {type} above', {type: blockType.name})}</a></li>`;\n                }\n\n                html += `\n      </ul>`\n            }\n\n            html += `\n    </div>\n    <a class=\"move icon\" title=\"${Craft.t('app', 'Reorder')}\" role=\"button\"></a>\n  </div>\n</div>`;\n\n            var $block = $(html);\n\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            if ($insertBefore) {\n                $block.insertBefore($insertBefore);\n            } else {\n                $block.appendTo(this.$blockContainer);\n            }\n\n            var $fieldsContainer = $('<div class=\"fields\"/>').appendTo($block),\n                bodyHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].bodyHtml, id),\n                footHtml = this.getParsedBlockHtml(this.blockTypesByHandle[type].footHtml, id);\n\n            $(bodyHtml).appendTo($fieldsContainer);\n\n            this.trigger('blockAdded', {\n                $block: $block\n            });\n\n            // Animate the block into position\n            $block.css(this.getHiddenBlockCss($block)).velocity({\n                opacity: 1,\n                'margin-bottom': 10\n            }, 'fast', () => {\n                $block.css('margin-bottom', '');\n                Garnish.$bod.append(footHtml);\n                Craft.initUiElements($fieldsContainer);\n                new MatrixBlock(this, $block);\n                this.blockSort.addItems($block);\n                this.blockSelect.addItems($block);\n                this.updateAddBlockBtn();\n\n                Garnish.requestAnimationFrame(function() {\n                    if (typeof autofocus === 'undefined' || autofocus) {\n                        // Scroll to the block\n                        Garnish.scrollContainerToElement($block);\n                        // Focus on the first text input\n                        $block.find('.text,[contenteditable]').first().trigger('focus');\n                    }\n\n                    // Resume the draft editor\n                    if (window.draftEditor) {\n                        window.draftEditor.resume();\n                    }\n                });\n            });\n        },\n\n        getBlockTypeByHandle: function(handle) {\n            for (var i = 0; i < this.blockTypes.length; i++) {\n                if (this.blockTypes[i].handle === handle) {\n                    return this.blockTypes[i];\n                }\n            }\n        },\n\n        collapseSelectedBlocks: function() {\n            this.callOnSelectedBlocks('collapse');\n        },\n\n        expandSelectedBlocks: function() {\n            this.callOnSelectedBlocks('expand');\n        },\n\n        disableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('disable');\n        },\n\n        enableSelectedBlocks: function() {\n            this.callOnSelectedBlocks('enable');\n        },\n\n        deleteSelectedBlocks: function() {\n            this.callOnSelectedBlocks('selfDestruct');\n        },\n\n        callOnSelectedBlocks: function(fn) {\n            for (var i = 0; i < this.blockSelect.$selectedItems.length; i++) {\n                this.blockSelect.$selectedItems.eq(i).data('block')[fn]();\n            }\n        },\n\n        getHiddenBlockCss: function($block) {\n            return {\n                opacity: 0,\n                marginBottom: -($block.outerHeight())\n            };\n        },\n\n        getParsedBlockHtml: function(html, id) {\n            if (typeof html === 'string') {\n                return html.replace(new RegExp(`__BLOCK_${this.settings.placeholderKey}__`, 'g'), id);\n            } else {\n                return '';\n            }\n        },\n\n        get maxBlocks() {\n            return this.settings.maxBlocks;\n        },\n    }, {\n        defaults: {\n            placeholderKey: null,\n            maxBlocks: null,\n            staticBlocks: false,\n        },\n\n        collapsedBlockStorageKey: 'Craft-' + Craft.systemUid + '.MatrixInput.collapsedBlocks',\n\n        getCollapsedBlockIds: function() {\n            if (typeof localStorage[Craft.MatrixInput.collapsedBlockStorageKey] === 'string') {\n                return Craft.filterArray(localStorage[Craft.MatrixInput.collapsedBlockStorageKey].split(','));\n            } else {\n                return [];\n            }\n        },\n\n        setCollapsedBlockIds: function(ids) {\n            localStorage[Craft.MatrixInput.collapsedBlockStorageKey] = ids.join(',');\n        },\n\n        rememberCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds();\n\n                if ($.inArray('' + id, collapsedBlocks) === -1) {\n                    collapsedBlocks.push(id);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        },\n\n        forgetCollapsedBlockId: function(id) {\n            if (typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n        }\n    });\n\n    var MatrixBlock = Garnish.Base.extend({\n        matrix: null,\n        $container: null,\n        $titlebar: null,\n        $fieldsContainer: null,\n        $previewContainer: null,\n        $actionMenu: null,\n        $collapsedInput: null,\n\n        isNew: null,\n        id: null,\n\n        collapsed: false,\n\n        init: function(matrix, $container) {\n            this.matrix = matrix;\n            this.$container = $container;\n            this.$titlebar = $container.children('.titlebar');\n            this.$previewContainer = this.$titlebar.children('.preview');\n            this.$fieldsContainer = $container.children('.fields');\n\n            this.$container.data('block', this);\n\n            this.id = this.$container.data('id');\n            this.isNew = (!this.id || (typeof this.id === 'string' && this.id.substr(0, 3) === 'new'));\n\n            var $menuBtn = this.$container.find('> .actions > .settings'),\n                menuBtn = new Garnish.MenuBtn($menuBtn);\n\n            this.$actionMenu = menuBtn.menu.$container;\n\n            menuBtn.menu.settings.onOptionSelect = this.onMenuOptionSelect.bind(this);\n\n            menuBtn.menu.on('show', () => {\n                this.$container.addClass('active');\n                if (this.$container.prev('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveUp]:first').parent().addClass('hidden');\n                }\n                if (this.$container.next('.matrixblock').length) {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().removeClass('hidden');\n                } else {\n                    this.$actionMenu.find('a[data-action=moveDown]:first').parent().addClass('hidden');\n                }\n            });\n            menuBtn.menu.on('hide', () => {\n                this.$container.removeClass('active');\n            });\n\n            // Was this block already collapsed?\n            if (Garnish.hasAttr(this.$container, 'data-collapsed')) {\n                this.collapse();\n            }\n\n            this._handleTitleBarClick = function(ev) {\n                ev.preventDefault();\n                this.toggle();\n            };\n\n            this.addListener(this.$titlebar, 'doubletap', this._handleTitleBarClick);\n        },\n\n        toggle: function() {\n            if (this.collapsed) {\n                this.expand();\n            } else {\n                this.collapse(true);\n            }\n        },\n\n        collapse: function(animate) {\n            if (this.collapsed) {\n                return;\n            }\n\n            this.$container.addClass('collapsed');\n\n            var previewHtml = '',\n                $fields = this.$fieldsContainer.children().children();\n\n            for (var i = 0; i < $fields.length; i++) {\n                var $field = $($fields[i]),\n                    $inputs = $field.children('.input').find('select,input[type!=\"hidden\"],textarea,.label'),\n                    inputPreviewText = '';\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $($inputs[j]),\n                        value;\n\n                    if ($input.hasClass('label')) {\n                        var $maybeLightswitchContainer = $input.parent().parent();\n\n                        if ($maybeLightswitchContainer.hasClass('lightswitch') && (\n                            ($maybeLightswitchContainer.hasClass('on') && $input.hasClass('off')) ||\n                            (!$maybeLightswitchContainer.hasClass('on') && $input.hasClass('on'))\n                        )) {\n                            continue;\n                        }\n\n                        value = $input.text();\n                    } else {\n                        value = Craft.getText(Garnish.getInputPostVal($input));\n                    }\n\n                    if (value instanceof Array) {\n                        value = value.join(', ');\n                    }\n\n                    if (value) {\n                        value = Craft.trim(value);\n\n                        if (value) {\n                            if (inputPreviewText) {\n                                inputPreviewText += ', ';\n                            }\n\n                            inputPreviewText += value;\n                        }\n                    }\n                }\n\n                if (inputPreviewText) {\n                    previewHtml += (previewHtml ? ' <span>|</span> ' : '') + inputPreviewText;\n                }\n            }\n\n            this.$previewContainer.html(previewHtml);\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            if (animate) {\n                this.$fieldsContainer.velocity('fadeOut', {duration: 'fast'});\n                this.$container.velocity({height: 16}, 'fast');\n            } else {\n                this.$previewContainer.show();\n                this.$fieldsContainer.hide();\n                this.$container.css({height: 16});\n            }\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().removeClass('hidden');\n            }, 200);\n\n            // Remember that?\n            if (!this.isNew) {\n                Craft.MatrixInput.rememberCollapsedBlockId(this.id);\n            } else {\n                if (!this.$collapsedInput) {\n                    this.$collapsedInput = $('<input type=\"hidden\" name=\"' + this.matrix.inputNamePrefix + '[blocks][' + this.id + '][collapsed]\" value=\"1\"/>').appendTo(this.$container);\n                } else {\n                    this.$collapsedInput.val('1');\n                }\n            }\n\n            this.collapsed = true;\n        },\n\n        expand: function() {\n            if (!this.collapsed) {\n                return;\n            }\n\n            this.$container.removeClass('collapsed');\n\n            this.$fieldsContainer.velocity('stop');\n            this.$container.velocity('stop');\n\n            var collapsedContainerHeight = this.$container.height();\n            this.$container.height('auto');\n            this.$fieldsContainer.show();\n            var expandedContainerHeight = this.$container.height();\n            var displayValue = this.$fieldsContainer.css('display') || 'block';\n            this.$container.height(collapsedContainerHeight);\n            this.$fieldsContainer.hide().velocity('fadeIn', {duration: 'fast', display: displayValue});\n            this.$container.velocity({height: expandedContainerHeight}, 'fast', () => {\n                this.$previewContainer.html('');\n                this.$container.height('auto');\n            });\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=collapse]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=expand]:first').parent().addClass('hidden');\n            }, 200);\n\n            // Remember that?\n            if (!this.isNew && typeof Storage !== 'undefined') {\n                var collapsedBlocks = Craft.MatrixInput.getCollapsedBlockIds(),\n                    collapsedBlocksIndex = $.inArray('' + this.id, collapsedBlocks);\n\n                if (collapsedBlocksIndex !== -1) {\n                    collapsedBlocks.splice(collapsedBlocksIndex, 1);\n                    Craft.MatrixInput.setCollapsedBlockIds(collapsedBlocks);\n                }\n            }\n\n            if (!this.isNew) {\n                Craft.MatrixInput.forgetCollapsedBlockId(this.id);\n            } else if (this.$collapsedInput) {\n                this.$collapsedInput.val('');\n            }\n\n            this.collapsed = false;\n        },\n\n        disable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('');\n            this.$container.addClass('disabled');\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().addClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().removeClass('hidden');\n            }, 200);\n\n            this.collapse(true);\n        },\n\n        enable: function() {\n            this.$container.children('input[name$=\"[enabled]\"]:first').val('1');\n            this.$container.removeClass('disabled');\n\n            setTimeout(() => {\n                this.$actionMenu.find('a[data-action=disable]:first').parent().removeClass('hidden');\n                this.$actionMenu.find('a[data-action=enable]:first').parent().addClass('hidden');\n            }, 200);\n        },\n\n        moveUp: function() {\n            let $prev = this.$container.prev('.matrixblock');\n            if ($prev.length) {\n                this.$container.insertBefore($prev);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        moveDown: function() {\n            let $next = this.$container.next('.matrixblock');\n            if ($next.length) {\n                this.$container.insertAfter($next);\n                this.matrix.blockSelect.resetItemOrder();\n            }\n        },\n\n        onMenuOptionSelect: function(option) {\n            var batchAction = (this.matrix.blockSelect.totalSelected > 1 && this.matrix.blockSelect.isSelected(this.$container)),\n                $option = $(option);\n\n            switch ($option.data('action')) {\n                case 'collapse': {\n                    if (batchAction) {\n                        this.matrix.collapseSelectedBlocks();\n                    } else {\n                        this.collapse(true);\n                    }\n\n                    break;\n                }\n\n                case 'expand': {\n                    if (batchAction) {\n                        this.matrix.expandSelectedBlocks();\n                    } else {\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'disable': {\n                    if (batchAction) {\n                        this.matrix.disableSelectedBlocks();\n                    } else {\n                        this.disable();\n                    }\n\n                    break;\n                }\n\n                case 'enable': {\n                    if (batchAction) {\n                        this.matrix.enableSelectedBlocks();\n                    } else {\n                        this.enable();\n                        this.expand();\n                    }\n\n                    break;\n                }\n\n                case 'moveUp': {\n                    this.moveUp();\n                    break;\n                }\n\n                case 'moveDown': {\n                    this.moveDown();\n                    break;\n                }\n\n                case 'add': {\n                    var type = $option.data('type');\n                    this.matrix.addBlock(type, this.$container);\n                    break;\n                }\n\n                case 'delete': {\n                    if (batchAction) {\n                        if (confirm(Craft.t('app', 'Are you sure you want to delete the selected blocks?'))) {\n                            this.matrix.deleteSelectedBlocks();\n                        }\n                    } else {\n                        this.selfDestruct();\n                    }\n\n                    break;\n                }\n            }\n        },\n\n        selfDestruct: function() {\n            // Pause the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.pause();\n            }\n\n            this.$container.velocity(this.matrix.getHiddenBlockCss(this.$container), 'fast', () => {\n                this.$container.remove();\n                this.matrix.updateAddBlockBtn();\n\n                // Resume the draft editor\n                if (window.draftEditor) {\n                    window.draftEditor.resume();\n                }\n\n                this.matrix.trigger('blockDeleted', {\n                    $block: this.$container,\n                });\n            });\n        }\n    });\n})(jQuery);\n"]}