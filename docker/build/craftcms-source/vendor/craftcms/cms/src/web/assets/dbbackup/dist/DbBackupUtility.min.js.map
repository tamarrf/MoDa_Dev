{"version":3,"sources":["dbbackup/src/DbBackupUtility.js"],"names":["$","Craft","DbBackupUtility","Garnish","Base","extend","$trigger","$form","init","formId","$status","this","addListener","onSubmit","hasClass","ev","preventDefault","progressBar","$progressBar","resetProgressBar","ProgressBar","removeClass","velocity","downloadFromUrl","setTimeout","prop","displayError","getActionUrl","serialize","then","updateProgressBar","onComplete","bind","cp","t","response","textStatus","trigger","$allDone","css","addClass","setProgressPercentage","opacity","showAllDone","appendTo","duration","complete","jQuery"],"mappings":"CAAA,SAACA,GACGC,MAAMC,gBAAkBC,QAAQC,KAAKC,OAAO,CACxCC,SADwC,KAExCC,MAFwC,KAKpCC,KAAKD,SAAUE,GACVH,KAAAA,MAAaN,EAAA,IAAAS,GACbC,KAAAA,SAAYV,EAAA,eAAmBW,KAAKJ,OAEpCK,KAAAA,QAAYZ,EAAKO,kBAAiBI,KAAAJ,OAGnCI,KAAEC,YAAaD,KAAAJ,MAAA,SAAA,aAGnBM,SAAUP,SAASQ,GACXC,EAACC,iBAEEL,KAAAL,SAAAQ,SAAA,cACEG,KAALA,YAGCA,KAAYC,YAAjBC,mBAFCR,KAAAM,YAAA,IAAAhB,MAAAmB,YAAAT,KAAAD,SAMEC,KAAAM,YAAAC,aAAAG,YAAA,UAEUrB,KAAEiB,YAAAC,aAAyBI,SAAa,QAAAA,SAAA,CACnCC,QAAAA,GAEE,CACAC,SAAW,KAEFxB,EAAA,oBAAAyB,KAAA,WACAC,MAAAA,gBAAqB,OAAOzB,MAAA0B,aAAA,sCAAAhB,KAAAJ,MAAAqB,aACrBC,KAAhB,KAPRlB,KAAAmB,oBASGN,WAAAb,KAAAoB,WAAAC,KAAArB,MAAA,OAEMmB,MAAL,KALI7B,MAAMgC,GAAGP,aAAazB,MAAMiC,EAAE,MAAO,+EAMtBvB,KAAAoB,YAAW,KAGjBL,MAAAA,kBAAqB,qCAAO,CAAAS,EAAAC,KAChCL,KAAWD,oBACnB,YAAAM,EAPLZ,WAAAb,KAAAoB,WAAAC,KAAArB,MAAA,MAUPV,MAAAgC,GAAAP,aAAAzB,MAAAiC,EAAA,MAAA,+EAzBLvB,KAAAoB,YAAA,SAiCKzB,KAAS+B,UACjB1B,KAAA2B,SAAAC,IAAA,UAAA,GAIQ5B,KAATL,SAAAkC,SAAA,YACKvB,KAAAA,SAAYwB,QAAAA,UAKbX,kBAAkB,WAErBnB,KAAAM,YAAAwB,sBADiBF,MAGsBG,WAAS,SAAAC,GAAIhC,KAAA2B,WACzC3B,KAAE2B,SADuCtC,EAAA,4CAAA4C,SAAAjC,KAAAD,SACvBC,KAAE2B,SAAMC,IAAA,UAAA,IAEFG,KAAAA,YAASxB,aAAAI,SAAA,CAAAoB,QAAA,GAAA,CAAIG,SAAA,OAAAC,SAAA,UAAW,IAAAH,IAAA,IAAAA,GAAhDhC,KAAA2B,SAAAhB,SAAA,CAAAoB,QAAA,GAAA,CAAAG,SAAA,SAGCvC,KAASe,SAAAA,YAAd,YACKf,KAAS+B,SAAQA,QAAtB,eAhFpB,CAqFGU","file":"DbBackupUtility.min.js","sourcesContent":["(function($) {\n    Craft.DbBackupUtility = Garnish.Base.extend({\n        $trigger: null,\n        $form: null,\n\n        init: function(formId) {\n            this.$form = $('#' + formId);\n            this.$trigger = $('input.submit', this.$form);\n            this.$status = $('.utility-status', this.$form);\n\n            this.addListener(this.$form, 'submit', 'onSubmit');\n        },\n\n        onSubmit: function(ev) {\n            ev.preventDefault();\n\n            if (!this.$trigger.hasClass('disabled')) {\n                if (!this.progressBar) {\n                    this.progressBar = new Craft.ProgressBar(this.$status);\n                } else {\n                    this.progressBar.resetProgressBar();\n                }\n\n                this.progressBar.$progressBar.removeClass('hidden');\n\n                this.progressBar.$progressBar.velocity('stop').velocity({\n                    opacity: 1\n                }, {\n                    complete: () => {\n                        if (($('#download-backup').prop('checked'))) {\n                            Craft.downloadFromUrl('POST', Craft.getActionUrl('utilities/db-backup-perform-action'), this.$form.serialize())\n                                .then(() => {\n                                    this.updateProgressBar();\n                                    setTimeout(this.onComplete.bind(this), 300);\n                                })\n                                .catch(() => {\n                                    Craft.cp.displayError(Craft.t('app', 'There was a problem backing up your database. Please check the Craft logs.'));\n                                    this.onComplete(false);\n                                });\n                        } else {\n                            Craft.postActionRequest('utilities/db-backup-perform-action', (response, textStatus) => {\n                                this.updateProgressBar();\n                                if (textStatus === 'success') {\n                                    setTimeout(this.onComplete.bind(this), 300);\n                                } else {\n                                    Craft.cp.displayError(Craft.t('app', 'There was a problem backing up your database. Please check the Craft logs.'));\n                                    this.onComplete(false);\n                                }\n                            });\n                        }\n                    },\n                });\n\n                if (this.$allDone) {\n                    this.$allDone.css('opacity', 0);\n                }\n\n                this.$trigger.addClass('disabled');\n                this.$trigger.trigger('blur');\n            }\n        },\n\n        updateProgressBar: function() {\n            var width = 100;\n            this.progressBar.setProgressPercentage(width);\n        },\n\n        onComplete: function(showAllDone) {\n            if (!this.$allDone) {\n                this.$allDone = $('<div class=\"alldone\" data-icon=\"done\" />').appendTo(this.$status);\n                this.$allDone.css('opacity', 0);\n            }\n\n            this.progressBar.$progressBar.velocity({opacity: 0}, {\n                duration: 'fast', complete: () => {\n                    if (typeof showAllDone === 'undefined' || showAllDone === true) {\n                        this.$allDone.velocity({opacity: 1}, {duration: 'fast'});\n                    }\n\n                    this.$trigger.removeClass('disabled');\n                    this.$trigger.trigger('focus');\n                },\n            });\n        }\n    });\n})(jQuery);\n"]}