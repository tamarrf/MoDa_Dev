{"version":3,"sources":["fields/src/fields.js"],"names":["$","FieldsAdmin","Garnish","Base","extend","$groups","init","$selectedGroup","find","addListener","$groupSettingsBtn","menuBtn","data","settings","elem","renameSelectedGroup","this","deleteSelectedGroup","addNewGroup","name","promptForGroupName","postActionRequest","response","textStatus","success","location","getUrl","Craft","group","id","errors","flattenErrors","alert","t","join","displayError","newName","oldName","displayNotice","text","cp","confirm","href","responseErrors","attribute","hasOwnProperty","ready","concat","$doc","jQuery"],"mappings":"CAAA,SAACA,GAEG,IAAAC,EAAAC,QAAAC,KAAAC,OAAA,CACIH,QAAW,KACXI,eADkC,KAI9BC,KAAE,WACGD,KAAAA,QAAYL,EAAA,WACZO,KAAAA,eAAsBF,KAAAA,QAAaG,KAAA,eACnCC,KAAAA,YAAcT,EAAA,gBAAiB,WAAY,eAEhD,IAAIU,EAAoBV,EAAE,qBAGlBW,EAAUD,SAAAA,EAAkBE,KAAK,WAGnBC,SAAOD,eAArBE,IAGS,OAHId,EAAEc,GAAMF,KAAK,WAGP,IAAA,SACNG,KAAAA,sBACL,MAEJ,IAAK,SAALC,KAAAC,0BAtBkBC,YAAA,WA+BlCA,IAAWC,EAAEH,KAAAI,mBAAW,IAGpB,GAAID,EAAM,CAAA,IAAAP,EAAA,CACKO,KAAAA,GAILE,MAAAA,kBAAkB,oBAA4BC,EAAAA,CAADA,EAAWC,KACtDA,GAAJ,YAAcA,EACE,GAACC,EAASA,QAClBC,SAAsBC,KAAOC,MAAAD,OAAA,mBAAqBJ,EAAlDM,MAAAC,SACe,GAACC,EAAQA,OAAA,CACX,IAAKC,EAAAA,KAAcT,cAASQ,EAAzCA,QACcE,MAARL,MAAeM,EAAA,MAAA,+BAA0CH,OAAYA,EAA3EI,KAAA,YAESC,MAAAA,GAATA,mBAQhBpB,oBAAmBR,WACf6B,IAAAA,EAAehB,KAAAA,eAAmBiB,OAAlCD,EAAUpB,KAAKI,mBAAmBiB,GAG9BzB,GAAIwB,GAAGA,IAAAC,EAAA,CACH,IAAK9B,EAAAA,CACH6B,GAAAA,KAAAA,eAAAA,KAAAA,MAFVjB,KAAAiB,GAOYd,MAAAA,kBAAkB,oBAAAV,EAAA,CAAAU,EAAAC,KACbhB,GAAoBe,YAApBf,EACI+B,GAAAA,EAAcX,QAChBL,KAASQ,eAAQS,KAAAjB,EAAAM,MAAAT,MACXQ,MAAKI,GAAAA,cAAcT,MAASQ,EAAAA,MAAzC,wBACc,GAAOR,EAAAQ,OAAA,CAClB,IAAAA,EAAAd,KAAAe,cAAAT,EAAAQ,QACMK,MAAAA,MAATF,EAAA,MAAA,+BAAA,OAAAH,EAAAI,KAAA,YAEPP,MAAAa,GAAAL,mBASblB,mBAAqB,SAAWoB,GACxBI,OAAQd,OAAQA,MAARM,EAAe,MAAA,uCAAAI,IACZpB,oBAAX,WAIAU,GAAMN,QAAAA,MAAAA,EAAkB,MAAA,mEAAuD,CACvEE,IAAAA,EAAU,CACND,GAAQN,KAACQ,eAASZ,KAAA,OAGlBe,MAAAN,kBAAA,sBAAAT,EAAA,CAAAU,EAAAC,KACH,YAAAA,IACJD,EAAAE,QAPLC,SAAAiB,KAAAf,MAAAD,OAAA,mBA1F0BC,MAAAa,GAAAL,oBA4GzBJ,cAAA,SAAAY,GALL,IAAIb,EAAS,GAQZ,IAAA,IAAAc,KAAAD,EALQA,EAAeE,eAAeD,KAWlCE,EAAMhB,EAAAiB,OAAWJ,EAAAC,KAxHlC,OAAAd,KAwHI5B,QAAQ8C,KAAKF,OAAM,WACfnB,MAAM1B,YAAc,IAAIA,KAzHhC,CA2HGgD","file":"fields.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    var FieldsAdmin = Garnish.Base.extend({\n        $groups: null,\n        $selectedGroup: null,\n\n        init: function() {\n            this.$groups = $('#groups');\n            this.$selectedGroup = this.$groups.find('a.sel:first');\n            this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n            var $groupSettingsBtn = $('#groupsettingsbtn');\n\n            if ($groupSettingsBtn.length) {\n                var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                menuBtn.settings.onOptionSelect = elem => {\n                    var action = $(elem).data('action');\n\n                    switch (action) {\n                        case 'rename': {\n                            this.renameSelectedGroup();\n                            break;\n                        }\n                        case 'delete': {\n                            this.deleteSelectedGroup();\n                            break;\n                        }\n                    }\n                };\n            }\n        },\n\n        addNewGroup: function() {\n            var name = this.promptForGroupName('');\n\n            if (name) {\n                var data = {\n                    name: name\n                };\n\n                Craft.postActionRequest('fields/save-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/fields/' + response.group.id);\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }\n        },\n\n        renameSelectedGroup: function() {\n            var oldName = this.$selectedGroup.text(),\n                newName = this.promptForGroupName(oldName);\n\n            if (newName && newName !== oldName) {\n                var data = {\n                    id: this.$selectedGroup.data('id'),\n                    name: newName\n                };\n\n                Craft.postActionRequest('fields/save-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            this.$selectedGroup.text(response.group.name);\n                            Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }\n        },\n\n        promptForGroupName: function(oldName) {\n            return prompt(Craft.t('app', 'What do you want to name the group?'), oldName);\n        },\n\n        deleteSelectedGroup: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this group and all its fields?'))) {\n                var data = {\n                    id: this.$selectedGroup.data('id')\n                };\n\n                Craft.postActionRequest('fields/delete-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/fields');\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }\n        },\n\n        flattenErrors: function(responseErrors) {\n            var errors = [];\n\n            for (var attribute in responseErrors) {\n                if (!responseErrors.hasOwnProperty(attribute)) {\n                    continue;\n                }\n\n                errors = errors.concat(responseErrors[attribute]);\n            }\n\n            return errors;\n        }\n    });\n\n    Garnish.$doc.ready(function() {\n        Craft.FieldsAdmin = new FieldsAdmin();\n    });\n})(jQuery);\n"]}